

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Feb 20 14:16:30 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0007                     	;# 
    42  0008                     	;# 
    43  0009                     	;# 
    44  000A                     	;# 
    45  000B                     	;# 
    46  000C                     	;# 
    47  000D                     	;# 
    48  000E                     	;# 
    49  000E                     	;# 
    50  000F                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0015                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001B                     	;# 
    65  001C                     	;# 
    66  001D                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  0087                     	;# 
    73  0088                     	;# 
    74  0089                     	;# 
    75  008C                     	;# 
    76  008D                     	;# 
    77  008E                     	;# 
    78  0091                     	;# 
    79  0092                     	;# 
    80  0093                     	;# 
    81  0094                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  009F                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  010F                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94                           
    95                           	psect	idataBANK0
    96  0177                     __pidataBANK0:	
    97                           
    98                           ;initializer for _ARR_LcdLineNumAddress_U8
    99  0177  3480               	retlw	128
   100  0178  34C0               	retlw	192
   101  0179  3490               	retlw	144
   102  017A  34D0               	retlw	208
   103  0005                     _PORTA	set	5
   104  0006                     _PORTB	set	6
   105  0007                     _PORTC	set	7
   106  0008                     _PORTD	set	8
   107  0009                     _PORTE	set	9
   108  0085                     _TRISA	set	133
   109  0086                     _TRISB	set	134
   110  0087                     _TRISC	set	135
   111  0088                     _TRISD	set	136
   112  0089                     _TRISE	set	137
   113                           
   114                           	psect	strings
   115  0003                     __pstrings:	
   116  0003                     stringtab:	
   117  0003                     __stringtab:	
   118  0003                     stringcode:	
   119                           ;	String table - string pointers are 1 byte each
   120                           
   121  0003                     stringdir:	
   122  0003  3000               	movlw	high stringdir
   123  0004  008A               	movwf	10
   124  0005  0804               	movf	4,w
   125  0006  0A84               	incf	4,f
   126  0007  0782               	addwf	2,f
   127  0008                     __stringbase:	
   128  0008  3400               	retlw	0
   129  0009                     __end_of__stringtab:	
   130  0009                     STR_1:	
   131  0009  3420               	retlw	32	;' '
   132  000A  3420               	retlw	32	;' '
   133  000B  3420               	retlw	32	;' '
   134  000C  3420               	retlw	32	;' '
   135  000D  3420               	retlw	32	;' '
   136  000E  3420               	retlw	32	;' '
   137  000F  3420               	retlw	32	;' '
   138  0010  3420               	retlw	32	;' '
   139  0011  3457               	retlw	87	;'W'
   140  0012  3465               	retlw	101	;'e'
   141  0013  346C               	retlw	108	;'l'
   142  0014  3463               	retlw	99	;'c'
   143  0015  346F               	retlw	111	;'o'
   144  0016  346D               	retlw	109	;'m'
   145  0017  3465               	retlw	101	;'e'
   146  0018  3420               	retlw	32	;' '
   147  0019  3474               	retlw	116	;'t'
   148  001A  346F               	retlw	111	;'o'
   149  001B  3420               	retlw	32	;' '
   150  001C  3450               	retlw	80	;'P'
   151  001D  3449               	retlw	73	;'I'
   152  001E  3443               	retlw	67	;'C'
   153  001F  3420               	retlw	32	;' '
   154  0020  3470               	retlw	112	;'p'
   155  0021  3472               	retlw	114	;'r'
   156  0022  346F               	retlw	111	;'o'
   157  0023  3467               	retlw	103	;'g'
   158  0024  3472               	retlw	114	;'r'
   159  0025  3461               	retlw	97	;'a'
   160  0026  346D               	retlw	109	;'m'
   161  0027  346D               	retlw	109	;'m'
   162  0028  3469               	retlw	105	;'i'
   163  0029  346E               	retlw	110	;'n'
   164  002A  3467               	retlw	103	;'g'
   165  002B  3420               	retlw	32	;' '
   166  002C  3462               	retlw	98	;'b'
   167  002D  3479               	retlw	121	;'y'
   168  002E  3420               	retlw	32	;' '
   169  002F  3445               	retlw	69	;'E'
   170  0030  3478               	retlw	120	;'x'
   171  0031  3470               	retlw	112	;'p'
   172  0032  346C               	retlw	108	;'l'
   173  0033  346F               	retlw	111	;'o'
   174  0034  3472               	retlw	114	;'r'
   175  0035  3465               	retlw	101	;'e'
   176  0036  3420               	retlw	32	;' '
   177  0037  3445               	retlw	69	;'E'
   178  0038  346D               	retlw	109	;'m'
   179  0039  3462               	retlw	98	;'b'
   180  003A  3465               	retlw	101	;'e'
   181  003B  3464               	retlw	100	;'d'
   182  003C  3464               	retlw	100	;'d'
   183  003D  3465               	retlw	101	;'e'
   184  003E  3464               	retlw	100	;'d'
   185  003F  3420               	retlw	32	;' '
   186  0040  3400               	retlw	0
   187                           
   188                           ; #config settings
   189  0000                     
   190                           	psect	cinit
   191  07DD                     start_initialization:	
   192  07DD                     __initialization:	
   193                           
   194                           ; Clear objects allocated to BANK0
   195  07DD  1383               	bcf	3,7	;select IRP bank0
   196  07DE  3036               	movlw	low __pbssBANK0
   197  07DF  0084               	movwf	4
   198  07E0  3046               	movlw	low (__pbssBANK0+16)
   199  07E1  120A  118A  217B  120A  118A  	fcall	clear_ram0
   200                           
   201                           ; Initialize objects allocated to BANK0
   202  07E6  120A  118A  2177  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   203  07EB  00C6               	movwf	__pdataBANK0& (0+127)
   204  07EC  120A  118A  2178  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   205  07F1  00C7               	movwf	(__pdataBANK0+1)& (0+127)
   206  07F2  120A  118A  2179  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   207  07F7  00C8               	movwf	(__pdataBANK0+2)& (0+127)
   208  07F8  120A  118A  217A   	fcall	__pidataBANK0+3	;fetch initializer
   209  07FB  00C9               	movwf	(__pdataBANK0+3)& (0+127)
   210  07FC                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213  07FC                     __end_of__initialization:	
   214  07FC  0183               	clrf	3
   215  07FD  120A  118A  2B81   	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	bssBANK0
   218  0036                     __pbssBANK0:	
   219  0036                     _LCDConfig:	
   220  0036                     	ds	14
   221  0044                     _v_LcdTrackCursorPos_U8:	
   222  0044                     	ds	1
   223  0045                     _v_LcdTrackLineNum_U8:	
   224  0045                     	ds	1
   225                           
   226                           	psect	dataBANK0
   227  0046                     __pdataBANK0:	
   228  0046                     _ARR_LcdLineNumAddress_U8:	
   229  0046                     	ds	4
   230                           
   231                           	psect	clrtext
   232  017B                     clear_ram0:	
   233                           ;	Called with FSR containing the base address, and
   234                           ;	W with the last address+1
   235                           
   236  017B  0064               	clrwdt	;clear the watchdog before getting into this loop
   237  017C                     clrloop0:	
   238  017C  0180               	clrf	0	;clear RAM location pointed to by FSR
   239  017D  0A84               	incf	4,f	;increment pointer
   240  017E  0604               	xorwf	4,w	;XOR with final address
   241  017F  1903               	btfsc	3,2	;have we reached the end yet?
   242  0180  3400               	retlw	0	;all done for this memory range, return
   243  0181  0604               	xorwf	4,w	;XOR again to restore value
   244  0182  297C               	goto	clrloop0	;do the next byte
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:	
   248  0070                     ?_LCD_CmdWrite:	
   249  0070                     ?_lcd_Reset:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_LCD_Clear:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_LCD_GoToLine:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_lcd_BusyCheck:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_lcd_SendLowerNibble:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_lcd_SendHigherNibble:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_lcd_SendCmdSignals:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_lcd_DataWrite:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_lcd_SendDataSignals:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_GPIO_PinDirection:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_GPIO_PinWrite:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_GPIO_PinRead:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ??_GPIO_PinRead:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_DELAY_us:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_LCD_GoToNextLine:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_LCD_DisplayChar:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_main:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     GPIO_PinDirection@var_pinDirn_u8:	
   301                           ; 2 bytes @ 0x0
   302                           
   303  0070                     GPIO_PinWrite@var_pinValue_u8:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     DELAY_us@us_count:	
   307                           ; 1 bytes @ 0x0
   308                           
   309                           
   310                           ; 2 bytes @ 0x0
   311  0070                     	ds	1
   312  0071                     ??_GPIO_PinDirection:	
   313  0071                     ??_GPIO_PinWrite:	
   314                           ; 1 bytes @ 0x1
   315                           
   316                           
   317                           ; 1 bytes @ 0x1
   318  0071                     	ds	1
   319  0072                     ??_DELAY_us:	
   320  0072                     ?_DELAY_ms:	
   321                           ; 1 bytes @ 0x2
   322                           
   323  0072                     GPIO_PinRead@var_portNumber_u8:	
   324                           ; 1 bytes @ 0x2
   325                           
   326  0072                     DELAY_ms@ms_count:	
   327                           ; 1 bytes @ 0x2
   328                           
   329                           
   330                           ; 2 bytes @ 0x2
   331  0072                     	ds	1
   332  0073                     GPIO_PinDirection@var_portNumber_u8:	
   333  0073                     GPIO_PinWrite@var_portNumber_u8:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     GPIO_PinRead@returnStatus:	
   337                           ; 1 bytes @ 0x3
   338                           
   339                           
   340                           ; 1 bytes @ 0x3
   341  0073                     	ds	1
   342  0074                     ??_DELAY_ms:	
   343  0074                     GPIO_PinDirection@enm_pinNumber:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     GPIO_PinWrite@enm_pinNumber:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     GPIO_PinRead@enm_pinNumber:	
   350                           ; 1 bytes @ 0x4
   351                           
   352                           
   353                           ; 1 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ??_LCD_SetUp:	
   356  0075                     ??_lcd_BusyCheck:	
   357                           ; 1 bytes @ 0x5
   358                           
   359  0075                     ??_lcd_SendLowerNibble:	
   360                           ; 1 bytes @ 0x5
   361                           
   362  0075                     ??_lcd_SendHigherNibble:	
   363                           ; 1 bytes @ 0x5
   364                           
   365  0075                     ??_lcd_SendCmdSignals:	
   366                           ; 1 bytes @ 0x5
   367                           
   368  0075                     ??_lcd_SendDataSignals:	
   369                           ; 1 bytes @ 0x5
   370                           
   371                           
   372                           ; 1 bytes @ 0x5
   373  0075                     	ds	1
   374  0076                     LCD_SetUp@RS:	
   375  0076                     lcd_BusyCheck@busyflag:	
   376                           ; 1 bytes @ 0x6
   377                           
   378  0076                     lcd_SendHigherNibble@dataByte:	
   379                           ; 1 bytes @ 0x6
   380                           
   381  0076                     lcd_SendLowerNibble@dataByte:	
   382                           ; 1 bytes @ 0x6
   383                           
   384                           
   385                           ; 1 bytes @ 0x6
   386  0076                     	ds	1
   387  0077                     ??_LCD_CmdWrite:	
   388  0077                     ??_lcd_Reset:	
   389                           ; 1 bytes @ 0x7
   390                           
   391  0077                     ??_lcd_DataWrite:	
   392                           ; 1 bytes @ 0x7
   393                           
   394                           
   395                           ; 1 bytes @ 0x7
   396  0077                     	ds	2
   397  0079                     LCD_CmdWrite@v_lcdCmd_u8:	
   398  0079                     lcd_DataWrite@dataByte:	
   399                           ; 1 bytes @ 0x9
   400                           
   401                           
   402                           ; 1 bytes @ 0x9
   403  0079                     	ds	1
   404  007A                     ??_LCD_GoToLine:	
   405  007A                     ??_LCD_GoToNextLine:	
   406                           ; 1 bytes @ 0xA
   407                           
   408                           
   409                           ; 1 bytes @ 0xA
   410  007A                     	ds	1
   411  007B                     ??_LCD_DisplayChar:	
   412  007B                     LCD_GoToLine@v_lineNumber_u8:	
   413                           ; 1 bytes @ 0xB
   414                           
   415                           
   416                           ; 1 bytes @ 0xB
   417  007B                     	ds	1
   418  007C                     ?_LCD_Init:	
   419  007C                     ??_LCD_Clear:	
   420                           ; 1 bytes @ 0xC
   421                           
   422  007C                     LCD_Init@v_MaxCharsPerLine_u8:	
   423                           ; 1 bytes @ 0xC
   424                           
   425  007C                     LCD_DisplayChar@v_lcdData_u8:	
   426                           ; 1 bytes @ 0xC
   427                           
   428                           
   429                           ; 1 bytes @ 0xC
   430  007C                     	ds	1
   431  007D                     ??_LCD_Init:	
   432  007D                     ?_LCD_ScrollMessage:	
   433                           ; 1 bytes @ 0xD
   434                           
   435  007D                     LCD_ScrollMessage@ptr_msgPointer_u8:	
   436                           ; 1 bytes @ 0xD
   437                           
   438                           
   439                           ; 1 bytes @ 0xD
   440  007D                     	ds	1
   441                           
   442                           	psect	cstackBANK0
   443  0020                     __pcstackBANK0:	
   444  0020                     ?_LCD_SetUp:	
   445  0020                     ??_LCD_ScrollMessage:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0020                     LCD_SetUp@RW:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0020                     LCD_Init@v_lcdNoOfLines_u8:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 1 bytes @ 0x0
   456  0020                     	ds	1
   457  0021                     LCD_SetUp@EN:	
   458  0021                     LCD_ScrollMessage@v_lineNumber_u8:	
   459                           ; 1 bytes @ 0x1
   460                           
   461                           
   462                           ; 1 bytes @ 0x1
   463  0021                     	ds	1
   464  0022                     LCD_SetUp@D0:	
   465  0022                     LCD_ScrollMessage@i:	
   466                           ; 1 bytes @ 0x2
   467                           
   468                           
   469                           ; 1 bytes @ 0x2
   470  0022                     	ds	1
   471  0023                     LCD_SetUp@D1:	
   472  0023                     LCD_ScrollMessage@j:	
   473                           ; 1 bytes @ 0x3
   474                           
   475                           
   476                           ; 1 bytes @ 0x3
   477  0023                     	ds	1
   478  0024                     LCD_SetUp@D2:	
   479                           
   480                           ; 1 bytes @ 0x4
   481  0024                     	ds	1
   482  0025                     LCD_SetUp@D3:	
   483                           
   484                           ; 1 bytes @ 0x5
   485  0025                     	ds	1
   486  0026                     LCD_SetUp@D4:	
   487                           
   488                           ; 1 bytes @ 0x6
   489  0026                     	ds	1
   490  0027                     LCD_SetUp@D5:	
   491                           
   492                           ; 1 bytes @ 0x7
   493  0027                     	ds	1
   494  0028                     LCD_SetUp@D6:	
   495                           
   496                           ; 1 bytes @ 0x8
   497  0028                     	ds	1
   498  0029                     LCD_SetUp@D7:	
   499                           
   500                           ; 1 bytes @ 0x9
   501  0029                     	ds	1
   502  002A                     ??_main:	
   503                           
   504                           ; 1 bytes @ 0xA
   505  002A                     	ds	10
   506  0034                     main@count:	
   507                           
   508                           ; 2 bytes @ 0x14
   509  0034                     	ds	2
   510                           
   511                           	psect	maintext
   512  0381                     __pmaintext:	
   513 ;;
   514 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
   515 ;;
   516 ;; *************** function _main *****************
   517 ;; Defined at:
   518 ;;		line 43 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  count           2   20[BANK0 ] int 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  2    8[None  ] int 
   525 ;; Registers used:
   526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : B00/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   532 ;;      Params:         0       0       0       0       0
   533 ;;      Locals:         0       2       0       0       0
   534 ;;      Temps:          0      10       0       0       0
   535 ;;      Totals:         0      12       0       0       0
   536 ;;Total ram usage:       12 bytes
   537 ;; Hardware stack levels required when called:    7
   538 ;; This function calls:
   539 ;;		_LCD_Init
   540 ;;		_LCD_ScrollMessage
   541 ;;		_LCD_SetUp
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _main
   549  0381                     _main:	
   550                           
   551                           ;main.c: 45: int count = 0;
   552                           
   553                           ;incstack = 0
   554                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   555  0381  1283               	bcf	3,5	;RP0=0, select bank0
   556  0382  1303               	bcf	3,6	;RP1=0, select bank0
   557  0383  01B4               	clrf	main@count
   558  0384  01B5               	clrf	main@count+1
   559                           
   560                           ;main.c: 47: LCD_SetUp(PD_0,PD_1,PD_2,PB_0,PB_1,PB_2,PB_3,PB_4,PB_5,PB_6,PB_7);
   561  0385  3019               	movlw	25
   562  0386  00AA               	movwf	??_main
   563  0387  082A               	movf	??_main,w
   564  0388  00A0               	movwf	LCD_SetUp@RW
   565  0389  301A               	movlw	26
   566  038A  00AB               	movwf	??_main+1
   567  038B  082B               	movf	??_main+1,w
   568  038C  00A1               	movwf	LCD_SetUp@EN
   569  038D  3008               	movlw	8
   570  038E  00AC               	movwf	??_main+2
   571  038F  082C               	movf	??_main+2,w
   572  0390  00A2               	movwf	LCD_SetUp@D0
   573  0391  3009               	movlw	9
   574  0392  00AD               	movwf	??_main+3
   575  0393  082D               	movf	??_main+3,w
   576  0394  00A3               	movwf	LCD_SetUp@D1
   577  0395  300A               	movlw	10
   578  0396  00AE               	movwf	??_main+4
   579  0397  082E               	movf	??_main+4,w
   580  0398  00A4               	movwf	LCD_SetUp@D2
   581  0399  300B               	movlw	11
   582  039A  00AF               	movwf	??_main+5
   583  039B  082F               	movf	??_main+5,w
   584  039C  00A5               	movwf	LCD_SetUp@D3
   585  039D  300C               	movlw	12
   586  039E  00B0               	movwf	??_main+6
   587  039F  0830               	movf	??_main+6,w
   588  03A0  00A6               	movwf	LCD_SetUp@D4
   589  03A1  300D               	movlw	13
   590  03A2  00B1               	movwf	??_main+7
   591  03A3  0831               	movf	??_main+7,w
   592  03A4  00A7               	movwf	LCD_SetUp@D5
   593  03A5  300E               	movlw	14
   594  03A6  00B2               	movwf	??_main+8
   595  03A7  0832               	movf	??_main+8,w
   596  03A8  00A8               	movwf	LCD_SetUp@D6
   597  03A9  300F               	movlw	15
   598  03AA  00B3               	movwf	??_main+9
   599  03AB  0833               	movf	??_main+9,w
   600  03AC  00A9               	movwf	LCD_SetUp@D7
   601  03AD  3018               	movlw	24
   602  03AE  120A  118A  258A  120A  118A  	fcall	_LCD_SetUp
   603                           
   604                           ;main.c: 48: LCD_Init(2,16);
   605  03B3  3010               	movlw	16
   606  03B4  1283               	bcf	3,5	;RP0=0, select bank0
   607  03B5  1303               	bcf	3,6	;RP1=0, select bank0
   608  03B6  00AA               	movwf	??_main
   609  03B7  082A               	movf	??_main,w
   610  03B8  00FC               	movwf	LCD_Init@v_MaxCharsPerLine_u8
   611  03B9  3002               	movlw	2
   612  03BA  120A  118A  233A  120A  118A  	fcall	_LCD_Init
   613  03BF                     l1663:	
   614                           ;main.c: 50: while(1)
   615                           
   616                           
   617                           ;main.c: 51: {
   618                           ;main.c: 52: LCD_ScrollMessage(0,"        Welcome to PIC programming by Explore Embedded
      +                           ");
   619  03BF  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   620  03C0  1283               	bcf	3,5	;RP0=0, select bank0
   621  03C1  1303               	bcf	3,6	;RP1=0, select bank0
   622  03C2  00AA               	movwf	??_main
   623  03C3  082A               	movf	??_main,w
   624  03C4  00FD               	movwf	LCD_ScrollMessage@ptr_msgPointer_u8
   625  03C5  3000               	movlw	0
   626  03C6  120A  118A  241B  120A  118A  	fcall	_LCD_ScrollMessage
   627  03CB  2BBF               	goto	l1663
   628  03CC                     __end_of_main:	
   629                           ;main.c: 53: }
   630                           ;main.c: 55: return (0);
   631                           ;	Return value of _main is never used
   632                           
   633                           
   634                           	psect	text1
   635  058A                     __ptext1:	
   636 ;; *************** function _LCD_SetUp *****************
   637 ;; Defined at:
   638 ;;		line 129 in file "../00-libfiles/lcd.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  RS              1    wreg     enum E33
   641 ;;  RW              1    0[BANK0 ] enum E33
   642 ;;  EN              1    1[BANK0 ] enum E33
   643 ;;  D0              1    2[BANK0 ] enum E33
   644 ;;  D1              1    3[BANK0 ] enum E33
   645 ;;  D2              1    4[BANK0 ] enum E33
   646 ;;  D3              1    5[BANK0 ] enum E33
   647 ;;  D4              1    6[BANK0 ] enum E33
   648 ;;  D5              1    7[BANK0 ] enum E33
   649 ;;  D6              1    8[BANK0 ] enum E33
   650 ;;  D7              1    9[BANK0 ] enum E33
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  RS              1    6[COMMON] enum E33
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   662 ;;      Params:         0      10       0       0       0
   663 ;;      Locals:         1       0       0       0       0
   664 ;;      Temps:          1       0       0       0       0
   665 ;;      Totals:         2      10       0       0       0
   666 ;;Total ram usage:       12 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    1
   669 ;; This function calls:
   670 ;;		_GPIO_PinDirection
   671 ;; This function is called by:
   672 ;;		_main
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           
   677                           ;psect for function _LCD_SetUp
   678  058A                     _LCD_SetUp:	
   679                           
   680                           ;incstack = 0
   681                           ; Regs used in _LCD_SetUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   682                           ;LCD_SetUp@RS stored from wreg
   683  058A  00F6               	movwf	LCD_SetUp@RS
   684                           
   685                           ;lcd.c: 142: LCDConfig.RS = RS;
   686  058B  0876               	movf	LCD_SetUp@RS,w
   687  058C  00F5               	movwf	??_LCD_SetUp
   688  058D  0875               	movf	??_LCD_SetUp,w
   689  058E  1283               	bcf	3,5	;RP0=0, select bank0
   690  058F  1303               	bcf	3,6	;RP1=0, select bank0
   691  0590  00B9               	movwf	_LCDConfig+3
   692                           
   693                           ;lcd.c: 143: LCDConfig.RW = RW;
   694  0591  0820               	movf	LCD_SetUp@RW,w
   695  0592  00F5               	movwf	??_LCD_SetUp
   696  0593  0875               	movf	??_LCD_SetUp,w
   697  0594  00BA               	movwf	_LCDConfig+4
   698                           
   699                           ;lcd.c: 144: LCDConfig.EN = EN;
   700  0595  0821               	movf	LCD_SetUp@EN,w
   701  0596  00F5               	movwf	??_LCD_SetUp
   702  0597  0875               	movf	??_LCD_SetUp,w
   703  0598  00BB               	movwf	_LCDConfig+5
   704                           
   705                           ;lcd.c: 146: LCDConfig.D0 = D0;
   706  0599  0822               	movf	LCD_SetUp@D0,w
   707  059A  00F5               	movwf	??_LCD_SetUp
   708  059B  0875               	movf	??_LCD_SetUp,w
   709  059C  00BC               	movwf	_LCDConfig+6
   710                           
   711                           ;lcd.c: 147: LCDConfig.D1 = D1;
   712  059D  0823               	movf	LCD_SetUp@D1,w
   713  059E  00F5               	movwf	??_LCD_SetUp
   714  059F  0875               	movf	??_LCD_SetUp,w
   715  05A0  00BD               	movwf	_LCDConfig+7
   716                           
   717                           ;lcd.c: 148: LCDConfig.D2 = D2;
   718  05A1  0824               	movf	LCD_SetUp@D2,w
   719  05A2  00F5               	movwf	??_LCD_SetUp
   720  05A3  0875               	movf	??_LCD_SetUp,w
   721  05A4  00BE               	movwf	_LCDConfig+8
   722                           
   723                           ;lcd.c: 149: LCDConfig.D3 = D3;
   724  05A5  0825               	movf	LCD_SetUp@D3,w
   725  05A6  00F5               	movwf	??_LCD_SetUp
   726  05A7  0875               	movf	??_LCD_SetUp,w
   727  05A8  00BF               	movwf	_LCDConfig+9
   728                           
   729                           ;lcd.c: 150: LCDConfig.D4 = D4;
   730  05A9  0826               	movf	LCD_SetUp@D4,w
   731  05AA  00F5               	movwf	??_LCD_SetUp
   732  05AB  0875               	movf	??_LCD_SetUp,w
   733  05AC  00C0               	movwf	_LCDConfig+10
   734                           
   735                           ;lcd.c: 151: LCDConfig.D5 = D5;
   736  05AD  0827               	movf	LCD_SetUp@D5,w
   737  05AE  00F5               	movwf	??_LCD_SetUp
   738  05AF  0875               	movf	??_LCD_SetUp,w
   739  05B0  00C1               	movwf	_LCDConfig+11
   740                           
   741                           ;lcd.c: 152: LCDConfig.D6 = D6;
   742  05B1  0828               	movf	LCD_SetUp@D6,w
   743  05B2  00F5               	movwf	??_LCD_SetUp
   744  05B3  0875               	movf	??_LCD_SetUp,w
   745  05B4  00C2               	movwf	_LCDConfig+12
   746                           
   747                           ;lcd.c: 153: LCDConfig.D7 = D7;
   748  05B5  0829               	movf	LCD_SetUp@D7,w
   749  05B6  00F5               	movwf	??_LCD_SetUp
   750  05B7  0875               	movf	??_LCD_SetUp,w
   751  05B8  00C3               	movwf	_LCDConfig+13
   752                           
   753                           ;lcd.c: 156: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
   754  05B9  0A22               	incf	LCD_SetUp@D0,w
   755  05BA  1903               	btfsc	3,2
   756  05BB  2DC4               	goto	l1519
   757  05BC  0A23               	incf	LCD_SetUp@D1,w
   758  05BD  1903               	btfsc	3,2
   759  05BE  2DC4               	goto	l1519
   760  05BF  0A24               	incf	LCD_SetUp@D2,w
   761  05C0  1D03               	btfss	3,2
   762  05C1  0A25               	incf	LCD_SetUp@D3,w
   763  05C2  1D03               	btfss	3,2
   764  05C3  2DC9               	goto	l1521
   765  05C4                     l1519:	
   766                           
   767                           ;lcd.c: 157: {
   768                           ;lcd.c: 158: LCDConfig.v_LcdMode_U8 = 4;
   769  05C4  3004               	movlw	4
   770  05C5  00F5               	movwf	??_LCD_SetUp
   771  05C6  0875               	movf	??_LCD_SetUp,w
   772  05C7  00B8               	movwf	_LCDConfig+2
   773                           
   774                           ;lcd.c: 159: }
   775  05C8  2DEF               	goto	l1531
   776  05C9                     l1521:	
   777                           
   778                           ;lcd.c: 160: else
   779                           ;lcd.c: 161: {
   780                           ;lcd.c: 162: LCDConfig.v_LcdMode_U8 = 8;
   781  05C9  3008               	movlw	8
   782  05CA  00F5               	movwf	??_LCD_SetUp
   783  05CB  0875               	movf	??_LCD_SetUp,w
   784  05CC  00B8               	movwf	_LCDConfig+2
   785                           
   786                           ;lcd.c: 163: GPIO_PinDirection(D0,0x00u);
   787  05CD  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   788  05CE  0822               	movf	LCD_SetUp@D0,w
   789  05CF  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   790                           
   791                           ;lcd.c: 164: GPIO_PinDirection(D1,0x00u);
   792  05D4  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   793  05D5  1283               	bcf	3,5	;RP0=0, select bank0
   794  05D6  1303               	bcf	3,6	;RP1=0, select bank0
   795  05D7  0823               	movf	LCD_SetUp@D1,w
   796  05D8  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   797                           
   798                           ;lcd.c: 165: GPIO_PinDirection(D2,0x00u);
   799  05DD  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   800  05DE  1283               	bcf	3,5	;RP0=0, select bank0
   801  05DF  1303               	bcf	3,6	;RP1=0, select bank0
   802  05E0  0824               	movf	LCD_SetUp@D2,w
   803  05E1  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   804                           
   805                           ;lcd.c: 166: GPIO_PinDirection(D3,0x00u);
   806  05E6  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   807  05E7  1283               	bcf	3,5	;RP0=0, select bank0
   808  05E8  1303               	bcf	3,6	;RP1=0, select bank0
   809  05E9  0825               	movf	LCD_SetUp@D3,w
   810  05EA  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   811  05EF                     l1531:	
   812                           
   813                           ;lcd.c: 167: }
   814                           ;lcd.c: 170: GPIO_PinDirection(RS,0x00u);
   815  05EF  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   816  05F0  0876               	movf	LCD_SetUp@RS,w
   817  05F1  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   818                           
   819                           ;lcd.c: 171: GPIO_PinDirection(RW,0x00u);
   820  05F6  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   821  05F7  1283               	bcf	3,5	;RP0=0, select bank0
   822  05F8  1303               	bcf	3,6	;RP1=0, select bank0
   823  05F9  0820               	movf	LCD_SetUp@RW,w
   824  05FA  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   825                           
   826                           ;lcd.c: 172: GPIO_PinDirection(EN,0x00u);
   827  05FF  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   828  0600  1283               	bcf	3,5	;RP0=0, select bank0
   829  0601  1303               	bcf	3,6	;RP1=0, select bank0
   830  0602  0821               	movf	LCD_SetUp@EN,w
   831  0603  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   832                           
   833                           ;lcd.c: 174: GPIO_PinDirection(D4,0x00u);
   834  0608  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   835  0609  1283               	bcf	3,5	;RP0=0, select bank0
   836  060A  1303               	bcf	3,6	;RP1=0, select bank0
   837  060B  0826               	movf	LCD_SetUp@D4,w
   838  060C  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   839                           
   840                           ;lcd.c: 175: GPIO_PinDirection(D5,0x00u);
   841  0611  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   842  0612  1283               	bcf	3,5	;RP0=0, select bank0
   843  0613  1303               	bcf	3,6	;RP1=0, select bank0
   844  0614  0827               	movf	LCD_SetUp@D5,w
   845  0615  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   846                           
   847                           ;lcd.c: 176: GPIO_PinDirection(D6,0x00u);
   848  061A  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   849  061B  1283               	bcf	3,5	;RP0=0, select bank0
   850  061C  1303               	bcf	3,6	;RP1=0, select bank0
   851  061D  0828               	movf	LCD_SetUp@D6,w
   852  061E  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
   853                           
   854                           ;lcd.c: 177: GPIO_PinDirection(D7,0x00u);
   855  0623  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
   856  0624  1283               	bcf	3,5	;RP0=0, select bank0
   857  0625  1303               	bcf	3,6	;RP1=0, select bank0
   858  0626  0829               	movf	LCD_SetUp@D7,w
   859  0627  120A  118A  262B   	fcall	_GPIO_PinDirection
   860  062A  0008               	return
   861  062B                     __end_of_LCD_SetUp:	
   862                           
   863                           	psect	text2
   864  041B                     __ptext2:	
   865 ;; *************** function _LCD_ScrollMessage *****************
   866 ;; Defined at:
   867 ;;		line 448 in file "../00-libfiles/lcd.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;  v_lineNumber    1    wreg     unsigned char 
   870 ;;  ptr_msgPoint    1   13[COMMON] PTR unsigned char 
   871 ;;		 -> STR_1(56), 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  v_lineNumber    1    1[BANK0 ] unsigned char 
   874 ;;  j               1    3[BANK0 ] unsigned char 
   875 ;;  i               1    2[BANK0 ] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   885 ;;      Params:         1       0       0       0       0
   886 ;;      Locals:         0       3       0       0       0
   887 ;;      Temps:          0       1       0       0       0
   888 ;;      Totals:         1       4       0       0       0
   889 ;;Total ram usage:        5 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    6
   892 ;; This function calls:
   893 ;;		_DELAY_ms
   894 ;;		_LCD_CmdWrite
   895 ;;		_LCD_DisplayChar
   896 ;;		_LCD_GoToLine
   897 ;; This function is called by:
   898 ;;		_main
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _LCD_ScrollMessage
   904  041B                     _LCD_ScrollMessage:	
   905                           
   906                           ;incstack = 0
   907                           ; Regs used in _LCD_ScrollMessage: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   908                           ;LCD_ScrollMessage@v_lineNumber_u8 stored from wreg
   909  041B  1283               	bcf	3,5	;RP0=0, select bank0
   910  041C  1303               	bcf	3,6	;RP1=0, select bank0
   911  041D  00A1               	movwf	LCD_ScrollMessage@v_lineNumber_u8
   912                           
   913                           ;lcd.c: 450: unsigned char i,j;
   914                           ;lcd.c: 453: if(v_lineNumber_u8 >= LCDConfig.v_MaxSupportedLines_U8)
   915  041E  0836               	movf	_LCDConfig,w
   916  041F  0221               	subwf	LCD_ScrollMessage@v_lineNumber_u8,w
   917  0420  1803               	btfsc	3,0
   918                           
   919                           ;lcd.c: 454: v_lineNumber_u8 = 0x00;
   920  0421  01A1               	clrf	LCD_ScrollMessage@v_lineNumber_u8
   921                           
   922                           ;lcd.c: 456: LCD_CmdWrite(0x0Cu);
   923  0422  300C               	movlw	12
   924  0423  120A  118A  2250  120A  118A  	fcall	_LCD_CmdWrite
   925                           
   926                           ;lcd.c: 458: for(i=0;ptr_msgPointer_u8[i];i++)
   927  0428  1283               	bcf	3,5	;RP0=0, select bank0
   928  0429  1303               	bcf	3,6	;RP1=0, select bank0
   929  042A  01A2               	clrf	LCD_ScrollMessage@i
   930  042B                     l1589:	
   931  042B  0822               	movf	LCD_ScrollMessage@i,w
   932  042C  077D               	addwf	LCD_ScrollMessage@ptr_msgPointer_u8,w
   933  042D  0084               	movwf	4
   934  042E  120A  118A  2003  120A  118A  	fcall	stringdir
   935  0433  3A00               	xorlw	0
   936  0434  1903               	btfsc	3,2
   937  0435  2C84               	goto	l1591
   938                           
   939                           ;lcd.c: 459: {
   940                           ;lcd.c: 464: LCD_GoToLine(v_lineNumber_u8);
   941  0436  0821               	movf	LCD_ScrollMessage@v_lineNumber_u8,w
   942  0437  120A  118A  21C1  120A  118A  	fcall	_LCD_GoToLine
   943                           
   944                           ;lcd.c: 466: for(j=0;(j<LCDConfig.v_MaxSupportedChars_U8) && (ptr_msgPointer_u8[i+j]);j+
      +                          +)
   945  043C  1283               	bcf	3,5	;RP0=0, select bank0
   946  043D  1303               	bcf	3,6	;RP1=0, select bank0
   947  043E  01A3               	clrf	LCD_ScrollMessage@j
   948  043F                     l1575:	
   949  043F  0837               	movf	_LCDConfig+1,w
   950  0440  0223               	subwf	LCD_ScrollMessage@j,w
   951  0441  1803               	skipnc
   952  0442  2C70               	goto	l1583
   953  0443  0823               	movf	LCD_ScrollMessage@j,w
   954  0444  0722               	addwf	LCD_ScrollMessage@i,w
   955  0445  077D               	addwf	LCD_ScrollMessage@ptr_msgPointer_u8,w
   956  0446  0084               	movwf	4
   957  0447  120A  118A  2003  120A  118A  	fcall	stringdir
   958  044C  3A00               	xorlw	0
   959  044D  1903               	btfsc	3,2
   960  044E  2C70               	goto	l1583
   961                           
   962                           ;lcd.c: 467: {
   963                           ;lcd.c: 469: LCD_DisplayChar(ptr_msgPointer_u8[i+j]);
   964  044F  0823               	movf	LCD_ScrollMessage@j,w
   965  0450  0722               	addwf	LCD_ScrollMessage@i,w
   966  0451  077D               	addwf	LCD_ScrollMessage@ptr_msgPointer_u8,w
   967  0452  0084               	movwf	4
   968  0453  120A  118A  2003  120A  118A  	fcall	stringdir
   969  0458  120A  118A  21D6  120A  118A  	fcall	_LCD_DisplayChar
   970  045D  3001               	movlw	1
   971  045E  1283               	bcf	3,5	;RP0=0, select bank0
   972  045F  1303               	bcf	3,6	;RP1=0, select bank0
   973  0460  00A0               	movwf	??_LCD_ScrollMessage
   974  0461  0820               	movf	??_LCD_ScrollMessage,w
   975  0462  07A3               	addwf	LCD_ScrollMessage@j,f
   976  0463  2C3F               	goto	l1575
   977  0464                     l1579:	
   978                           ;lcd.c: 470: }
   979                           ;lcd.c: 473: while( j<LCDConfig.v_MaxSupportedChars_U8)
   980                           
   981                           
   982                           ;lcd.c: 474: {
   983                           ;lcd.c: 477: LCD_DisplayChar(' ');
   984  0464  3020               	movlw	32
   985  0465  120A  118A  21D6  120A  118A  	fcall	_LCD_DisplayChar
   986                           
   987                           ;lcd.c: 478: j++;
   988  046A  3001               	movlw	1
   989  046B  1283               	bcf	3,5	;RP0=0, select bank0
   990  046C  1303               	bcf	3,6	;RP1=0, select bank0
   991  046D  00A0               	movwf	??_LCD_ScrollMessage
   992  046E  0820               	movf	??_LCD_ScrollMessage,w
   993  046F  07A3               	addwf	LCD_ScrollMessage@j,f
   994  0470                     l1583:	
   995  0470  0837               	movf	_LCDConfig+1,w
   996  0471  0223               	subwf	LCD_ScrollMessage@j,w
   997  0472  1C03               	skipc
   998  0473  2C64               	goto	l1579
   999                           
  1000                           ;lcd.c: 479: }
  1001                           ;lcd.c: 481: DELAY_ms(200);
  1002  0474  30C8               	movlw	200
  1003  0475  00F2               	movwf	DELAY_ms@ms_count
  1004  0476  3000               	movlw	0
  1005  0477  00F3               	movwf	DELAY_ms@ms_count+1
  1006  0478  120A  118A  2199  120A  118A  	fcall	_DELAY_ms
  1007  047D  3001               	movlw	1
  1008  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1009  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0480  00A0               	movwf	??_LCD_ScrollMessage
  1011  0481  0820               	movf	??_LCD_ScrollMessage,w
  1012  0482  07A2               	addwf	LCD_ScrollMessage@i,f
  1013  0483  2C2B               	goto	l1589
  1014  0484                     l1591:	
  1015                           
  1016                           ;lcd.c: 482: }
  1017                           ;lcd.c: 483: LCD_CmdWrite(0x0Eu);
  1018  0484  300E               	movlw	14
  1019  0485  120A  118A  2250   	fcall	_LCD_CmdWrite
  1020  0488  0008               	return
  1021  0489                     __end_of_LCD_ScrollMessage:	
  1022                           
  1023                           	psect	text3
  1024  01D6                     __ptext3:	
  1025 ;; *************** function _LCD_DisplayChar *****************
  1026 ;; Defined at:
  1027 ;;		line 386 in file "../00-libfiles/lcd.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;  v_lcdData_u8    1    wreg     unsigned char 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  v_lcdData_u8    1   12[COMMON] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1041 ;;      Params:         0       0       0       0       0
  1042 ;;      Locals:         1       0       0       0       0
  1043 ;;      Temps:          1       0       0       0       0
  1044 ;;      Totals:         2       0       0       0       0
  1045 ;;Total ram usage:        2 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    5
  1048 ;; This function calls:
  1049 ;;		_LCD_GoToNextLine
  1050 ;;		_lcd_DataWrite
  1051 ;; This function is called by:
  1052 ;;		_LCD_ScrollMessage
  1053 ;;		_LCD_DisplayString
  1054 ;;		_LCD_DisplayNumber
  1055 ;;		_LCD_Printf
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           
  1060                           ;psect for function _LCD_DisplayChar
  1061  01D6                     _LCD_DisplayChar:	
  1062                           
  1063                           ;incstack = 0
  1064                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1065                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  1066  01D6  00FC               	movwf	LCD_DisplayChar@v_lcdData_u8
  1067                           
  1068                           ;lcd.c: 388: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  1069  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1070  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1071  01D9  0837               	movf	_LCDConfig+1,w
  1072  01DA  0244               	subwf	_v_LcdTrackCursorPos_U8,w
  1073  01DB  1803               	skipnc
  1074  01DC  29E1               	goto	l1501
  1075  01DD  300A               	movlw	10
  1076  01DE  067C               	xorwf	LCD_DisplayChar@v_lcdData_u8,w
  1077  01DF  1D03               	btfss	3,2
  1078  01E0  29E6               	goto	l1503
  1079  01E1                     l1501:	
  1080                           
  1081                           ;lcd.c: 389: {
  1082                           ;lcd.c: 392: LCD_GoToNextLine();
  1083  01E1  120A  118A  21AD  120A  118A  	fcall	_LCD_GoToNextLine
  1084  01E6                     l1503:	
  1085                           
  1086                           ;lcd.c: 393: }
  1087                           ;lcd.c: 394: if(v_lcdData_u8!='\n')
  1088  01E6  300A               	movlw	10
  1089  01E7  067C               	xorwf	LCD_DisplayChar@v_lcdData_u8,w
  1090  01E8  1903               	btfsc	3,2
  1091  01E9  0008               	return
  1092                           
  1093                           ;lcd.c: 395: {
  1094                           ;lcd.c: 397: lcd_DataWrite(v_lcdData_u8);
  1095  01EA  087C               	movf	LCD_DisplayChar@v_lcdData_u8,w
  1096  01EB  120A  118A  2285   	fcall	_lcd_DataWrite
  1097                           
  1098                           ;lcd.c: 398: v_LcdTrackCursorPos_U8++;
  1099  01EE  3001               	movlw	1
  1100  01EF  00FB               	movwf	??_LCD_DisplayChar
  1101  01F0  087B               	movf	??_LCD_DisplayChar,w
  1102  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1103  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1104  01F3  07C4               	addwf	_v_LcdTrackCursorPos_U8,f
  1105  01F4  0008               	return
  1106  01F5                     __end_of_LCD_DisplayChar:	
  1107                           
  1108                           	psect	text4
  1109  0285                     __ptext4:	
  1110 ;; *************** function _lcd_DataWrite *****************
  1111 ;; Defined at:
  1112 ;;		line 819 in file "../00-libfiles/lcd.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  dataByte        1    wreg     unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  dataByte        1    9[COMMON] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1126 ;;      Params:         0       0       0       0       0
  1127 ;;      Locals:         1       0       0       0       0
  1128 ;;      Temps:          2       0       0       0       0
  1129 ;;      Totals:         3       0       0       0       0
  1130 ;;Total ram usage:        3 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    3
  1133 ;; This function calls:
  1134 ;;		_lcd_BusyCheck
  1135 ;;		_lcd_SendDataSignals
  1136 ;;		_lcd_SendHigherNibble
  1137 ;;		_lcd_SendLowerNibble
  1138 ;; This function is called by:
  1139 ;;		_LCD_DisplayChar
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           
  1144                           ;psect for function _lcd_DataWrite
  1145  0285                     _lcd_DataWrite:	
  1146                           
  1147                           ;incstack = 0
  1148                           ; Regs used in _lcd_DataWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1149                           ;lcd_DataWrite@dataByte stored from wreg
  1150  0285  00F9               	movwf	lcd_DataWrite@dataByte
  1151                           
  1152                           ;lcd.c: 821: lcd_BusyCheck();
  1153  0286  120A  118A  24FE  120A  118A  	fcall	_lcd_BusyCheck
  1154                           
  1155                           ;lcd.c: 822: if(LCDConfig.v_LcdMode_U8 == 8u)
  1156  028B  3008               	movlw	8
  1157  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1158  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1159  028E  0638               	xorwf	_LCDConfig+2,w
  1160  028F  1D03               	btfss	3,2
  1161  0290  2A98               	goto	l1469
  1162                           
  1163                           ;lcd.c: 823: {
  1164                           ;lcd.c: 824: lcd_SendLowerNibble(dataByte);
  1165  0291  0879               	movf	lcd_DataWrite@dataByte,w
  1166  0292  120A  118A  22FA  120A  118A  	fcall	_lcd_SendLowerNibble
  1167                           
  1168                           ;lcd.c: 825: }
  1169  0297  2AB0               	goto	l1473
  1170  0298                     l1469:	
  1171                           
  1172                           ;lcd.c: 826: else
  1173                           ;lcd.c: 827: {
  1174                           ;lcd.c: 828: lcd_SendHigherNibble(dataByte);
  1175  0298  0879               	movf	lcd_DataWrite@dataByte,w
  1176  0299  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1177                           
  1178                           ;lcd.c: 829: lcd_SendDataSignals();
  1179  029E  120A  118A  2222  120A  118A  	fcall	_lcd_SendDataSignals
  1180                           
  1181                           ;lcd.c: 830: dataByte = dataByte << 4;
  1182  02A3  0879               	movf	lcd_DataWrite@dataByte,w
  1183  02A4  00F7               	movwf	??_lcd_DataWrite
  1184  02A5  3003               	movlw	3
  1185  02A6                     u1905:	
  1186  02A6  1003               	clrc
  1187  02A7  0DF7               	rlf	??_lcd_DataWrite,f
  1188  02A8  3EFF               	addlw	-1
  1189  02A9  1D03               	skipz
  1190  02AA  2AA6               	goto	u1905
  1191  02AB  1003               	clrc
  1192  02AC  0D77               	rlf	??_lcd_DataWrite,w
  1193  02AD  00F8               	movwf	??_lcd_DataWrite+1
  1194  02AE  0878               	movf	??_lcd_DataWrite+1,w
  1195  02AF  00F9               	movwf	lcd_DataWrite@dataByte
  1196  02B0                     l1473:	
  1197                           
  1198                           ;lcd.c: 831: }
  1199                           ;lcd.c: 833: lcd_SendHigherNibble(dataByte);
  1200  02B0  0879               	movf	lcd_DataWrite@dataByte,w
  1201  02B1  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1202                           
  1203                           ;lcd.c: 834: lcd_SendDataSignals();
  1204  02B6  120A  118A  2222   	fcall	_lcd_SendDataSignals
  1205  02B9  0008               	return
  1206  02BA                     __end_of_lcd_DataWrite:	
  1207                           
  1208                           	psect	text5
  1209  0222                     __ptext5:	
  1210 ;; *************** function _lcd_SendDataSignals *****************
  1211 ;; Defined at:
  1212 ;;		line 995 in file "../00-libfiles/lcd.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;		None
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;		None
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1226 ;;      Params:         0       0       0       0       0
  1227 ;;      Locals:         0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0
  1229 ;;      Totals:         0       0       0       0       0
  1230 ;;Total ram usage:        0 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    1
  1233 ;; This function calls:
  1234 ;;		_DELAY_us
  1235 ;;		_GPIO_PinWrite
  1236 ;; This function is called by:
  1237 ;;		_lcd_DataWrite
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function _lcd_SendDataSignals
  1243  0222                     _lcd_SendDataSignals:	
  1244                           
  1245                           ;lcd.c: 997: GPIO_PinWrite(LCDConfig.RS,1);
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in _lcd_SendDataSignals: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1249  0222  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  1250  0223  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  1251  0224  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0225  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0226  0839               	movf	_LCDConfig+3,w
  1254  0227  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1255                           
  1256                           ;lcd.c: 998: GPIO_PinWrite(LCDConfig.RW,0);
  1257  022C  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  1258  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1259  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1260  022F  083A               	movf	_LCDConfig+4,w
  1261  0230  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1262                           
  1263                           ;lcd.c: 999: GPIO_PinWrite(LCDConfig.EN,1);
  1264  0235  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  1265  0236  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  1266  0237  1283               	bcf	3,5	;RP0=0, select bank0
  1267  0238  1303               	bcf	3,6	;RP1=0, select bank0
  1268  0239  083B               	movf	_LCDConfig+5,w
  1269  023A  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1270                           
  1271                           ;lcd.c: 1000: DELAY_us(10);
  1272  023F  300A               	movlw	10
  1273  0240  00F0               	movwf	DELAY_us@us_count
  1274  0241  3000               	movlw	0
  1275  0242  00F1               	movwf	DELAY_us@us_count+1
  1276  0243  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  1277                           
  1278                           ;lcd.c: 1001: GPIO_PinWrite(LCDConfig.EN,0);
  1279  0248  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  1280  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1281  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1282  024B  083B               	movf	_LCDConfig+5,w
  1283  024C  120A  118A  2704   	fcall	_GPIO_PinWrite
  1284  024F  0008               	return
  1285  0250                     __end_of_lcd_SendDataSignals:	
  1286                           
  1287                           	psect	text6
  1288  01AD                     __ptext6:	
  1289 ;; *************** function _LCD_GoToNextLine *****************
  1290 ;; Defined at:
  1291 ;;		line 286 in file "../00-libfiles/lcd.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1305 ;;      Params:         0       0       0       0       0
  1306 ;;      Locals:         0       0       0       0       0
  1307 ;;      Temps:          1       0       0       0       0
  1308 ;;      Totals:         1       0       0       0       0
  1309 ;;Total ram usage:        1 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		_LCD_CmdWrite
  1314 ;; This function is called by:
  1315 ;;		_LCD_DisplayChar
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           
  1320                           ;psect for function _LCD_GoToNextLine
  1321  01AD                     _LCD_GoToNextLine:	
  1322                           
  1323                           ;lcd.c: 290: v_LcdTrackLineNum_U8++;
  1324                           
  1325                           ;incstack = 0
  1326                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1327  01AD  3001               	movlw	1
  1328  01AE  00FA               	movwf	??_LCD_GoToNextLine
  1329  01AF  087A               	movf	??_LCD_GoToNextLine,w
  1330  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1331  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  1332  01B2  07C5               	addwf	_v_LcdTrackLineNum_U8,f
  1333                           
  1334                           ;lcd.c: 291: v_LcdTrackCursorPos_U8 = 0x00;
  1335  01B3  01C4               	clrf	_v_LcdTrackCursorPos_U8
  1336                           
  1337                           ;lcd.c: 292: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  1338  01B4  0836               	movf	_LCDConfig,w
  1339  01B5  0245               	subwf	_v_LcdTrackLineNum_U8,w
  1340  01B6  1803               	btfsc	3,0
  1341                           
  1342                           ;lcd.c: 293: v_LcdTrackLineNum_U8 = 0x00;
  1343  01B7  01C5               	clrf	_v_LcdTrackLineNum_U8
  1344                           
  1345                           ;lcd.c: 294: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  1346  01B8  0845               	movf	_v_LcdTrackLineNum_U8,w
  1347  01B9  3E46               	addlw	(low (_ARR_LcdLineNumAddress_U8| 0))& (0+255)
  1348  01BA  0084               	movwf	4
  1349  01BB  1383               	bcf	3,7	;select IRP bank0
  1350  01BC  0800               	movf	0,w
  1351  01BD  120A  118A  2250   	fcall	_LCD_CmdWrite
  1352  01C0  0008               	return
  1353  01C1                     __end_of_LCD_GoToNextLine:	
  1354                           
  1355                           	psect	text7
  1356  033A                     __ptext7:	
  1357 ;; *************** function _LCD_Init *****************
  1358 ;; Defined at:
  1359 ;;		line 192 in file "../00-libfiles/lcd.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  1362 ;;  v_MaxCharsPe    1   12[COMMON] unsigned char 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  v_lcdNoOfLin    1    0[BANK0 ] unsigned char 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1374 ;;      Params:         1       0       0       0       0
  1375 ;;      Locals:         0       1       0       0       0
  1376 ;;      Temps:          1       0       0       0       0
  1377 ;;      Totals:         2       1       0       0       0
  1378 ;;Total ram usage:        3 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    6
  1381 ;; This function calls:
  1382 ;;		_DELAY_ms
  1383 ;;		_LCD_Clear
  1384 ;;		_LCD_CmdWrite
  1385 ;;		_lcd_Reset
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           
  1392                           ;psect for function _LCD_Init
  1393  033A                     _LCD_Init:	
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1397                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  1398  033A  1283               	bcf	3,5	;RP0=0, select bank0
  1399  033B  1303               	bcf	3,6	;RP1=0, select bank0
  1400  033C  00A0               	movwf	LCD_Init@v_lcdNoOfLines_u8
  1401                           
  1402                           ;lcd.c: 196: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  1403  033D  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  1404  033E  00FD               	movwf	??_LCD_Init
  1405  033F  087D               	movf	??_LCD_Init,w
  1406  0340  00B7               	movwf	_LCDConfig+1
  1407                           
  1408                           ;lcd.c: 197: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  1409  0341  0820               	movf	LCD_Init@v_lcdNoOfLines_u8,w
  1410  0342  00FD               	movwf	??_LCD_Init
  1411  0343  087D               	movf	??_LCD_Init,w
  1412  0344  00B6               	movwf	_LCDConfig
  1413                           
  1414                           ;lcd.c: 198: if(v_lcdNoOfLines_u8 > 0x02)
  1415  0345  3003               	movlw	3
  1416  0346  0220               	subwf	LCD_Init@v_lcdNoOfLines_u8,w
  1417  0347  1C03               	skipc
  1418  0348  2B55               	goto	l1549
  1419                           
  1420                           ;lcd.c: 199: {
  1421                           ;lcd.c: 200: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  1422  0349  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  1423  034A  390F               	andlw	15
  1424  034B  3E90               	addlw	144
  1425  034C  00FD               	movwf	??_LCD_Init
  1426  034D  087D               	movf	??_LCD_Init,w
  1427  034E  00C8               	movwf	_ARR_LcdLineNumAddress_U8+2
  1428                           
  1429                           ;lcd.c: 201: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  1430  034F  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  1431  0350  390F               	andlw	15
  1432  0351  3ED0               	addlw	208
  1433  0352  00FD               	movwf	??_LCD_Init
  1434  0353  087D               	movf	??_LCD_Init,w
  1435  0354  00C9               	movwf	_ARR_LcdLineNumAddress_U8+3
  1436  0355                     l1549:	
  1437                           
  1438                           ;lcd.c: 202: }
  1439                           ;lcd.c: 204: DELAY_ms(100);
  1440  0355  3064               	movlw	100
  1441  0356  00F2               	movwf	DELAY_ms@ms_count
  1442  0357  3000               	movlw	0
  1443  0358  00F3               	movwf	DELAY_ms@ms_count+1
  1444  0359  120A  118A  2199  120A  118A  	fcall	_DELAY_ms
  1445                           
  1446                           ;lcd.c: 206: if(LCDConfig.v_LcdMode_U8 == 8u)
  1447  035E  3008               	movlw	8
  1448  035F  1283               	bcf	3,5	;RP0=0, select bank0
  1449  0360  1303               	bcf	3,6	;RP1=0, select bank0
  1450  0361  0638               	xorwf	_LCDConfig+2,w
  1451  0362  1D03               	btfss	3,2
  1452  0363  2B66               	goto	l1555
  1453                           
  1454                           ;lcd.c: 207: {
  1455                           ;lcd.c: 208: LCD_CmdWrite(0x38u);
  1456  0364  3038               	movlw	56
  1457  0365  2B72               	goto	L1
  1458  0366                     l1555:	
  1459                           ;lcd.c: 209: }
  1460                           
  1461                           
  1462                           ;lcd.c: 210: else if(LCDConfig.v_LcdMode_U8 == 4u)
  1463  0366  3004               	movlw	4
  1464  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1465  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0369  0638               	xorwf	_LCDConfig+2,w
  1467  036A  1D03               	btfss	3,2
  1468  036B  2B77               	goto	l168
  1469                           
  1470                           ;lcd.c: 211: {
  1471                           ;lcd.c: 212: lcd_Reset();
  1472  036C  120A  118A  23CC  120A  118A  	fcall	_lcd_Reset
  1473                           
  1474                           ;lcd.c: 213: LCD_CmdWrite(0x28u);
  1475  0371  3028               	movlw	40
  1476  0372                     L1:	
  1477  0372  120A  118A  2250  120A  118A  	fcall	_LCD_CmdWrite
  1478  0377                     l168:	
  1479                           
  1480                           ;lcd.c: 214: }
  1481                           ;lcd.c: 216: LCD_CmdWrite(0x0Eu);
  1482  0377  300E               	movlw	14
  1483  0378  120A  118A  2250  120A  118A  	fcall	_LCD_CmdWrite
  1484                           
  1485                           ;lcd.c: 217: LCD_Clear();
  1486  037D  120A  118A  218E   	fcall	_LCD_Clear
  1487  0380  0008               	return
  1488  0381                     __end_of_LCD_Init:	
  1489                           
  1490                           	psect	text8
  1491  03CC                     __ptext8:	
  1492 ;; *************** function _lcd_Reset *****************
  1493 ;; Defined at:
  1494 ;;		line 906 in file "../00-libfiles/lcd.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1508 ;;      Params:         0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    2
  1515 ;; This function calls:
  1516 ;;		_DELAY_ms
  1517 ;;		_DELAY_us
  1518 ;;		_lcd_SendCmdSignals
  1519 ;;		_lcd_SendHigherNibble
  1520 ;; This function is called by:
  1521 ;;		_LCD_Init
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           
  1526                           ;psect for function _lcd_Reset
  1527  03CC                     _lcd_Reset:	
  1528                           
  1529                           ;lcd.c: 909: lcd_SendHigherNibble(0x30);
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _lcd_Reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1533  03CC  3030               	movlw	48
  1534  03CD  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1535                           
  1536                           ;lcd.c: 910: lcd_SendCmdSignals();
  1537  03D2  120A  118A  21F5  120A  118A  	fcall	_lcd_SendCmdSignals
  1538                           
  1539                           ;lcd.c: 911: DELAY_ms(100);
  1540  03D7  3064               	movlw	100
  1541  03D8  00F2               	movwf	DELAY_ms@ms_count
  1542  03D9  3000               	movlw	0
  1543  03DA  00F3               	movwf	DELAY_ms@ms_count+1
  1544  03DB  120A  118A  2199  120A  118A  	fcall	_DELAY_ms
  1545                           
  1546                           ;lcd.c: 912: lcd_SendHigherNibble(0x30);
  1547  03E0  3030               	movlw	48
  1548  03E1  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1549                           
  1550                           ;lcd.c: 913: lcd_SendCmdSignals();
  1551  03E6  120A  118A  21F5  120A  118A  	fcall	_lcd_SendCmdSignals
  1552                           
  1553                           ;lcd.c: 914: DELAY_us(200);
  1554  03EB  30C8               	movlw	200
  1555  03EC  00F0               	movwf	DELAY_us@us_count
  1556  03ED  3000               	movlw	0
  1557  03EE  00F1               	movwf	DELAY_us@us_count+1
  1558  03EF  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  1559                           
  1560                           ;lcd.c: 915: lcd_SendHigherNibble(0x30);
  1561  03F4  3030               	movlw	48
  1562  03F5  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1563                           
  1564                           ;lcd.c: 916: lcd_SendCmdSignals();
  1565  03FA  120A  118A  21F5  120A  118A  	fcall	_lcd_SendCmdSignals
  1566                           
  1567                           ;lcd.c: 917: DELAY_us(200);
  1568  03FF  30C8               	movlw	200
  1569  0400  00F0               	movwf	DELAY_us@us_count
  1570  0401  3000               	movlw	0
  1571  0402  00F1               	movwf	DELAY_us@us_count+1
  1572  0403  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  1573                           
  1574                           ;lcd.c: 918: lcd_SendHigherNibble(0x20);
  1575  0408  3020               	movlw	32
  1576  0409  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1577                           
  1578                           ;lcd.c: 919: lcd_SendCmdSignals();
  1579  040E  120A  118A  21F5  120A  118A  	fcall	_lcd_SendCmdSignals
  1580                           
  1581                           ;lcd.c: 920: DELAY_us(200);
  1582  0413  30C8               	movlw	200
  1583  0414  00F0               	movwf	DELAY_us@us_count
  1584  0415  3000               	movlw	0
  1585  0416  00F1               	movwf	DELAY_us@us_count+1
  1586  0417  120A  118A  2183   	fcall	_DELAY_us
  1587  041A  0008               	return
  1588  041B                     __end_of_lcd_Reset:	
  1589                           
  1590                           	psect	text9
  1591  018E                     __ptext9:	
  1592 ;; *************** function _LCD_Clear *****************
  1593 ;; Defined at:
  1594 ;;		line 231 in file "../00-libfiles/lcd.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1608 ;;      Params:         0       0       0       0       0
  1609 ;;      Locals:         0       0       0       0       0
  1610 ;;      Temps:          0       0       0       0       0
  1611 ;;      Totals:         0       0       0       0       0
  1612 ;;Total ram usage:        0 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    5
  1615 ;; This function calls:
  1616 ;;		_LCD_CmdWrite
  1617 ;;		_LCD_GoToLine
  1618 ;; This function is called by:
  1619 ;;		_LCD_Init
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function _LCD_Clear
  1625  018E                     _LCD_Clear:	
  1626                           
  1627                           ;lcd.c: 233: LCD_CmdWrite(0x01u);
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1631  018E  3001               	movlw	1
  1632  018F  120A  118A  2250  120A  118A  	fcall	_LCD_CmdWrite
  1633                           
  1634                           ;lcd.c: 234: LCD_GoToLine(0x00);
  1635  0194  3000               	movlw	0
  1636  0195  120A  118A  21C1   	fcall	_LCD_GoToLine
  1637  0198  0008               	return
  1638  0199                     __end_of_LCD_Clear:	
  1639                           
  1640                           	psect	text10
  1641  01C1                     __ptext10:	
  1642 ;; *************** function _LCD_GoToLine *****************
  1643 ;; Defined at:
  1644 ;;		line 259 in file "../00-libfiles/lcd.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  v_lineNumber    1    wreg     unsigned char 
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  v_lineNumber    1   11[COMMON] unsigned char 
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  1    wreg      void 
  1651 ;; Registers used:
  1652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1658 ;;      Params:         0       0       0       0       0
  1659 ;;      Locals:         1       0       0       0       0
  1660 ;;      Temps:          1       0       0       0       0
  1661 ;;      Totals:         2       0       0       0       0
  1662 ;;Total ram usage:        2 bytes
  1663 ;; Hardware stack levels used:    1
  1664 ;; Hardware stack levels required when called:    4
  1665 ;; This function calls:
  1666 ;;		_LCD_CmdWrite
  1667 ;; This function is called by:
  1668 ;;		_LCD_Clear
  1669 ;;		_LCD_ScrollMessage
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function _LCD_GoToLine
  1675  01C1                     _LCD_GoToLine:	
  1676                           
  1677                           ;incstack = 0
  1678                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1679                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  1680  01C1  00FB               	movwf	LCD_GoToLine@v_lineNumber_u8
  1681                           
  1682                           ;lcd.c: 261: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  1683  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1684  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1685  01C4  0836               	movf	_LCDConfig,w
  1686  01C5  027B               	subwf	LCD_GoToLine@v_lineNumber_u8,w
  1687  01C6  1803               	skipnc
  1688  01C7  0008               	return
  1689                           
  1690                           ;lcd.c: 262: {
  1691                           ;lcd.c: 265: v_LcdTrackCursorPos_U8 = 0x00;
  1692  01C8  01C4               	clrf	_v_LcdTrackCursorPos_U8
  1693                           
  1694                           ;lcd.c: 266: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  1695  01C9  087B               	movf	LCD_GoToLine@v_lineNumber_u8,w
  1696  01CA  00FA               	movwf	??_LCD_GoToLine
  1697  01CB  087A               	movf	??_LCD_GoToLine,w
  1698  01CC  00C5               	movwf	_v_LcdTrackLineNum_U8
  1699                           
  1700                           ;lcd.c: 267: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  1701  01CD  087B               	movf	LCD_GoToLine@v_lineNumber_u8,w
  1702  01CE  3E46               	addlw	(low (_ARR_LcdLineNumAddress_U8| 0))& (0+255)
  1703  01CF  0084               	movwf	4
  1704  01D0  1383               	bcf	3,7	;select IRP bank0
  1705  01D1  0800               	movf	0,w
  1706  01D2  120A  118A  2250   	fcall	_LCD_CmdWrite
  1707  01D5  0008               	return
  1708  01D6                     __end_of_LCD_GoToLine:	
  1709                           
  1710                           	psect	text11
  1711  0250                     __ptext11:	
  1712 ;; *************** function _LCD_CmdWrite *****************
  1713 ;; Defined at:
  1714 ;;		line 352 in file "../00-libfiles/lcd.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  v_lcdCmd_u8     1    9[COMMON] unsigned char 
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1728 ;;      Params:         0       0       0       0       0
  1729 ;;      Locals:         1       0       0       0       0
  1730 ;;      Temps:          2       0       0       0       0
  1731 ;;      Totals:         3       0       0       0       0
  1732 ;;Total ram usage:        3 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    3
  1735 ;; This function calls:
  1736 ;;		_lcd_BusyCheck
  1737 ;;		_lcd_SendCmdSignals
  1738 ;;		_lcd_SendHigherNibble
  1739 ;;		_lcd_SendLowerNibble
  1740 ;; This function is called by:
  1741 ;;		_LCD_Init
  1742 ;;		_LCD_Clear
  1743 ;;		_LCD_GoToLine
  1744 ;;		_LCD_GoToNextLine
  1745 ;;		_LCD_ScrollMessage
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           
  1750                           ;psect for function _LCD_CmdWrite
  1751  0250                     _LCD_CmdWrite:	
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _LCD_CmdWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1755                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  1756  0250  00F9               	movwf	LCD_CmdWrite@v_lcdCmd_u8
  1757                           
  1758                           ;lcd.c: 354: lcd_BusyCheck();
  1759  0251  120A  118A  24FE  120A  118A  	fcall	_lcd_BusyCheck
  1760                           
  1761                           ;lcd.c: 355: if(LCDConfig.v_LcdMode_U8 == 8u)
  1762  0256  3008               	movlw	8
  1763  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1764  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1765  0259  0638               	xorwf	_LCDConfig+2,w
  1766  025A  1D03               	btfss	3,2
  1767  025B  2A63               	goto	l1431
  1768                           
  1769                           ;lcd.c: 356: {
  1770                           ;lcd.c: 357: lcd_SendLowerNibble(v_lcdCmd_u8);
  1771  025C  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  1772  025D  120A  118A  22FA  120A  118A  	fcall	_lcd_SendLowerNibble
  1773                           
  1774                           ;lcd.c: 358: }
  1775  0262  2A7B               	goto	l1435
  1776  0263                     l1431:	
  1777                           
  1778                           ;lcd.c: 359: else
  1779                           ;lcd.c: 360: {
  1780                           ;lcd.c: 361: lcd_SendHigherNibble(v_lcdCmd_u8);
  1781  0263  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  1782  0264  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1783                           
  1784                           ;lcd.c: 362: lcd_SendCmdSignals();
  1785  0269  120A  118A  21F5  120A  118A  	fcall	_lcd_SendCmdSignals
  1786                           
  1787                           ;lcd.c: 363: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  1788  026E  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  1789  026F  00F7               	movwf	??_LCD_CmdWrite
  1790  0270  3003               	movlw	3
  1791  0271                     u1865:	
  1792  0271  1003               	clrc
  1793  0272  0DF7               	rlf	??_LCD_CmdWrite,f
  1794  0273  3EFF               	addlw	-1
  1795  0274  1D03               	skipz
  1796  0275  2A71               	goto	u1865
  1797  0276  1003               	clrc
  1798  0277  0D77               	rlf	??_LCD_CmdWrite,w
  1799  0278  00F8               	movwf	??_LCD_CmdWrite+1
  1800  0279  0878               	movf	??_LCD_CmdWrite+1,w
  1801  027A  00F9               	movwf	LCD_CmdWrite@v_lcdCmd_u8
  1802  027B                     l1435:	
  1803                           
  1804                           ;lcd.c: 364: }
  1805                           ;lcd.c: 366: lcd_SendHigherNibble(v_lcdCmd_u8);
  1806  027B  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  1807  027C  120A  118A  22BA  120A  118A  	fcall	_lcd_SendHigherNibble
  1808                           
  1809                           ;lcd.c: 367: lcd_SendCmdSignals();
  1810  0281  120A  118A  21F5   	fcall	_lcd_SendCmdSignals
  1811  0284  0008               	return
  1812  0285                     __end_of_LCD_CmdWrite:	
  1813                           
  1814                           	psect	text12
  1815  02FA                     __ptext12:	
  1816 ;; *************** function _lcd_SendLowerNibble *****************
  1817 ;; Defined at:
  1818 ;;		line 955 in file "../00-libfiles/lcd.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  dataByte        1    wreg     unsigned char 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  dataByte        1    6[COMMON] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1832 ;;      Params:         0       0       0       0       0
  1833 ;;      Locals:         1       0       0       0       0
  1834 ;;      Temps:          1       0       0       0       0
  1835 ;;      Totals:         2       0       0       0       0
  1836 ;;Total ram usage:        2 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    1
  1839 ;; This function calls:
  1840 ;;		_GPIO_PinWrite
  1841 ;; This function is called by:
  1842 ;;		_LCD_CmdWrite
  1843 ;;		_lcd_DataWrite
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           
  1848                           ;psect for function _lcd_SendLowerNibble
  1849  02FA                     _lcd_SendLowerNibble:	
  1850                           
  1851                           ;incstack = 0
  1852                           ; Regs used in _lcd_SendLowerNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1853                           ;lcd_SendLowerNibble@dataByte stored from wreg
  1854  02FA  00F6               	movwf	lcd_SendLowerNibble@dataByte
  1855                           
  1856                           ;lcd.c: 957: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&((1<<(0))))!=0u));
  1857  02FB  1C76               	btfss	lcd_SendLowerNibble@dataByte,0
  1858  02FC  2AFF               	goto	u1690
  1859  02FD  3001               	movlw	1
  1860  02FE  2B00               	goto	u1700
  1861  02FF                     u1690:	
  1862  02FF  3000               	movlw	0
  1863  0300                     u1700:	
  1864  0300  00F5               	movwf	??_lcd_SendLowerNibble
  1865  0301  0875               	movf	??_lcd_SendLowerNibble,w
  1866  0302  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  1867  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0304  1303               	bcf	3,6	;RP1=0, select bank0
  1869  0305  083C               	movf	_LCDConfig+6,w
  1870  0306  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1871                           
  1872                           ;lcd.c: 958: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&((1<<(1))))!=0u));
  1873  030B  1CF6               	btfss	lcd_SendLowerNibble@dataByte,1
  1874  030C  2B0F               	goto	u1710
  1875  030D  3001               	movlw	1
  1876  030E  2B10               	goto	u1720
  1877  030F                     u1710:	
  1878  030F  3000               	movlw	0
  1879  0310                     u1720:	
  1880  0310  00F5               	movwf	??_lcd_SendLowerNibble
  1881  0311  0875               	movf	??_lcd_SendLowerNibble,w
  1882  0312  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  1883  0313  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0314  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0315  083D               	movf	_LCDConfig+7,w
  1886  0316  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1887                           
  1888                           ;lcd.c: 959: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&((1<<(2))))!=0u));
  1889  031B  1D76               	btfss	lcd_SendLowerNibble@dataByte,2
  1890  031C  2B1F               	goto	u1730
  1891  031D  3001               	movlw	1
  1892  031E  2B20               	goto	u1740
  1893  031F                     u1730:	
  1894  031F  3000               	movlw	0
  1895  0320                     u1740:	
  1896  0320  00F5               	movwf	??_lcd_SendLowerNibble
  1897  0321  0875               	movf	??_lcd_SendLowerNibble,w
  1898  0322  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  1899  0323  1283               	bcf	3,5	;RP0=0, select bank0
  1900  0324  1303               	bcf	3,6	;RP1=0, select bank0
  1901  0325  083E               	movf	_LCDConfig+8,w
  1902  0326  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1903                           
  1904                           ;lcd.c: 960: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&((1<<(3))))!=0u));
  1905  032B  1DF6               	btfss	lcd_SendLowerNibble@dataByte,3
  1906  032C  2B2F               	goto	u1750
  1907  032D  3001               	movlw	1
  1908  032E  2B30               	goto	u1760
  1909  032F                     u1750:	
  1910  032F  3000               	movlw	0
  1911  0330                     u1760:	
  1912  0330  00F5               	movwf	??_lcd_SendLowerNibble
  1913  0331  0875               	movf	??_lcd_SendLowerNibble,w
  1914  0332  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  1915  0333  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0334  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0335  083F               	movf	_LCDConfig+9,w
  1918  0336  120A  118A  2704   	fcall	_GPIO_PinWrite
  1919  0339  0008               	return
  1920  033A                     __end_of_lcd_SendLowerNibble:	
  1921                           
  1922                           	psect	text13
  1923  02BA                     __ptext13:	
  1924 ;; *************** function _lcd_SendHigherNibble *****************
  1925 ;; Defined at:
  1926 ;;		line 936 in file "../00-libfiles/lcd.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  dataByte        1    wreg     unsigned char 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  dataByte        1    6[COMMON] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         0       0       0       0       0
  1941 ;;      Locals:         1       0       0       0       0
  1942 ;;      Temps:          1       0       0       0       0
  1943 ;;      Totals:         2       0       0       0       0
  1944 ;;Total ram usage:        2 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    1
  1947 ;; This function calls:
  1948 ;;		_GPIO_PinWrite
  1949 ;; This function is called by:
  1950 ;;		_LCD_CmdWrite
  1951 ;;		_lcd_DataWrite
  1952 ;;		_lcd_Reset
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           
  1957                           ;psect for function _lcd_SendHigherNibble
  1958  02BA                     _lcd_SendHigherNibble:	
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _lcd_SendHigherNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1962                           ;lcd_SendHigherNibble@dataByte stored from wreg
  1963  02BA  00F6               	movwf	lcd_SendHigherNibble@dataByte
  1964                           
  1965                           ;lcd.c: 938: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&((1<<(4))))!=0u));
  1966  02BB  1E76               	btfss	lcd_SendHigherNibble@dataByte,4
  1967  02BC  2ABF               	goto	u1770
  1968  02BD  3001               	movlw	1
  1969  02BE  2AC0               	goto	u1780
  1970  02BF                     u1770:	
  1971  02BF  3000               	movlw	0
  1972  02C0                     u1780:	
  1973  02C0  00F5               	movwf	??_lcd_SendHigherNibble
  1974  02C1  0875               	movf	??_lcd_SendHigherNibble,w
  1975  02C2  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  1976  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  1977  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  1978  02C5  0840               	movf	_LCDConfig+10,w
  1979  02C6  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1980                           
  1981                           ;lcd.c: 939: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&((1<<(5))))!=0u));
  1982  02CB  1EF6               	btfss	lcd_SendHigherNibble@dataByte,5
  1983  02CC  2ACF               	goto	u1790
  1984  02CD  3001               	movlw	1
  1985  02CE  2AD0               	goto	u1800
  1986  02CF                     u1790:	
  1987  02CF  3000               	movlw	0
  1988  02D0                     u1800:	
  1989  02D0  00F5               	movwf	??_lcd_SendHigherNibble
  1990  02D1  0875               	movf	??_lcd_SendHigherNibble,w
  1991  02D2  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  1992  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1993  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1994  02D5  0841               	movf	_LCDConfig+11,w
  1995  02D6  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  1996                           
  1997                           ;lcd.c: 940: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&((1<<(6))))!=0u));
  1998  02DB  1F76               	btfss	lcd_SendHigherNibble@dataByte,6
  1999  02DC  2ADF               	goto	u1810
  2000  02DD  3001               	movlw	1
  2001  02DE  2AE0               	goto	u1820
  2002  02DF                     u1810:	
  2003  02DF  3000               	movlw	0
  2004  02E0                     u1820:	
  2005  02E0  00F5               	movwf	??_lcd_SendHigherNibble
  2006  02E1  0875               	movf	??_lcd_SendHigherNibble,w
  2007  02E2  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  2008  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2009  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2010  02E5  0842               	movf	_LCDConfig+12,w
  2011  02E6  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2012                           
  2013                           ;lcd.c: 941: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&((1<<(7))))!=0u));
  2014  02EB  1FF6               	btfss	lcd_SendHigherNibble@dataByte,7
  2015  02EC  2AEF               	goto	u1830
  2016  02ED  3001               	movlw	1
  2017  02EE  2AF0               	goto	u1840
  2018  02EF                     u1830:	
  2019  02EF  3000               	movlw	0
  2020  02F0                     u1840:	
  2021  02F0  00F5               	movwf	??_lcd_SendHigherNibble
  2022  02F1  0875               	movf	??_lcd_SendHigherNibble,w
  2023  02F2  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  2024  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2025  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2026  02F5  0843               	movf	_LCDConfig+13,w
  2027  02F6  120A  118A  2704   	fcall	_GPIO_PinWrite
  2028  02F9  0008               	return
  2029  02FA                     __end_of_lcd_SendHigherNibble:	
  2030                           
  2031                           	psect	text14
  2032  01F5                     __ptext14:	
  2033 ;; *************** function _lcd_SendCmdSignals *****************
  2034 ;; Defined at:
  2035 ;;		line 974 in file "../00-libfiles/lcd.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;		None
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2049 ;;      Params:         0       0       0       0       0
  2050 ;;      Locals:         0       0       0       0       0
  2051 ;;      Temps:          0       0       0       0       0
  2052 ;;      Totals:         0       0       0       0       0
  2053 ;;Total ram usage:        0 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    1
  2056 ;; This function calls:
  2057 ;;		_DELAY_us
  2058 ;;		_GPIO_PinWrite
  2059 ;; This function is called by:
  2060 ;;		_LCD_CmdWrite
  2061 ;;		_lcd_Reset
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function _lcd_SendCmdSignals
  2067  01F5                     _lcd_SendCmdSignals:	
  2068                           
  2069                           ;lcd.c: 976: GPIO_PinWrite(LCDConfig.RS,0);
  2070                           
  2071                           ;incstack = 0
  2072                           ; Regs used in _lcd_SendCmdSignals: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2073  01F5  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2074  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  2075  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  2076  01F8  0839               	movf	_LCDConfig+3,w
  2077  01F9  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2078                           
  2079                           ;lcd.c: 977: GPIO_PinWrite(LCDConfig.RW,0);
  2080  01FE  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2081  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0200  1303               	bcf	3,6	;RP1=0, select bank0
  2083  0201  083A               	movf	_LCDConfig+4,w
  2084  0202  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2085                           
  2086                           ;lcd.c: 978: GPIO_PinWrite(LCDConfig.EN,1);
  2087  0207  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2088  0208  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  2089  0209  1283               	bcf	3,5	;RP0=0, select bank0
  2090  020A  1303               	bcf	3,6	;RP1=0, select bank0
  2091  020B  083B               	movf	_LCDConfig+5,w
  2092  020C  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2093                           
  2094                           ;lcd.c: 979: DELAY_us(10);
  2095  0211  300A               	movlw	10
  2096  0212  00F0               	movwf	DELAY_us@us_count
  2097  0213  3000               	movlw	0
  2098  0214  00F1               	movwf	DELAY_us@us_count+1
  2099  0215  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  2100                           
  2101                           ;lcd.c: 980: GPIO_PinWrite(LCDConfig.EN,0);
  2102  021A  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2103  021B  1283               	bcf	3,5	;RP0=0, select bank0
  2104  021C  1303               	bcf	3,6	;RP1=0, select bank0
  2105  021D  083B               	movf	_LCDConfig+5,w
  2106  021E  120A  118A  2704   	fcall	_GPIO_PinWrite
  2107  0221  0008               	return
  2108  0222                     __end_of_lcd_SendCmdSignals:	
  2109                           
  2110                           	psect	text15
  2111  04FE                     __ptext15:	
  2112 ;; *************** function _lcd_BusyCheck *****************
  2113 ;; Defined at:
  2114 ;;		line 853 in file "../00-libfiles/lcd.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  busyflag        1    6[COMMON] unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2128 ;;      Params:         0       0       0       0       0
  2129 ;;      Locals:         1       0       0       0       0
  2130 ;;      Temps:          1       0       0       0       0
  2131 ;;      Totals:         2       0       0       0       0
  2132 ;;Total ram usage:        2 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    2
  2135 ;; This function calls:
  2136 ;;		_DELAY_ms
  2137 ;;		_DELAY_us
  2138 ;;		_GPIO_PinDirection
  2139 ;;		_GPIO_PinRead
  2140 ;;		_GPIO_PinWrite
  2141 ;; This function is called by:
  2142 ;;		_LCD_CmdWrite
  2143 ;;		_lcd_DataWrite
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           
  2148                           ;psect for function _lcd_BusyCheck
  2149  04FE                     _lcd_BusyCheck:	
  2150                           
  2151                           ;lcd.c: 855: uint8_t busyflag;
  2152                           ;lcd.c: 857: if(LCDConfig.RW != P_NC)
  2153                           
  2154                           ;incstack = 0
  2155                           ; Regs used in _lcd_BusyCheck: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2156  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2157  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2158  0500  0A3A               	incf	_LCDConfig+4,w
  2159  0501  1903               	btfsc	3,2
  2160  0502  2D82               	goto	l1413
  2161                           
  2162                           ;lcd.c: 858: {
  2163                           ;lcd.c: 859: GPIO_PinDirection(LCDConfig.D7,0x01u);
  2164  0503  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  2165  0504  0AF0               	incf	GPIO_PinDirection@var_pinDirn_u8,f
  2166  0505  0843               	movf	_LCDConfig+13,w
  2167  0506  120A  118A  262B  120A  118A  	fcall	_GPIO_PinDirection
  2168                           
  2169                           ;lcd.c: 860: GPIO_PinWrite(LCDConfig.RS,0);
  2170  050B  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2171  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2172  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2173  050E  0839               	movf	_LCDConfig+3,w
  2174  050F  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2175                           
  2176                           ;lcd.c: 861: GPIO_PinWrite(LCDConfig.RW,1);
  2177  0514  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2178  0515  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  2179  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2180  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2181  0518  083A               	movf	_LCDConfig+4,w
  2182  0519  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2183  051E                     l290:	
  2184                           ;lcd.c: 862: do
  2185                           
  2186                           
  2187                           ;lcd.c: 863: {
  2188                           ;lcd.c: 865: GPIO_PinWrite(LCDConfig.EN,0);
  2189  051E  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2190  051F  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0520  1303               	bcf	3,6	;RP1=0, select bank0
  2192  0521  083B               	movf	_LCDConfig+5,w
  2193  0522  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2194                           
  2195                           ;lcd.c: 866: DELAY_us(10);
  2196  0527  300A               	movlw	10
  2197  0528  00F0               	movwf	DELAY_us@us_count
  2198  0529  3000               	movlw	0
  2199  052A  00F1               	movwf	DELAY_us@us_count+1
  2200  052B  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  2201                           
  2202                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.EN,1);
  2203  0530  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2204  0531  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  2205  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0534  083B               	movf	_LCDConfig+5,w
  2208  0535  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2209                           
  2210                           ;lcd.c: 868: DELAY_us(10);
  2211  053A  300A               	movlw	10
  2212  053B  00F0               	movwf	DELAY_us@us_count
  2213  053C  3000               	movlw	0
  2214  053D  00F1               	movwf	DELAY_us@us_count+1
  2215  053E  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  2216                           
  2217                           ;lcd.c: 869: busyflag = GPIO_PinRead(LCDConfig.D7);
  2218  0543  1283               	bcf	3,5	;RP0=0, select bank0
  2219  0544  1303               	bcf	3,6	;RP1=0, select bank0
  2220  0545  0843               	movf	_LCDConfig+13,w
  2221  0546  120A  118A  2489  120A  118A  	fcall	_GPIO_PinRead
  2222  054B  00F5               	movwf	??_lcd_BusyCheck
  2223  054C  0875               	movf	??_lcd_BusyCheck,w
  2224  054D  00F6               	movwf	lcd_BusyCheck@busyflag
  2225                           
  2226                           ;lcd.c: 872: if(LCDConfig.v_LcdMode_U8 == 4)
  2227  054E  3004               	movlw	4
  2228  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2229  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2230  0551  0638               	xorwf	_LCDConfig+2,w
  2231  0552  1D03               	btfss	3,2
  2232  0553  2D77               	goto	l1409
  2233                           
  2234                           ;lcd.c: 873: {
  2235                           ;lcd.c: 875: GPIO_PinWrite(LCDConfig.EN,0);
  2236  0554  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2237  0555  083B               	movf	_LCDConfig+5,w
  2238  0556  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2239                           
  2240                           ;lcd.c: 876: DELAY_us(10);
  2241  055B  300A               	movlw	10
  2242  055C  00F0               	movwf	DELAY_us@us_count
  2243  055D  3000               	movlw	0
  2244  055E  00F1               	movwf	DELAY_us@us_count+1
  2245  055F  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  2246                           
  2247                           ;lcd.c: 877: GPIO_PinWrite(LCDConfig.EN,1);
  2248  0564  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  2249  0565  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  2250  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0568  083B               	movf	_LCDConfig+5,w
  2253  0569  120A  118A  2704  120A  118A  	fcall	_GPIO_PinWrite
  2254                           
  2255                           ;lcd.c: 878: DELAY_us(10);
  2256  056E  300A               	movlw	10
  2257  056F  00F0               	movwf	DELAY_us@us_count
  2258  0570  3000               	movlw	0
  2259  0571  00F1               	movwf	DELAY_us@us_count+1
  2260  0572  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  2261  0577                     l1409:	
  2262                           
  2263                           ;lcd.c: 879: }
  2264                           ;lcd.c: 880: }while(busyflag!=0);
  2265  0577  0876               	movf	lcd_BusyCheck@busyflag,w
  2266  0578  1D03               	btfss	3,2
  2267  0579  2D1E               	goto	l290
  2268                           
  2269                           ;lcd.c: 882: GPIO_PinDirection(LCDConfig.D7,0x00u);
  2270  057A  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  2271  057B  1283               	bcf	3,5	;RP0=0, select bank0
  2272  057C  1303               	bcf	3,6	;RP1=0, select bank0
  2273  057D  0843               	movf	_LCDConfig+13,w
  2274  057E  120A  118A  262B   	fcall	_GPIO_PinDirection
  2275                           
  2276                           ;lcd.c: 883: }
  2277  0581  0008               	return
  2278  0582                     l1413:	
  2279                           
  2280                           ;lcd.c: 884: else
  2281                           ;lcd.c: 885: {
  2282                           ;lcd.c: 888: DELAY_ms(1);
  2283  0582  3001               	movlw	1
  2284  0583  00F2               	movwf	DELAY_ms@ms_count
  2285  0584  3000               	movlw	0
  2286  0585  00F3               	movwf	DELAY_ms@ms_count+1
  2287  0586  120A  118A  2199   	fcall	_DELAY_ms
  2288  0589  0008               	return
  2289  058A                     __end_of_lcd_BusyCheck:	
  2290                           
  2291                           	psect	text16
  2292  0704                     __ptext16:	
  2293 ;; *************** function _GPIO_PinWrite *****************
  2294 ;; Defined at:
  2295 ;;		line 127 in file "../00-libfiles/gpio.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  enm_pinNumbe    1    wreg     enum E1088
  2298 ;;  var_pinValue    1    0[COMMON] unsigned char 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  2301 ;;  var_portNumb    1    3[COMMON] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2311 ;;      Params:         1       0       0       0       0
  2312 ;;      Locals:         2       0       0       0       0
  2313 ;;      Temps:          2       0       0       0       0
  2314 ;;      Totals:         5       0       0       0       0
  2315 ;;Total ram usage:        5 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_lcd_BusyCheck
  2321 ;;		_lcd_SendHigherNibble
  2322 ;;		_lcd_SendLowerNibble
  2323 ;;		_lcd_SendCmdSignals
  2324 ;;		_lcd_SendDataSignals
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           
  2329                           ;psect for function _GPIO_PinWrite
  2330  0704                     _GPIO_PinWrite:	
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _GPIO_PinWrite: [wreg-fsr0h+status,2+status,0]
  2334                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  2335  0704  00F4               	movwf	GPIO_PinWrite@enm_pinNumber
  2336                           
  2337                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  2338                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  2339  0705  0874               	movf	GPIO_PinWrite@enm_pinNumber,w
  2340  0706  00F1               	movwf	??_GPIO_PinWrite
  2341  0707  3003               	movlw	3
  2342  0708                     u1335:	
  2343  0708  1003               	clrc
  2344  0709  0CF1               	rrf	??_GPIO_PinWrite,f
  2345  070A  3EFF               	addlw	-1
  2346  070B  1D03               	skipz
  2347  070C  2F08               	goto	u1335
  2348  070D  0871               	movf	??_GPIO_PinWrite,w
  2349  070E  00F2               	movwf	??_GPIO_PinWrite+1
  2350  070F  0872               	movf	??_GPIO_PinWrite+1,w
  2351  0710  00F3               	movwf	GPIO_PinWrite@var_portNumber_u8
  2352                           
  2353                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  2354  0711  0874               	movf	GPIO_PinWrite@enm_pinNumber,w
  2355  0712  3907               	andlw	7
  2356  0713  00F1               	movwf	??_GPIO_PinWrite
  2357  0714  0871               	movf	??_GPIO_PinWrite,w
  2358  0715  00F4               	movwf	GPIO_PinWrite@enm_pinNumber
  2359                           
  2360                           ;gpio.c: 138: switch(var_portNumber_u8)
  2361  0716  2FCB               	goto	l1357
  2362  0717                     l1325:	
  2363                           ;gpio.c: 139: {
  2364                           ;gpio.c: 141: case 0:
  2365                           
  2366                           
  2367                           ;gpio.c: 142: ((var_pinValue_u8)? ((PORTA) |= (1<<(enm_pinNumber))): ((PORTA) &= ~(1<<(e
      +                          nm_pinNumber))));
  2368  0717  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  2369  0718  1903               	btfsc	3,2
  2370  0719  2F2A               	goto	l1329
  2371  071A  3001               	movlw	1
  2372  071B  00F1               	movwf	??_GPIO_PinWrite
  2373  071C  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2374  071D  2F20               	goto	u1354
  2375  071E                     u1355:	
  2376  071E  1003               	clrc
  2377  071F  0DF1               	rlf	??_GPIO_PinWrite,f
  2378  0720                     u1354:	
  2379  0720  3EFF               	addlw	-1
  2380  0721  1D03               	skipz
  2381  0722  2F1E               	goto	u1355
  2382  0723  0871               	movf	??_GPIO_PinWrite,w
  2383  0724  00F2               	movwf	??_GPIO_PinWrite+1
  2384  0725  0872               	movf	??_GPIO_PinWrite+1,w
  2385  0726  1283               	bcf	3,5	;RP0=0, select bank0
  2386  0727  1303               	bcf	3,6	;RP1=0, select bank0
  2387  0728  0485               	iorwf	5,f	;volatile
  2388  0729  0008               	return
  2389  072A                     l1329:	
  2390  072A  3001               	movlw	1
  2391  072B  00F1               	movwf	??_GPIO_PinWrite
  2392  072C  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2393  072D  2F30               	goto	u1364
  2394  072E                     u1365:	
  2395  072E  1003               	clrc
  2396  072F  0DF1               	rlf	??_GPIO_PinWrite,f
  2397  0730                     u1364:	
  2398  0730  3EFF               	addlw	-1
  2399  0731  1D03               	skipz
  2400  0732  2F2E               	goto	u1365
  2401  0733  0871               	movf	??_GPIO_PinWrite,w
  2402  0734  3AFF               	xorlw	255
  2403  0735  00F2               	movwf	??_GPIO_PinWrite+1
  2404  0736  0872               	movf	??_GPIO_PinWrite+1,w
  2405  0737  1283               	bcf	3,5	;RP0=0, select bank0
  2406  0738  1303               	bcf	3,6	;RP1=0, select bank0
  2407  0739  0585               	andwf	5,f	;volatile
  2408                           
  2409                           ;gpio.c: 143: break;
  2410  073A  0008               	return
  2411  073B                     l1331:	
  2412                           ;gpio.c: 147: case 1:
  2413                           
  2414                           
  2415                           ;gpio.c: 148: ((var_pinValue_u8)? ((PORTB) |= (1<<(enm_pinNumber))): ((PORTB) &= ~(1<<(e
      +                          nm_pinNumber))));
  2416  073B  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  2417  073C  1903               	btfsc	3,2
  2418  073D  2F4E               	goto	l1335
  2419  073E  3001               	movlw	1
  2420  073F  00F1               	movwf	??_GPIO_PinWrite
  2421  0740  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2422  0741  2F44               	goto	u1384
  2423  0742                     u1385:	
  2424  0742  1003               	clrc
  2425  0743  0DF1               	rlf	??_GPIO_PinWrite,f
  2426  0744                     u1384:	
  2427  0744  3EFF               	addlw	-1
  2428  0745  1D03               	skipz
  2429  0746  2F42               	goto	u1385
  2430  0747  0871               	movf	??_GPIO_PinWrite,w
  2431  0748  00F2               	movwf	??_GPIO_PinWrite+1
  2432  0749  0872               	movf	??_GPIO_PinWrite+1,w
  2433  074A  1283               	bcf	3,5	;RP0=0, select bank0
  2434  074B  1303               	bcf	3,6	;RP1=0, select bank0
  2435  074C  0486               	iorwf	6,f	;volatile
  2436  074D  0008               	return
  2437  074E                     l1335:	
  2438  074E  3001               	movlw	1
  2439  074F  00F1               	movwf	??_GPIO_PinWrite
  2440  0750  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2441  0751  2F54               	goto	u1394
  2442  0752                     u1395:	
  2443  0752  1003               	clrc
  2444  0753  0DF1               	rlf	??_GPIO_PinWrite,f
  2445  0754                     u1394:	
  2446  0754  3EFF               	addlw	-1
  2447  0755  1D03               	skipz
  2448  0756  2F52               	goto	u1395
  2449  0757  0871               	movf	??_GPIO_PinWrite,w
  2450  0758  3AFF               	xorlw	255
  2451  0759  00F2               	movwf	??_GPIO_PinWrite+1
  2452  075A  0872               	movf	??_GPIO_PinWrite+1,w
  2453  075B  1283               	bcf	3,5	;RP0=0, select bank0
  2454  075C  1303               	bcf	3,6	;RP1=0, select bank0
  2455  075D  0586               	andwf	6,f	;volatile
  2456                           
  2457                           ;gpio.c: 149: break;
  2458  075E  0008               	return
  2459  075F                     l1337:	
  2460                           ;gpio.c: 153: case 2:
  2461                           
  2462                           
  2463                           ;gpio.c: 154: ((var_pinValue_u8)? ((PORTC) |= (1<<(enm_pinNumber))): ((PORTC) &= ~(1<<(e
      +                          nm_pinNumber))));
  2464  075F  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  2465  0760  1903               	btfsc	3,2
  2466  0761  2F72               	goto	l1341
  2467  0762  3001               	movlw	1
  2468  0763  00F1               	movwf	??_GPIO_PinWrite
  2469  0764  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2470  0765  2F68               	goto	u1414
  2471  0766                     u1415:	
  2472  0766  1003               	clrc
  2473  0767  0DF1               	rlf	??_GPIO_PinWrite,f
  2474  0768                     u1414:	
  2475  0768  3EFF               	addlw	-1
  2476  0769  1D03               	skipz
  2477  076A  2F66               	goto	u1415
  2478  076B  0871               	movf	??_GPIO_PinWrite,w
  2479  076C  00F2               	movwf	??_GPIO_PinWrite+1
  2480  076D  0872               	movf	??_GPIO_PinWrite+1,w
  2481  076E  1283               	bcf	3,5	;RP0=0, select bank0
  2482  076F  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0770  0487               	iorwf	7,f	;volatile
  2484  0771  0008               	return
  2485  0772                     l1341:	
  2486  0772  3001               	movlw	1
  2487  0773  00F1               	movwf	??_GPIO_PinWrite
  2488  0774  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2489  0775  2F78               	goto	u1424
  2490  0776                     u1425:	
  2491  0776  1003               	clrc
  2492  0777  0DF1               	rlf	??_GPIO_PinWrite,f
  2493  0778                     u1424:	
  2494  0778  3EFF               	addlw	-1
  2495  0779  1D03               	skipz
  2496  077A  2F76               	goto	u1425
  2497  077B  0871               	movf	??_GPIO_PinWrite,w
  2498  077C  3AFF               	xorlw	255
  2499  077D  00F2               	movwf	??_GPIO_PinWrite+1
  2500  077E  0872               	movf	??_GPIO_PinWrite+1,w
  2501  077F  1283               	bcf	3,5	;RP0=0, select bank0
  2502  0780  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0781  0587               	andwf	7,f	;volatile
  2504                           
  2505                           ;gpio.c: 155: break;
  2506  0782  0008               	return
  2507  0783                     l1343:	
  2508                           ;gpio.c: 159: case 3:
  2509                           
  2510                           
  2511                           ;gpio.c: 160: ((var_pinValue_u8)? ((PORTD) |= (1<<(enm_pinNumber))): ((PORTD) &= ~(1<<(e
      +                          nm_pinNumber))));
  2512  0783  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  2513  0784  1903               	btfsc	3,2
  2514  0785  2F96               	goto	l1347
  2515  0786  3001               	movlw	1
  2516  0787  00F1               	movwf	??_GPIO_PinWrite
  2517  0788  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2518  0789  2F8C               	goto	u1444
  2519  078A                     u1445:	
  2520  078A  1003               	clrc
  2521  078B  0DF1               	rlf	??_GPIO_PinWrite,f
  2522  078C                     u1444:	
  2523  078C  3EFF               	addlw	-1
  2524  078D  1D03               	skipz
  2525  078E  2F8A               	goto	u1445
  2526  078F  0871               	movf	??_GPIO_PinWrite,w
  2527  0790  00F2               	movwf	??_GPIO_PinWrite+1
  2528  0791  0872               	movf	??_GPIO_PinWrite+1,w
  2529  0792  1283               	bcf	3,5	;RP0=0, select bank0
  2530  0793  1303               	bcf	3,6	;RP1=0, select bank0
  2531  0794  0488               	iorwf	8,f	;volatile
  2532  0795  0008               	return
  2533  0796                     l1347:	
  2534  0796  3001               	movlw	1
  2535  0797  00F1               	movwf	??_GPIO_PinWrite
  2536  0798  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2537  0799  2F9C               	goto	u1454
  2538  079A                     u1455:	
  2539  079A  1003               	clrc
  2540  079B  0DF1               	rlf	??_GPIO_PinWrite,f
  2541  079C                     u1454:	
  2542  079C  3EFF               	addlw	-1
  2543  079D  1D03               	skipz
  2544  079E  2F9A               	goto	u1455
  2545  079F  0871               	movf	??_GPIO_PinWrite,w
  2546  07A0  3AFF               	xorlw	255
  2547  07A1  00F2               	movwf	??_GPIO_PinWrite+1
  2548  07A2  0872               	movf	??_GPIO_PinWrite+1,w
  2549  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2550  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  2551  07A5  0588               	andwf	8,f	;volatile
  2552                           
  2553                           ;gpio.c: 161: break;
  2554  07A6  0008               	return
  2555  07A7                     l1349:	
  2556                           ;gpio.c: 165: case 4:
  2557                           
  2558                           
  2559                           ;gpio.c: 166: ((var_pinValue_u8)? ((PORTE) |= (1<<(enm_pinNumber))): ((PORTE) &= ~(1<<(e
      +                          nm_pinNumber))));
  2560  07A7  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  2561  07A8  1903               	btfsc	3,2
  2562  07A9  2FBA               	goto	l1353
  2563  07AA  3001               	movlw	1
  2564  07AB  00F1               	movwf	??_GPIO_PinWrite
  2565  07AC  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2566  07AD  2FB0               	goto	u1474
  2567  07AE                     u1475:	
  2568  07AE  1003               	clrc
  2569  07AF  0DF1               	rlf	??_GPIO_PinWrite,f
  2570  07B0                     u1474:	
  2571  07B0  3EFF               	addlw	-1
  2572  07B1  1D03               	skipz
  2573  07B2  2FAE               	goto	u1475
  2574  07B3  0871               	movf	??_GPIO_PinWrite,w
  2575  07B4  00F2               	movwf	??_GPIO_PinWrite+1
  2576  07B5  0872               	movf	??_GPIO_PinWrite+1,w
  2577  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  2578  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  2579  07B8  0489               	iorwf	9,f	;volatile
  2580  07B9  0008               	return
  2581  07BA                     l1353:	
  2582  07BA  3001               	movlw	1
  2583  07BB  00F1               	movwf	??_GPIO_PinWrite
  2584  07BC  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  2585  07BD  2FC0               	goto	u1484
  2586  07BE                     u1485:	
  2587  07BE  1003               	clrc
  2588  07BF  0DF1               	rlf	??_GPIO_PinWrite,f
  2589  07C0                     u1484:	
  2590  07C0  3EFF               	addlw	-1
  2591  07C1  1D03               	skipz
  2592  07C2  2FBE               	goto	u1485
  2593  07C3  0871               	movf	??_GPIO_PinWrite,w
  2594  07C4  3AFF               	xorlw	255
  2595  07C5  00F2               	movwf	??_GPIO_PinWrite+1
  2596  07C6  0872               	movf	??_GPIO_PinWrite+1,w
  2597  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  2598  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  2599  07C9  0589               	andwf	9,f	;volatile
  2600                           
  2601                           ;gpio.c: 169: }
  2602                           
  2603                           ;gpio.c: 167: break;
  2604  07CA  0008               	return
  2605  07CB                     l1357:	
  2606  07CB  0873               	movf	GPIO_PinWrite@var_portNumber_u8,w
  2607                           
  2608                           ; Switch size 1, requested type "space"
  2609                           ; Number of cases is 5, Range of values is 0 to 4
  2610                           ; switch strategies available:
  2611                           ; Name         Instructions Cycles
  2612                           ; simple_byte           16     9 (average)
  2613                           ; direct_byte           23     8 (fixed)
  2614                           ; jumptable            260     6 (fixed)
  2615                           ;	Chosen strategy is simple_byte
  2616  07CC  3A00               	xorlw	0	; case 0
  2617  07CD  1903               	skipnz
  2618  07CE  2F17               	goto	l1325
  2619  07CF  3A01               	xorlw	1	; case 1
  2620  07D0  1903               	skipnz
  2621  07D1  2F3B               	goto	l1331
  2622  07D2  3A03               	xorlw	3	; case 2
  2623  07D3  1903               	skipnz
  2624  07D4  2F5F               	goto	l1337
  2625  07D5  3A01               	xorlw	1	; case 3
  2626  07D6  1903               	skipnz
  2627  07D7  2F83               	goto	l1343
  2628  07D8  3A07               	xorlw	7	; case 4
  2629  07D9  1903               	skipnz
  2630  07DA  2FA7               	goto	l1349
  2631  07DB  2FDC               	goto	l92
  2632  07DC                     l92:	
  2633  07DC  0008               	return
  2634  07DD                     __end_of_GPIO_PinWrite:	
  2635                           
  2636                           	psect	text17
  2637  0489                     __ptext17:	
  2638 ;; *************** function _GPIO_PinRead *****************
  2639 ;; Defined at:
  2640 ;;		line 192 in file "../00-libfiles/gpio.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;  enm_pinNumbe    1    wreg     enum E1088
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  2645 ;;  returnStatus    1    3[COMMON] unsigned char 
  2646 ;;  var_portNumb    1    2[COMMON] unsigned char 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      unsigned char 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2656 ;;      Params:         0       0       0       0       0
  2657 ;;      Locals:         3       0       0       0       0
  2658 ;;      Temps:          2       0       0       0       0
  2659 ;;      Totals:         5       0       0       0       0
  2660 ;;Total ram usage:        5 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_lcd_BusyCheck
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _GPIO_PinRead
  2671  0489                     _GPIO_PinRead:	
  2672                           
  2673                           ;incstack = 0
  2674                           ; Regs used in _GPIO_PinRead: [wreg-fsr0h+status,2+status,0]
  2675                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  2676  0489  00F4               	movwf	GPIO_PinRead@enm_pinNumber
  2677                           
  2678                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  2679                           ;gpio.c: 195: uint8_t returnStatus = 0;
  2680  048A  01F3               	clrf	GPIO_PinRead@returnStatus
  2681                           
  2682                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  2683  048B  0874               	movf	GPIO_PinRead@enm_pinNumber,w
  2684  048C  00F0               	movwf	??_GPIO_PinRead
  2685  048D  3003               	movlw	3
  2686  048E                     u1495:	
  2687  048E  1003               	clrc
  2688  048F  0CF0               	rrf	??_GPIO_PinRead,f
  2689  0490  3EFF               	addlw	-1
  2690  0491  1D03               	skipz
  2691  0492  2C8E               	goto	u1495
  2692  0493  0870               	movf	??_GPIO_PinRead,w
  2693  0494  00F1               	movwf	??_GPIO_PinRead+1
  2694  0495  0871               	movf	??_GPIO_PinRead+1,w
  2695  0496  00F2               	movwf	GPIO_PinRead@var_portNumber_u8
  2696                           
  2697                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  2698  0497  0874               	movf	GPIO_PinRead@enm_pinNumber,w
  2699  0498  3907               	andlw	7
  2700  0499  00F0               	movwf	??_GPIO_PinRead
  2701  049A  0870               	movf	??_GPIO_PinRead,w
  2702  049B  00F4               	movwf	GPIO_PinRead@enm_pinNumber
  2703                           
  2704                           ;gpio.c: 201: switch(var_portNumber_u8)
  2705  049C  2CEB               	goto	l1377
  2706  049D                     l1365:	
  2707                           ;gpio.c: 202: {
  2708                           ;gpio.c: 204: case 0:
  2709                           
  2710                           
  2711                           ;gpio.c: 205: returnStatus = (((PORTA)&((1<<(enm_pinNumber))))!=0u);
  2712  049D  3001               	movlw	1
  2713  049E  00F0               	movwf	??_GPIO_PinRead
  2714  049F  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  2715  04A0  2CA3               	goto	u1504
  2716  04A1                     u1505:	
  2717  04A1  1003               	clrc
  2718  04A2  0DF0               	rlf	??_GPIO_PinRead,f
  2719  04A3                     u1504:	
  2720  04A3  3EFF               	addlw	-1
  2721  04A4  1D03               	skipz
  2722  04A5  2CA1               	goto	u1505
  2723  04A6  0870               	movf	??_GPIO_PinRead,w
  2724  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  2725  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  2726  04A9  0505               	andwf	5,w	;volatile
  2727  04AA  2CE2               	goto	L5
  2728  04AB                     l1367:	
  2729                           ;gpio.c: 209: case 1:
  2730                           
  2731                           ;gpio.c: 206: break;
  2732                           
  2733                           
  2734                           ;gpio.c: 210: returnStatus = (((PORTB)&((1<<(enm_pinNumber))))!=0u);
  2735  04AB  3001               	movlw	1
  2736  04AC  00F0               	movwf	??_GPIO_PinRead
  2737  04AD  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  2738  04AE  2CB1               	goto	u1534
  2739  04AF                     u1535:	
  2740  04AF  1003               	clrc
  2741  04B0  0DF0               	rlf	??_GPIO_PinRead,f
  2742  04B1                     u1534:	
  2743  04B1  3EFF               	addlw	-1
  2744  04B2  1D03               	skipz
  2745  04B3  2CAF               	goto	u1535
  2746  04B4  0870               	movf	??_GPIO_PinRead,w
  2747  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2748  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2749  04B7  0506               	andwf	6,w	;volatile
  2750  04B8  2CE2               	goto	L5
  2751  04B9                     l1369:	
  2752                           ;gpio.c: 214: case 2:
  2753                           
  2754                           ;gpio.c: 211: break;
  2755                           
  2756                           
  2757                           ;gpio.c: 215: returnStatus = (((PORTC)&((1<<(enm_pinNumber))))!=0u);
  2758  04B9  3001               	movlw	1
  2759  04BA  00F0               	movwf	??_GPIO_PinRead
  2760  04BB  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  2761  04BC  2CBF               	goto	u1564
  2762  04BD                     u1565:	
  2763  04BD  1003               	clrc
  2764  04BE  0DF0               	rlf	??_GPIO_PinRead,f
  2765  04BF                     u1564:	
  2766  04BF  3EFF               	addlw	-1
  2767  04C0  1D03               	skipz
  2768  04C1  2CBD               	goto	u1565
  2769  04C2  0870               	movf	??_GPIO_PinRead,w
  2770  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2771  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2772  04C5  0507               	andwf	7,w	;volatile
  2773  04C6  2CE2               	goto	L5
  2774  04C7                     l1371:	
  2775                           ;gpio.c: 220: case 3:
  2776                           
  2777                           ;gpio.c: 216: break;
  2778                           
  2779                           
  2780                           ;gpio.c: 221: returnStatus = (((PORTD)&((1<<(enm_pinNumber))))!=0u);
  2781  04C7  3001               	movlw	1
  2782  04C8  00F0               	movwf	??_GPIO_PinRead
  2783  04C9  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  2784  04CA  2CCD               	goto	u1594
  2785  04CB                     u1595:	
  2786  04CB  1003               	clrc
  2787  04CC  0DF0               	rlf	??_GPIO_PinRead,f
  2788  04CD                     u1594:	
  2789  04CD  3EFF               	addlw	-1
  2790  04CE  1D03               	skipz
  2791  04CF  2CCB               	goto	u1595
  2792  04D0  0870               	movf	??_GPIO_PinRead,w
  2793  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2794  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2795  04D3  0508               	andwf	8,w	;volatile
  2796  04D4  2CE2               	goto	L5
  2797  04D5                     l1373:	
  2798                           ;gpio.c: 226: case 4:
  2799                           
  2800                           ;gpio.c: 222: break;
  2801                           
  2802                           
  2803                           ;gpio.c: 227: returnStatus = (((PORTE)&((1<<(enm_pinNumber))))!=0u);
  2804  04D5  3001               	movlw	1
  2805  04D6  00F0               	movwf	??_GPIO_PinRead
  2806  04D7  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  2807  04D8  2CDB               	goto	u1624
  2808  04D9                     u1625:	
  2809  04D9  1003               	clrc
  2810  04DA  0DF0               	rlf	??_GPIO_PinRead,f
  2811  04DB                     u1624:	
  2812  04DB  3EFF               	addlw	-1
  2813  04DC  1D03               	skipz
  2814  04DD  2CD9               	goto	u1625
  2815  04DE  0870               	movf	??_GPIO_PinRead,w
  2816  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2817  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2818  04E1  0509               	andwf	9,w	;volatile
  2819  04E2                     L5:	
  2820  04E2  1903               	btfsc	3,2
  2821  04E3  2CE6               	goto	u1630
  2822  04E4  3001               	movlw	1
  2823  04E5  2CE7               	goto	u1640
  2824  04E6                     u1630:	
  2825  04E6  3000               	movlw	0
  2826  04E7                     u1640:	
  2827  04E7  00F1               	movwf	??_GPIO_PinRead+1
  2828  04E8  0871               	movf	??_GPIO_PinRead+1,w
  2829  04E9  00F3               	movwf	GPIO_PinRead@returnStatus
  2830                           
  2831                           ;gpio.c: 229: }
  2832                           
  2833                           ;gpio.c: 228: break;
  2834  04EA  2CFC               	goto	l1379
  2835  04EB                     l1377:	
  2836  04EB  0872               	movf	GPIO_PinRead@var_portNumber_u8,w
  2837                           
  2838                           ; Switch size 1, requested type "space"
  2839                           ; Number of cases is 5, Range of values is 0 to 4
  2840                           ; switch strategies available:
  2841                           ; Name         Instructions Cycles
  2842                           ; simple_byte           16     9 (average)
  2843                           ; direct_byte           23     8 (fixed)
  2844                           ; jumptable            260     6 (fixed)
  2845                           ;	Chosen strategy is simple_byte
  2846  04EC  3A00               	xorlw	0	; case 0
  2847  04ED  1903               	skipnz
  2848  04EE  2C9D               	goto	l1365
  2849  04EF  3A01               	xorlw	1	; case 1
  2850  04F0  1903               	skipnz
  2851  04F1  2CAB               	goto	l1367
  2852  04F2  3A03               	xorlw	3	; case 2
  2853  04F3  1903               	skipnz
  2854  04F4  2CB9               	goto	l1369
  2855  04F5  3A01               	xorlw	1	; case 3
  2856  04F6  1903               	skipnz
  2857  04F7  2CC7               	goto	l1371
  2858  04F8  3A07               	xorlw	7	; case 4
  2859  04F9  1903               	skipnz
  2860  04FA  2CD5               	goto	l1373
  2861  04FB  2CFC               	goto	l1379
  2862  04FC                     l1379:	
  2863                           
  2864                           ;gpio.c: 230: return returnStatus;
  2865  04FC  0873               	movf	GPIO_PinRead@returnStatus,w
  2866  04FD  0008               	return
  2867  04FE                     __end_of_GPIO_PinRead:	
  2868                           
  2869                           	psect	text18
  2870  062B                     __ptext18:	
  2871 ;; *************** function _GPIO_PinDirection *****************
  2872 ;; Defined at:
  2873 ;;		line 60 in file "../00-libfiles/gpio.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  enm_pinNumbe    1    wreg     enum E1088
  2876 ;;  var_pinDirn_    1    0[COMMON] unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  2879 ;;  var_portNumb    1    3[COMMON] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2889 ;;      Params:         1       0       0       0       0
  2890 ;;      Locals:         2       0       0       0       0
  2891 ;;      Temps:          2       0       0       0       0
  2892 ;;      Totals:         5       0       0       0       0
  2893 ;;Total ram usage:        5 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_LCD_SetUp
  2899 ;;		_lcd_BusyCheck
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _GPIO_PinDirection
  2905  062B                     _GPIO_PinDirection:	
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _GPIO_PinDirection: [wreg-fsr0h+status,2+status,0]
  2909                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  2910  062B  00F4               	movwf	GPIO_PinDirection@enm_pinNumber
  2911                           
  2912                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  2913                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  2914  062C  0874               	movf	GPIO_PinDirection@enm_pinNumber,w
  2915  062D  00F1               	movwf	??_GPIO_PinDirection
  2916  062E  3003               	movlw	3
  2917  062F                     u1175:	
  2918  062F  1003               	clrc
  2919  0630  0CF1               	rrf	??_GPIO_PinDirection,f
  2920  0631  3EFF               	addlw	-1
  2921  0632  1D03               	skipz
  2922  0633  2E2F               	goto	u1175
  2923  0634  0871               	movf	??_GPIO_PinDirection,w
  2924  0635  00F2               	movwf	??_GPIO_PinDirection+1
  2925  0636  0872               	movf	??_GPIO_PinDirection+1,w
  2926  0637  00F3               	movwf	GPIO_PinDirection@var_portNumber_u8
  2927                           
  2928                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  2929  0638  0874               	movf	GPIO_PinDirection@enm_pinNumber,w
  2930  0639  3907               	andlw	7
  2931  063A  00F1               	movwf	??_GPIO_PinDirection
  2932  063B  0871               	movf	??_GPIO_PinDirection,w
  2933  063C  00F4               	movwf	GPIO_PinDirection@enm_pinNumber
  2934                           
  2935                           ;gpio.c: 71: switch(var_portNumber_u8)
  2936  063D  2EF2               	goto	l1319
  2937  063E                     l1287:	
  2938                           ;gpio.c: 72: {
  2939                           ;gpio.c: 74: case 0:
  2940                           
  2941                           
  2942                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= (1<<(enm_pinNumber))): ((TRISA) &= ~(1<<(enm
      +                          _pinNumber))));
  2943  063E  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  2944  063F  1903               	btfsc	3,2
  2945  0640  2E51               	goto	l1291
  2946  0641  3001               	movlw	1
  2947  0642  00F1               	movwf	??_GPIO_PinDirection
  2948  0643  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  2949  0644  2E47               	goto	u1194
  2950  0645                     u1195:	
  2951  0645  1003               	clrc
  2952  0646  0DF1               	rlf	??_GPIO_PinDirection,f
  2953  0647                     u1194:	
  2954  0647  3EFF               	addlw	-1
  2955  0648  1D03               	skipz
  2956  0649  2E45               	goto	u1195
  2957  064A  0871               	movf	??_GPIO_PinDirection,w
  2958  064B  00F2               	movwf	??_GPIO_PinDirection+1
  2959  064C  0872               	movf	??_GPIO_PinDirection+1,w
  2960  064D  1683               	bsf	3,5	;RP0=1, select bank1
  2961  064E  1303               	bcf	3,6	;RP1=0, select bank1
  2962  064F  0485               	iorwf	5,f	;volatile
  2963  0650  0008               	return
  2964  0651                     l1291:	
  2965  0651  3001               	movlw	1
  2966  0652  00F1               	movwf	??_GPIO_PinDirection
  2967  0653  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  2968  0654  2E57               	goto	u1204
  2969  0655                     u1205:	
  2970  0655  1003               	clrc
  2971  0656  0DF1               	rlf	??_GPIO_PinDirection,f
  2972  0657                     u1204:	
  2973  0657  3EFF               	addlw	-1
  2974  0658  1D03               	skipz
  2975  0659  2E55               	goto	u1205
  2976  065A  0871               	movf	??_GPIO_PinDirection,w
  2977  065B  3AFF               	xorlw	255
  2978  065C  00F2               	movwf	??_GPIO_PinDirection+1
  2979  065D  0872               	movf	??_GPIO_PinDirection+1,w
  2980  065E  1683               	bsf	3,5	;RP0=1, select bank1
  2981  065F  1303               	bcf	3,6	;RP1=0, select bank1
  2982  0660  0585               	andwf	5,f	;volatile
  2983                           
  2984                           ;gpio.c: 76: break;
  2985  0661  0008               	return
  2986  0662                     l1293:	
  2987                           ;gpio.c: 80: case 1:
  2988                           
  2989                           
  2990                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= (1<<(enm_pinNumber))): ((TRISB) &= ~(1<<(enm
      +                          _pinNumber))));
  2991  0662  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  2992  0663  1903               	btfsc	3,2
  2993  0664  2E75               	goto	l1297
  2994  0665  3001               	movlw	1
  2995  0666  00F1               	movwf	??_GPIO_PinDirection
  2996  0667  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  2997  0668  2E6B               	goto	u1224
  2998  0669                     u1225:	
  2999  0669  1003               	clrc
  3000  066A  0DF1               	rlf	??_GPIO_PinDirection,f
  3001  066B                     u1224:	
  3002  066B  3EFF               	addlw	-1
  3003  066C  1D03               	skipz
  3004  066D  2E69               	goto	u1225
  3005  066E  0871               	movf	??_GPIO_PinDirection,w
  3006  066F  00F2               	movwf	??_GPIO_PinDirection+1
  3007  0670  0872               	movf	??_GPIO_PinDirection+1,w
  3008  0671  1683               	bsf	3,5	;RP0=1, select bank1
  3009  0672  1303               	bcf	3,6	;RP1=0, select bank1
  3010  0673  0486               	iorwf	6,f	;volatile
  3011  0674  0008               	return
  3012  0675                     l1297:	
  3013  0675  3001               	movlw	1
  3014  0676  00F1               	movwf	??_GPIO_PinDirection
  3015  0677  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3016  0678  2E7B               	goto	u1234
  3017  0679                     u1235:	
  3018  0679  1003               	clrc
  3019  067A  0DF1               	rlf	??_GPIO_PinDirection,f
  3020  067B                     u1234:	
  3021  067B  3EFF               	addlw	-1
  3022  067C  1D03               	skipz
  3023  067D  2E79               	goto	u1235
  3024  067E  0871               	movf	??_GPIO_PinDirection,w
  3025  067F  3AFF               	xorlw	255
  3026  0680  00F2               	movwf	??_GPIO_PinDirection+1
  3027  0681  0872               	movf	??_GPIO_PinDirection+1,w
  3028  0682  1683               	bsf	3,5	;RP0=1, select bank1
  3029  0683  1303               	bcf	3,6	;RP1=0, select bank1
  3030  0684  0586               	andwf	6,f	;volatile
  3031                           
  3032                           ;gpio.c: 82: break;
  3033  0685  0008               	return
  3034  0686                     l1299:	
  3035                           ;gpio.c: 86: case 2:
  3036                           
  3037                           
  3038                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= (1<<(enm_pinNumber))): ((TRISC) &= ~(1<<(enm
      +                          _pinNumber))));
  3039  0686  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  3040  0687  1903               	btfsc	3,2
  3041  0688  2E99               	goto	l1303
  3042  0689  3001               	movlw	1
  3043  068A  00F1               	movwf	??_GPIO_PinDirection
  3044  068B  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3045  068C  2E8F               	goto	u1254
  3046  068D                     u1255:	
  3047  068D  1003               	clrc
  3048  068E  0DF1               	rlf	??_GPIO_PinDirection,f
  3049  068F                     u1254:	
  3050  068F  3EFF               	addlw	-1
  3051  0690  1D03               	skipz
  3052  0691  2E8D               	goto	u1255
  3053  0692  0871               	movf	??_GPIO_PinDirection,w
  3054  0693  00F2               	movwf	??_GPIO_PinDirection+1
  3055  0694  0872               	movf	??_GPIO_PinDirection+1,w
  3056  0695  1683               	bsf	3,5	;RP0=1, select bank1
  3057  0696  1303               	bcf	3,6	;RP1=0, select bank1
  3058  0697  0487               	iorwf	7,f	;volatile
  3059  0698  0008               	return
  3060  0699                     l1303:	
  3061  0699  3001               	movlw	1
  3062  069A  00F1               	movwf	??_GPIO_PinDirection
  3063  069B  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3064  069C  2E9F               	goto	u1264
  3065  069D                     u1265:	
  3066  069D  1003               	clrc
  3067  069E  0DF1               	rlf	??_GPIO_PinDirection,f
  3068  069F                     u1264:	
  3069  069F  3EFF               	addlw	-1
  3070  06A0  1D03               	skipz
  3071  06A1  2E9D               	goto	u1265
  3072  06A2  0871               	movf	??_GPIO_PinDirection,w
  3073  06A3  3AFF               	xorlw	255
  3074  06A4  00F2               	movwf	??_GPIO_PinDirection+1
  3075  06A5  0872               	movf	??_GPIO_PinDirection+1,w
  3076  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  3077  06A7  1303               	bcf	3,6	;RP1=0, select bank1
  3078  06A8  0587               	andwf	7,f	;volatile
  3079                           
  3080                           ;gpio.c: 88: break;
  3081  06A9  0008               	return
  3082  06AA                     l1305:	
  3083                           ;gpio.c: 92: case 3:
  3084                           
  3085                           
  3086                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= (1<<(enm_pinNumber))): ((TRISD) &= ~(1<<(enm
      +                          _pinNumber))));
  3087  06AA  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  3088  06AB  1903               	btfsc	3,2
  3089  06AC  2EBD               	goto	l1309
  3090  06AD  3001               	movlw	1
  3091  06AE  00F1               	movwf	??_GPIO_PinDirection
  3092  06AF  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3093  06B0  2EB3               	goto	u1284
  3094  06B1                     u1285:	
  3095  06B1  1003               	clrc
  3096  06B2  0DF1               	rlf	??_GPIO_PinDirection,f
  3097  06B3                     u1284:	
  3098  06B3  3EFF               	addlw	-1
  3099  06B4  1D03               	skipz
  3100  06B5  2EB1               	goto	u1285
  3101  06B6  0871               	movf	??_GPIO_PinDirection,w
  3102  06B7  00F2               	movwf	??_GPIO_PinDirection+1
  3103  06B8  0872               	movf	??_GPIO_PinDirection+1,w
  3104  06B9  1683               	bsf	3,5	;RP0=1, select bank1
  3105  06BA  1303               	bcf	3,6	;RP1=0, select bank1
  3106  06BB  0488               	iorwf	8,f	;volatile
  3107  06BC  0008               	return
  3108  06BD                     l1309:	
  3109  06BD  3001               	movlw	1
  3110  06BE  00F1               	movwf	??_GPIO_PinDirection
  3111  06BF  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3112  06C0  2EC3               	goto	u1294
  3113  06C1                     u1295:	
  3114  06C1  1003               	clrc
  3115  06C2  0DF1               	rlf	??_GPIO_PinDirection,f
  3116  06C3                     u1294:	
  3117  06C3  3EFF               	addlw	-1
  3118  06C4  1D03               	skipz
  3119  06C5  2EC1               	goto	u1295
  3120  06C6  0871               	movf	??_GPIO_PinDirection,w
  3121  06C7  3AFF               	xorlw	255
  3122  06C8  00F2               	movwf	??_GPIO_PinDirection+1
  3123  06C9  0872               	movf	??_GPIO_PinDirection+1,w
  3124  06CA  1683               	bsf	3,5	;RP0=1, select bank1
  3125  06CB  1303               	bcf	3,6	;RP1=0, select bank1
  3126  06CC  0588               	andwf	8,f	;volatile
  3127                           
  3128                           ;gpio.c: 94: break;
  3129  06CD  0008               	return
  3130  06CE                     l1311:	
  3131                           ;gpio.c: 97: case 4:
  3132                           
  3133                           
  3134                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= (1<<(enm_pinNumber))): ((TRISE) &= ~(1<<(enm
      +                          _pinNumber))));
  3135  06CE  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  3136  06CF  1903               	btfsc	3,2
  3137  06D0  2EE1               	goto	l1315
  3138  06D1  3001               	movlw	1
  3139  06D2  00F1               	movwf	??_GPIO_PinDirection
  3140  06D3  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3141  06D4  2ED7               	goto	u1314
  3142  06D5                     u1315:	
  3143  06D5  1003               	clrc
  3144  06D6  0DF1               	rlf	??_GPIO_PinDirection,f
  3145  06D7                     u1314:	
  3146  06D7  3EFF               	addlw	-1
  3147  06D8  1D03               	skipz
  3148  06D9  2ED5               	goto	u1315
  3149  06DA  0871               	movf	??_GPIO_PinDirection,w
  3150  06DB  00F2               	movwf	??_GPIO_PinDirection+1
  3151  06DC  0872               	movf	??_GPIO_PinDirection+1,w
  3152  06DD  1683               	bsf	3,5	;RP0=1, select bank1
  3153  06DE  1303               	bcf	3,6	;RP1=0, select bank1
  3154  06DF  0489               	iorwf	9,f	;volatile
  3155  06E0  0008               	return
  3156  06E1                     l1315:	
  3157  06E1  3001               	movlw	1
  3158  06E2  00F1               	movwf	??_GPIO_PinDirection
  3159  06E3  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  3160  06E4  2EE7               	goto	u1324
  3161  06E5                     u1325:	
  3162  06E5  1003               	clrc
  3163  06E6  0DF1               	rlf	??_GPIO_PinDirection,f
  3164  06E7                     u1324:	
  3165  06E7  3EFF               	addlw	-1
  3166  06E8  1D03               	skipz
  3167  06E9  2EE5               	goto	u1325
  3168  06EA  0871               	movf	??_GPIO_PinDirection,w
  3169  06EB  3AFF               	xorlw	255
  3170  06EC  00F2               	movwf	??_GPIO_PinDirection+1
  3171  06ED  0872               	movf	??_GPIO_PinDirection+1,w
  3172  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  3173  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  3174  06F0  0589               	andwf	9,f	;volatile
  3175                           
  3176                           ;gpio.c: 101: }
  3177                           
  3178                           ;gpio.c: 99: break;
  3179  06F1  0008               	return
  3180  06F2                     l1319:	
  3181  06F2  0873               	movf	GPIO_PinDirection@var_portNumber_u8,w
  3182                           
  3183                           ; Switch size 1, requested type "space"
  3184                           ; Number of cases is 5, Range of values is 0 to 4
  3185                           ; switch strategies available:
  3186                           ; Name         Instructions Cycles
  3187                           ; simple_byte           16     9 (average)
  3188                           ; direct_byte           23     8 (fixed)
  3189                           ; jumptable            260     6 (fixed)
  3190                           ;	Chosen strategy is simple_byte
  3191  06F3  3A00               	xorlw	0	; case 0
  3192  06F4  1903               	skipnz
  3193  06F5  2E3E               	goto	l1287
  3194  06F6  3A01               	xorlw	1	; case 1
  3195  06F7  1903               	skipnz
  3196  06F8  2E62               	goto	l1293
  3197  06F9  3A03               	xorlw	3	; case 2
  3198  06FA  1903               	skipnz
  3199  06FB  2E86               	goto	l1299
  3200  06FC  3A01               	xorlw	1	; case 3
  3201  06FD  1903               	skipnz
  3202  06FE  2EAA               	goto	l1305
  3203  06FF  3A07               	xorlw	7	; case 4
  3204  0700  1903               	skipnz
  3205  0701  2ECE               	goto	l1311
  3206  0702  2F03               	goto	l62
  3207  0703                     l62:	
  3208  0703  0008               	return
  3209  0704                     __end_of_GPIO_PinDirection:	
  3210                           
  3211                           	psect	text19
  3212  0199                     __ptext19:	
  3213 ;; *************** function _DELAY_ms *****************
  3214 ;; Defined at:
  3215 ;;		line 75 in file "../00-libfiles/delay.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  ms_count        2    2[COMMON] unsigned int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, pclath, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         2       0       0       0       0
  3230 ;;      Locals:         0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0
  3232 ;;      Totals:         2       0       0       0       0
  3233 ;;Total ram usage:        2 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    1
  3236 ;; This function calls:
  3237 ;;		_DELAY_us
  3238 ;; This function is called by:
  3239 ;;		_LCD_Init
  3240 ;;		_LCD_ScrollMessage
  3241 ;;		_lcd_BusyCheck
  3242 ;;		_lcd_Reset
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _DELAY_ms
  3248  0199                     _DELAY_ms:	
  3249  0199                     l1389:	
  3250                           ;delay.c: 77: while (ms_count != 0)
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  3254                           
  3255  0199  0872               	movf	DELAY_ms@ms_count,w
  3256  019A  0473               	iorwf	DELAY_ms@ms_count+1,w
  3257  019B  1903               	btfsc	3,2
  3258  019C  0008               	return
  3259                           
  3260                           ;delay.c: 78: {
  3261                           ;delay.c: 79: DELAY_us(300u);
  3262  019D  302C               	movlw	44
  3263  019E  00F0               	movwf	DELAY_us@us_count
  3264  019F  3001               	movlw	1
  3265  01A0  00F1               	movwf	DELAY_us@us_count+1
  3266  01A1  120A  118A  2183  120A  118A  	fcall	_DELAY_us
  3267                           
  3268                           ;delay.c: 80: ms_count--;
  3269  01A6  3001               	movlw	1
  3270  01A7  02F2               	subwf	DELAY_ms@ms_count,f
  3271  01A8  3000               	movlw	0
  3272  01A9  1C03               	skipc
  3273  01AA  03F3               	decf	DELAY_ms@ms_count+1,f
  3274  01AB  02F3               	subwf	DELAY_ms@ms_count+1,f
  3275  01AC  2999               	goto	l1389
  3276  01AD                     __end_of_DELAY_ms:	
  3277                           
  3278                           	psect	text20
  3279  0183                     __ptext20:	
  3280 ;; *************** function _DELAY_us *****************
  3281 ;; Defined at:
  3282 ;;		line 56 in file "../00-libfiles/delay.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  us_count        2    0[COMMON] unsigned int 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, status,2, status,0
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         2       0       0       0       0
  3297 ;;      Locals:         0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0
  3299 ;;      Totals:         2       0       0       0       0
  3300 ;;Total ram usage:        2 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; This function calls:
  3303 ;;		Nothing
  3304 ;; This function is called by:
  3305 ;;		_DELAY_ms
  3306 ;;		_lcd_BusyCheck
  3307 ;;		_lcd_Reset
  3308 ;;		_lcd_SendCmdSignals
  3309 ;;		_lcd_SendDataSignals
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           
  3314                           ;psect for function _DELAY_us
  3315  0183                     _DELAY_us:	
  3316  0183                     l1281:	
  3317                           ;delay.c: 58: while (us_count != 0)
  3318                           
  3319                           ;incstack = 0
  3320                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  3321                           
  3322  0183  0870               	movf	DELAY_us@us_count,w
  3323  0184  0471               	iorwf	DELAY_us@us_count+1,w
  3324  0185  1903               	btfsc	3,2
  3325  0186  0008               	return
  3326                           
  3327                           ;delay.c: 59: {
  3328                           ;delay.c: 60: us_count--;
  3329  0187  3001               	movlw	1
  3330  0188  02F0               	subwf	DELAY_us@us_count,f
  3331  0189  3000               	movlw	0
  3332  018A  1C03               	skipc
  3333  018B  03F1               	decf	DELAY_us@us_count+1,f
  3334  018C  02F1               	subwf	DELAY_us@us_count+1,f
  3335  018D  2983               	goto	l1281
  3336  018E                     __end_of_DELAY_us:	
  3337  007E                     btemp	set	126	;btemp
  3338  007E                     wtemp	set	126
  3339  007E                     wtemp0	set	126
  3340  0080                     wtemp1	set	128
  3341  0082                     wtemp2	set	130
  3342  0084                     wtemp3	set	132
  3343  0086                     wtemp4	set	134
  3344  0088                     wtemp5	set	136
  3345  007F                     wtemp6	set	127
  3346  007E                     ttemp	set	126
  3347  007E                     ttemp0	set	126
  3348  0081                     ttemp1	set	129
  3349  0084                     ttemp2	set	132
  3350  0087                     ttemp3	set	135
  3351  007F                     ttemp4	set	127
  3352  007E                     ltemp	set	126
  3353  007E                     ltemp0	set	126
  3354  0082                     ltemp1	set	130
  3355  0086                     ltemp2	set	134
  3356  0080                     ltemp3	set	128


Data Sizes:
    Strings     56
    Constant    0
    Data        4
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_ScrollMessage@ptr_msgPointer_u8	PTR unsigned char  size(1) Largest target is 56
		 -> STR_1(CODE[56]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_ScrollMessage
    _LCD_SetUp->_GPIO_PinDirection
    _LCD_ScrollMessage->_LCD_DisplayChar
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinDirection
    _lcd_BusyCheck->_GPIO_PinRead
    _lcd_BusyCheck->_GPIO_PinWrite
    _DELAY_ms->_DELAY_us

Critical Paths under _main in BANK0

    _main->_LCD_SetUp

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   77677
                                             10 BANK0     12    12      0
                           _LCD_Init
                  _LCD_ScrollMessage
                          _LCD_SetUp
 ---------------------------------------------------------------------------------
 (1) _LCD_SetUp                                           12     2     10    2189
                                              5 COMMON     2     2      0
                                              0 BANK0     10     0     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (1) _LCD_ScrollMessage                                    5     4      1   40167
                                             13 COMMON     1     0      1
                                              0 BANK0      4     4      0
                           _DELAY_ms
                       _LCD_CmdWrite
                    _LCD_DisplayChar
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayChar                                      2     2      0   19528
                                             11 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (3) _lcd_DataWrite                                        3     3      0    9731
                                              7 COMMON     3     3      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (4) _lcd_SendDataSignals                                  0     0      0    2117
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToNextLine                                     1     1      0    9731
                                             10 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     2      1   35320
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    5110
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0   19528
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (2) _LCD_GoToLine                                         2     2      0    9797
                                             10 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (3) _LCD_CmdWrite                                         3     3      0    9731
                                              7 COMMON     3     3      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (4) _lcd_SendLowerNibble                                  2     2      0    1652
                                              5 COMMON     2     2      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendHigherNibble                                 2     2      0    1652
                                              5 COMMON     2     2      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendCmdSignals                                   0     0      0    2117
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_BusyCheck                                        2     2      0    4221
                                              5 COMMON     2     2      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _GPIO_PinWrite                                        5     4      1    1564
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (5) _GPIO_PinRead                                         5     5      0     206
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinDirection                                    5     4      1    1087
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (5) _DELAY_ms                                             2     0      2     788
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (5) _DELAY_us                                             2     0      2     553
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
   _LCD_ScrollMessage
     _DELAY_ms
       _DELAY_us
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
     _LCD_GoToLine
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
   _LCD_SetUp
     _GPIO_PinDirection

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      2A       5       52.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38      12        0.0%
ABS                  0      0      38       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Feb 20 14:16:30 2016

                                 pc 0002                         __CFG_CP$OFF 0000  
                     ?_LCD_CmdWrite 0070                                  l62 0703  
                                l92 07DC                                  fsr 0004  
                     ?_LCD_GoToLine 0070                         __CFG_LVP$ON 0000  
                               l168 0377                                 l290 051E  
                      __CFG_CPD$OFF 0000                                 fsr0 0004  
                               indf 0000                        __CFG_FOSC$HS 0000  
           __end_of_LCD_DisplayChar 01F5                                l1311 06CE  
                              l1303 0699                                l1305 06AA  
                              l1315 06E1                                l1331 073B  
                              l1309 06BD                                l1341 0772  
                              l1325 0717                                l1413 0582  
                              l1501 01E1                                l1319 06F2  
                              l1343 0783                                l1335 074E  
                              l1431 0263                                l1503 01E6  
                              l1281 0183                                l1353 07BA  
                              l1337 075F                                l1329 072A  
                              l1409 0577                                l1521 05C9  
                              l1291 0651                                l1371 04C7  
                              l1347 0796                                l1435 027B  
                              l1531 05EF                                l1293 0662  
                              l1373 04D5                                l1365 049D  
                              l1349 07A7                                l1357 07CB  
                              l1287 063E                                l1367 04AB  
                              l1519 05C4                                l1297 0675  
                              l1369 04B9                                l1377 04EB  
                              l1473 02B0                                l1299 0686  
                              l1379 04FC                                l1555 0366  
                              l1389 0199                                l1549 0355  
                              l1469 0298                                l1591 0484  
                              l1583 0470                                l1575 043F  
                              l1663 03BF                                l1579 0464  
                              l1589 042B                                STR_1 0009  
                              u1204 0657                                u1205 0655  
                              u1224 066B                                u1225 0669  
                              u1314 06D7                                u1234 067B  
                              u1315 06D5                                u1235 0679  
                              u1324 06E7                                u1325 06E5  
                              u1254 068F                                u1414 0768  
                              u1255 068D                                u1175 062F  
                              u1415 0766                                u1335 0708  
                              u1264 069F                                u1504 04A3  
                              u1424 0778                                u1265 069D  
                              u1505 04A1                                u1425 0776  
                              u1194 0647                                u1354 0720  
                              u1195 0645                                u1355 071E  
                              u1284 06B3                                u1444 078C  
                              u1364 0730                                u1700 0300  
                              u1285 06B1                                u1445 078A  
                              u1365 072E                                u1294 06C3  
                              u1630 04E6                                u1534 04B1  
                              u1454 079C                                u1710 030F  
                              u1295 06C1                                u1535 04AF  
                              u1455 079A                                u1640 04E7  
                              u1624 04DB                                u1384 0744  
                              u1800 02D0                                u1720 0310  
                              u1625 04D9                                u1385 0742  
                              u1474 07B0                                u1394 0754  
                              u1810 02DF                                u1730 031F  
                              u1475 07AE                                u1395 0752  
                              u1564 04BF                                u1484 07C0  
                              u1820 02E0                                u1740 0320  
                              u1565 04BD                                u1485 07BE  
                              u1830 02EF                                u1750 032F  
                              u1495 048E                                u1840 02F0  
                              u1760 0330                                u1905 02A6  
                              u1594 04CD                                u1770 02BF  
                              u1690 02FF                                u1595 04CB  
                              u1780 02C0                                u1790 02CF  
                              u1865 0271                        __CFG_WRT$OFF 0000  
                              _main 0381                  __size_of_LCD_Clear 000B  
                              btemp 007E                                ltemp 007E  
                __size_of_LCD_SetUp 00A1                                start 0000  
                              ttemp 007E                                wtemp 007E  
                  __end_of_DELAY_ms 01AD                    __end_of_DELAY_us 018E  
                     ?_GPIO_PinRead 0070                      ??_LCD_CmdWrite 0077  
                       LCD_SetUp@D0 0022                         LCD_SetUp@D1 0023  
                       LCD_SetUp@D2 0024                         LCD_SetUp@D3 0025  
                       LCD_SetUp@D4 0026                         LCD_SetUp@D5 0027  
                       LCD_SetUp@D6 0028                         LCD_SetUp@D7 0029  
                       LCD_SetUp@EN 0021                         LCD_SetUp@RS 0076  
                       LCD_SetUp@RW 0020                      ??_LCD_GoToLine 007A  
                     _GPIO_PinWrite 0704                    __end_of_LCD_Init 0381  
           LCD_CmdWrite@v_lcdCmd_u8 0079                               ?_main 0070  
                     __CFG_WDTE$OFF 0000                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _PORTD 0008                               _PORTE 0009  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087                               _TRISD 0088  
                             _TRISE 0089                      __CFG_BOREN$OFF 0000  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080        __end_of_lcd_SendHigherNibble 02FA  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                      ??_GPIO_PinRead 0070  
                   __initialization 07DD          GPIO_PinWrite@enm_pinNumber 0074  
                      __end_of_main 03CC                      ?_GPIO_PinWrite 0070  
                 _GPIO_PinDirection 062B                              ??_main 002A  
       __size_of_lcd_SendCmdSignals 002D                   __end_of_LCD_Clear 0199  
                ?_GPIO_PinDirection 0070                   __end_of_LCD_SetUp 062B  
                  ?_LCD_DisplayChar 0070         LCD_DisplayChar@v_lcdData_u8 007C  
               ??_GPIO_PinDirection 0071               lcd_BusyCheck@busyflag 0076  
                    __CFG_PWRTE$OFF 0000           GPIO_PinRead@enm_pinNumber 0074  
         __end_of_GPIO_PinDirection 0704      GPIO_PinDirection@enm_pinNumber 0074  
                  DELAY_ms@ms_count 0072                   ?_LCD_GoToNextLine 0070  
                         ?_DELAY_ms 0072                           ?_DELAY_us 0070  
       __end_of_lcd_SendLowerNibble 033A                  ??_LCD_GoToNextLine 007A  
              __end_of_LCD_CmdWrite 0285                __end_of_LCD_GoToLine 01D6  
       lcd_SendLowerNibble@dataByte 0076             __end_of__initialization 07FC  
                         ?_LCD_Init 007C                     ??_GPIO_PinWrite 0071  
                    __pcstackCOMMON 0070                        __pidataBANK0 0177  
             __end_of_lcd_DataWrite 02BA                _lcd_SendHigherNibble 02BA  
                __size_of_lcd_Reset 004F        __size_of_lcd_SendDataSignals 002E  
                        ??_DELAY_ms 0074                          ??_DELAY_us 0072  
              __end_of_GPIO_PinRead 04FE      GPIO_PinWrite@var_portNumber_u8 0073  
                        __pbssBANK0 0036               __end_of_lcd_BusyCheck 058A  
      lcd_SendHigherNibble@dataByte 0076        GPIO_PinWrite@var_pinValue_u8 0070  
                        ??_LCD_Init 007D                          __pmaintext 0381  
        __size_of_GPIO_PinDirection 00D9               ?_lcd_SendHigherNibble 0070  
                  DELAY_us@us_count 0070                          __stringtab 0003  
                 __end_of_lcd_Reset 041B           LCD_Init@v_lcdNoOfLines_u8 0020  
                           __ptext1 058A                             __ptext2 041B  
                           __ptext3 01D6                             __ptext4 0285  
                           __ptext5 0222                             __ptext6 01AD  
                           __ptext7 033A                             __ptext8 03CC  
                           __ptext9 018E               __size_of_LCD_CmdWrite 0035  
                         _LCDConfig 0036               __size_of_LCD_GoToLine 0015  
                         _LCD_Clear 018E                           _LCD_SetUp 058A  
                           clrloop0 017C                end_of_initialization 07FC  
      LCD_Init@v_MaxCharsPerLine_u8 007C                   _LCD_ScrollMessage 041B  
            ??_lcd_SendHigherNibble 0075                  ?_LCD_ScrollMessage 007D  
        __end_of_lcd_SendCmdSignals 0222                        _LCD_CmdWrite 0250  
                      _LCD_GoToLine 01C1               __size_of_GPIO_PinRead 0075  
LCD_ScrollMessage@ptr_msgPointer_u8 007D                 ??_LCD_ScrollMessage 0020  
                        ?_LCD_Clear 0070                          ?_LCD_SetUp 0020  
                 __size_of_DELAY_ms 0014                   __size_of_DELAY_us 000B  
                LCD_ScrollMessage@i 0022                  LCD_ScrollMessage@j 0023  
          __size_of_LCD_DisplayChar 001F                   __size_of_LCD_Init 0047  
         __end_of_LCD_ScrollMessage 0489           __size_of_LCD_GoToNextLine 0014  
               _lcd_SendDataSignals 0222  GPIO_PinDirection@var_portNumber_u8 0073  
                      _GPIO_PinRead 0489            _ARR_LcdLineNumAddress_U8 0046  
               start_initialization 07DD                ?_lcd_SendDataSignals 0070  
            _v_LcdTrackCursorPos_U8 0044       GPIO_PinRead@var_portNumber_u8 0072  
      __size_of_lcd_SendLowerNibble 0040     GPIO_PinDirection@var_pinDirn_u8 0070  
             __end_of_GPIO_PinWrite 07DD                         __pdataBANK0 0046  
             ??_lcd_SendDataSignals 0075                _v_LcdTrackLineNum_U8 0045  
                         ___latbits 0002               lcd_DataWrite@dataByte 0079  
                     __pcstackBANK0 0020                         ??_LCD_Clear 007C  
                       ??_LCD_SetUp 0075              __size_of_lcd_DataWrite 0035  
        __size_of_LCD_ScrollMessage 006E         LCD_GoToLine@v_lineNumber_u8 007B  
                         _lcd_Reset 03CC                   ??_LCD_DisplayChar 007B  
                         __pstrings 0003              __size_of_lcd_BusyCheck 008C  
  LCD_ScrollMessage@v_lineNumber_u8 0021                            _DELAY_ms 0199  
                          _DELAY_us 0183                            _LCD_Init 033A  
                         clear_ram0 017B                    _LCD_GoToNextLine 01AD  
                        ?_lcd_Reset 0070                       _lcd_DataWrite 0285  
          GPIO_PinRead@returnStatus 0073                         __stringbase 0008  
                         main@count 0034                  _lcd_SendCmdSignals 01F5  
                     _lcd_BusyCheck 04FE                 ?_lcd_SendCmdSignals 0070  
                    ?_lcd_DataWrite 0070                  __end_of__stringtab 0009  
              ??_lcd_SendCmdSignals 0075       __size_of_lcd_SendHigherNibble 0040  
               _lcd_SendLowerNibble 02FA                            __ptext10 01C1  
                          __ptext11 0250                            __ptext20 0183  
                          __ptext12 02FA                            __ptext13 02BA  
                          __ptext14 01F5                            __ptext15 04FE  
                          __ptext16 0704                            __ptext17 0489  
                          __ptext18 062B                            __ptext19 0199  
                    ?_lcd_BusyCheck 0070                       __size_of_main 004B  
              ?_lcd_SendLowerNibble 0070                         ??_lcd_Reset 0077  
             ??_lcd_SendLowerNibble 0075                     _LCD_DisplayChar 01D6  
                         stringcode 0003                     ??_lcd_DataWrite 0077  
       __end_of_lcd_SendDataSignals 0250            __end_of_LCD_GoToNextLine 01C1  
                          stringdir 0003                            stringtab 0003  
                   ??_lcd_BusyCheck 0075              __size_of_GPIO_PinWrite 00D9  
