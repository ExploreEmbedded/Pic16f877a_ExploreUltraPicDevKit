

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Wed Apr 27 13:08:09 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	dabs	1,0x7E,2
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0088                     	;# 
   113  0089                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  010F                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  0000                     	;# 
   194  0001                     	;# 
   195  0002                     	;# 
   196  0003                     	;# 
   197  0004                     	;# 
   198  0005                     	;# 
   199  0006                     	;# 
   200  0007                     	;# 
   201  0008                     	;# 
   202  0009                     	;# 
   203  000A                     	;# 
   204  000B                     	;# 
   205  000C                     	;# 
   206  000D                     	;# 
   207  000E                     	;# 
   208  000E                     	;# 
   209  000F                     	;# 
   210  0010                     	;# 
   211  0011                     	;# 
   212  0012                     	;# 
   213  0013                     	;# 
   214  0014                     	;# 
   215  0015                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001B                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  001D                     	;# 
   226  001E                     	;# 
   227  001F                     	;# 
   228  0081                     	;# 
   229  0085                     	;# 
   230  0086                     	;# 
   231  0087                     	;# 
   232  0088                     	;# 
   233  0089                     	;# 
   234  008C                     	;# 
   235  008D                     	;# 
   236  008E                     	;# 
   237  0091                     	;# 
   238  0092                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0098                     	;# 
   242  0099                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  010F                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000D                     	;# 
   267  000E                     	;# 
   268  000E                     	;# 
   269  000F                     	;# 
   270  0010                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0013                     	;# 
   274  0014                     	;# 
   275  0015                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0017                     	;# 
   279  0018                     	;# 
   280  0019                     	;# 
   281  001A                     	;# 
   282  001B                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  001D                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  0081                     	;# 
   289  0085                     	;# 
   290  0086                     	;# 
   291  0087                     	;# 
   292  0088                     	;# 
   293  0089                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0093                     	;# 
   300  0094                     	;# 
   301  0098                     	;# 
   302  0099                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  009F                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  010F                     	;# 
   311  018C                     	;# 
   312  018D                     	;# 
   313  0000                     	;# 
   314  0001                     	;# 
   315  0002                     	;# 
   316  0003                     	;# 
   317  0004                     	;# 
   318  0005                     	;# 
   319  0006                     	;# 
   320  0007                     	;# 
   321  0008                     	;# 
   322  0009                     	;# 
   323  000A                     	;# 
   324  000B                     	;# 
   325  000C                     	;# 
   326  000D                     	;# 
   327  000E                     	;# 
   328  000E                     	;# 
   329  000F                     	;# 
   330  0010                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0013                     	;# 
   334  0014                     	;# 
   335  0015                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0017                     	;# 
   339  0018                     	;# 
   340  0019                     	;# 
   341  001A                     	;# 
   342  001B                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  001D                     	;# 
   346  001E                     	;# 
   347  001F                     	;# 
   348  0081                     	;# 
   349  0085                     	;# 
   350  0086                     	;# 
   351  0087                     	;# 
   352  0088                     	;# 
   353  0089                     	;# 
   354  008C                     	;# 
   355  008D                     	;# 
   356  008E                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0094                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  018C                     	;# 
   372  018D                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  000D                     	;# 
   387  000E                     	;# 
   388  000E                     	;# 
   389  000F                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0013                     	;# 
   394  0014                     	;# 
   395  0015                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  001D                     	;# 
   406  001E                     	;# 
   407  001F                     	;# 
   408  0081                     	;# 
   409  0085                     	;# 
   410  0086                     	;# 
   411  0087                     	;# 
   412  0088                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0093                     	;# 
   420  0094                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  010F                     	;# 
   431  018C                     	;# 
   432  018D                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000D                     	;# 
   447  000E                     	;# 
   448  000E                     	;# 
   449  000F                     	;# 
   450  0010                     	;# 
   451  0011                     	;# 
   452  0012                     	;# 
   453  0013                     	;# 
   454  0014                     	;# 
   455  0015                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0017                     	;# 
   459  0018                     	;# 
   460  0019                     	;# 
   461  001A                     	;# 
   462  001B                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001D                     	;# 
   466  001E                     	;# 
   467  001F                     	;# 
   468  0081                     	;# 
   469  0085                     	;# 
   470  0086                     	;# 
   471  0087                     	;# 
   472  0088                     	;# 
   473  0089                     	;# 
   474  008C                     	;# 
   475  008D                     	;# 
   476  008E                     	;# 
   477  0091                     	;# 
   478  0092                     	;# 
   479  0093                     	;# 
   480  0094                     	;# 
   481  0098                     	;# 
   482  0099                     	;# 
   483  009C                     	;# 
   484  009D                     	;# 
   485  009E                     	;# 
   486  009F                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  018C                     	;# 
   492  018D                     	;# 
   493                           
   494                           	psect	idataBANK1
   495  12A4                     __pidataBANK1:	
   496                           
   497                           ;initializer for _ARR_LcdLineNumAddress_U8
   498  12A4  3480               	retlw	128
   499  12A5  34C0               	retlw	192
   500  12A6  3490               	retlw	144
   501  12A7  34D0               	retlw	208
   502                           
   503                           ;initializer for seg_test@F1296
   504  12A8  34C0               	retlw	192
   505  12A9  34F9               	retlw	249
   506  12AA  34A4               	retlw	164
   507  12AB  34B0               	retlw	176
   508                           
   509                           	psect	stringtext
   510  0800                     __pstringtext:	
   511  0800                     stringtab:	
   512  0800                     __stringtab:	
   513                           
   514                           ;	String table - string pointers are 2 bytes each
   515  0800  1BFF               	btfsc	btemp+1,7
   516  0801  280A               	ljmp	stringcode
   517  0802  1383               	bcf	3,7
   518  0803  187F               	btfsc	btemp+1,0
   519  0804  1783               	bsf	3,7
   520  0805  0800               	movf	0,w
   521  0806  0A84               	incf	4,f
   522  0807  1903               	skipnz
   523  0808  0AFF               	incf	btemp+1,f
   524  0809  0008               	return
   525  080A                     stringcode:	
   526  080A  087F               	movf	btemp+1,w
   527  080B  397F               	andlw	127
   528  080C  008A               	movwf	10
   529  080D  0804               	movf	4,w
   530  080E  0A84               	incf	4,f
   531  080F  1903               	skipnz
   532  0810  0AFF               	incf	btemp+1,f
   533  0811  0082               	movwf	2
   534  0812                     __stringbase:	
   535  0812                     __end_of__stringtab:	
   536  0812                     _A_KeyLookUptable_U8:	
   537  0812  3430               	retlw	48
   538  0813  3431               	retlw	49
   539  0814  3432               	retlw	50
   540  0815  3433               	retlw	51
   541  0816  3434               	retlw	52
   542  0817  3435               	retlw	53
   543  0818  3436               	retlw	54
   544  0819  3437               	retlw	55
   545  081A  3438               	retlw	56
   546  081B  3439               	retlw	57
   547  081C  3441               	retlw	65
   548  081D  3442               	retlw	66
   549  081E  3443               	retlw	67
   550  081F  3444               	retlw	68
   551  0820  3445               	retlw	69
   552  0821  3446               	retlw	70
   553  0822                     __end_of_A_KeyLookUptable_U8:	
   554  001F                     _ADCON0	set	31
   555  001E                     _ADRESH	set	30
   556  0005                     _PORTA	set	5
   557  0006                     _PORTB	set	6
   558  0007                     _PORTC	set	7
   559  0008                     _PORTD	set	8
   560  0009                     _PORTE	set	9
   561  001A                     _RCREG	set	26
   562  0018                     _RCSTA	set	24
   563  0013                     _SSPBUF	set	19
   564  0014                     _SSPCON	set	20
   565  0019                     _TXREG	set	25
   566  00F8                     _ADON	set	248
   567  0018                     _CARRY	set	24
   568  005F                     _GIE	set	95
   569  00FA                     _GO	set	250
   570  00FA                     _GO_DONE	set	250
   571  0065                     _RCIF	set	101
   572  0064                     _TXIF	set	100
   573  009F                     _ADCON1	set	159
   574  009E                     _ADRESL	set	158
   575  0099                     _SPBRG	set	153
   576  0093                     _SSPADD	set	147
   577  0094                     _SSPSTAT	set	148
   578  0085                     _TRISA	set	133
   579  0086                     _TRISB	set	134
   580  0087                     _TRISC	set	135
   581  0088                     _TRISD	set	136
   582  0089                     _TRISE	set	137
   583  0098                     _TXSTA	set	152
   584  048D                     _ACKDT	set	1165
   585  048C                     _ACKEN	set	1164
   586  04A0                     _BF	set	1184
   587  048A                     _PEN	set	1162
   588  048B                     _RCEN	set	1163
   589  0489                     _RSEN	set	1161
   590  04A2                     _R_W	set	1186
   591  0488                     _SEN	set	1160
   592  043B                     _TRISC3	set	1083
   593  043C                     _TRISC4	set	1084
   594  010D                     _EEADR	set	269
   595  010C                     _EEDATA	set	268
   596  018C                     _EECON1	set	396
   597  018D                     _EECON2	set	397
   598  0C60                     _RD	set	3168
   599  0C61                     _WR	set	3169
   600  0C62                     _WREN	set	3170
   601  0822                     STR_1:	
   602  0822  340A               	retlw	10
   603  0823  340D               	retlw	13
   604  0824  3454               	retlw	84	;'T'
   605  0825  3465               	retlw	101	;'e'
   606  0826  3473               	retlw	115	;'s'
   607  0827  3474               	retlw	116	;'t'
   608  0828  3420               	retlw	32	;' '
   609  0829  346D               	retlw	109	;'m'
   610  082A  3465               	retlw	101	;'e'
   611  082B  346E               	retlw	110	;'n'
   612  082C  3475               	retlw	117	;'u'
   613  082D  3420               	retlw	32	;' '
   614  082E  3455               	retlw	85	;'U'
   615  082F  3474               	retlw	116	;'t'
   616  0830  3472               	retlw	114	;'r'
   617  0831  3461               	retlw	97	;'a'
   618  0832  3420               	retlw	32	;' '
   619  0833  3478               	retlw	120	;'x'
   620  0834  3435               	retlw	53	;'5'
   621  0835  3431               	retlw	49	;'1'
   622  0836  3420               	retlw	32	;' '
   623  0837  3476               	retlw	118	;'v'
   624  0838  3431               	retlw	49	;'1'
   625  0839  342E               	retlw	46	;'.'
   626  083A  3431               	retlw	49	;'1'
   627  083B  340D               	retlw	13
   628  083C  340A               	retlw	10
   629  083D  3420               	retlw	32	;' '
   630  083E  3431               	retlw	49	;'1'
   631  083F  343A               	retlw	58	;':'
   632  0840  3447               	retlw	71	;'G'
   633  0841  3450               	retlw	80	;'P'
   634  0842  3449               	retlw	73	;'I'
   635  0843  344F               	retlw	79	;'O'
   636  0844  3420               	retlw	32	;' '
   637  0845  3442               	retlw	66	;'B'
   638  0846  346C               	retlw	108	;'l'
   639  0847  3469               	retlw	105	;'i'
   640  0848  346E               	retlw	110	;'n'
   641  0849  346B               	retlw	107	;'k'
   642  084A  340D               	retlw	13
   643  084B  340A               	retlw	10
   644  084C  3420               	retlw	32	;' '
   645  084D  3432               	retlw	50	;'2'
   646  084E  343A               	retlw	58	;':'
   647  084F  344C               	retlw	76	;'L'
   648  0850  3443               	retlw	67	;'C'
   649  0851  3444               	retlw	68	;'D'
   650  0852  3420               	retlw	32	;' '
   651  0853  3438               	retlw	56	;'8'
   652  0854  342D               	retlw	45	;'-'
   653  0855  3462               	retlw	98	;'b'
   654  0856  3469               	retlw	105	;'i'
   655  0857  3474               	retlw	116	;'t'
   656  0858  3420               	retlw	32	;' '
   657  0859  340A               	retlw	10
   658  085A  340D               	retlw	13
   659  085B  3420               	retlw	32	;' '
   660  085C  3433               	retlw	51	;'3'
   661  085D  343A               	retlw	58	;':'
   662  085E  344C               	retlw	76	;'L'
   663  085F  3443               	retlw	67	;'C'
   664  0860  3444               	retlw	68	;'D'
   665  0861  3420               	retlw	32	;' '
   666  0862  3434               	retlw	52	;'4'
   667  0863  342D               	retlw	45	;'-'
   668  0864  3462               	retlw	98	;'b'
   669  0865  3469               	retlw	105	;'i'
   670  0866  3474               	retlw	116	;'t'
   671  0867  340A               	retlw	10
   672  0868  340D               	retlw	13
   673  0869  3420               	retlw	32	;' '
   674  086A  3434               	retlw	52	;'4'
   675  086B  343A               	retlw	58	;':'
   676  086C  3437               	retlw	55	;'7'
   677  086D  342D               	retlw	45	;'-'
   678  086E  3453               	retlw	83	;'S'
   679  086F  3465               	retlw	101	;'e'
   680  0870  3467               	retlw	103	;'g'
   681  0871  346D               	retlw	109	;'m'
   682  0872  3465               	retlw	101	;'e'
   683  0873  346E               	retlw	110	;'n'
   684  0874  3474               	retlw	116	;'t'
   685  0875  340A               	retlw	10
   686  0876  340D               	retlw	13
   687  0877  3420               	retlw	32	;' '
   688  0878  3435               	retlw	53	;'5'
   689  0879  343A               	retlw	58	;':'
   690  087A  3452               	retlw	82	;'R'
   691  087B  3454               	retlw	84	;'T'
   692  087C  3443               	retlw	67	;'C'
   693  087D  340A               	retlw	10
   694  087E  340D               	retlw	13
   695  087F  3420               	retlw	32	;' '
   696  0880  3436               	retlw	54	;'6'
   697  0881  343A               	retlw	58	;':'
   698  0882  3445               	retlw	69	;'E'
   699  0883  3445               	retlw	69	;'E'
   700  0884  3450               	retlw	80	;'P'
   701  0885  3452               	retlw	82	;'R'
   702  0886  344F               	retlw	79	;'O'
   703  0887  344D               	retlw	77	;'M'
   704  0888  340A               	retlw	10
   705  0889  340D               	retlw	13
   706  088A  3420               	retlw	32	;' '
   707  088B  3437               	retlw	55	;'7'
   708  088C  343A               	retlw	58	;':'
   709  088D  3441               	retlw	65	;'A'
   710  088E  3444               	retlw	68	;'D'
   711  088F  3443               	retlw	67	;'C'
   712  0890  340A               	retlw	10
   713  0891  340D               	retlw	13
   714  0892  3420               	retlw	32	;' '
   715  0893  3438               	retlw	56	;'8'
   716  0894  343A               	retlw	58	;':'
   717  0895  344B               	retlw	75	;'K'
   718  0896  3465               	retlw	101	;'e'
   719  0897  3479               	retlw	121	;'y'
   720  0898  3470               	retlw	112	;'p'
   721  0899  3461               	retlw	97	;'a'
   722  089A  3464               	retlw	100	;'d'
   723  089B  3420               	retlw	32	;' '
   724  089C  340A               	retlw	10
   725  089D  340D               	retlw	13
   726  089E  3420               	retlw	32	;' '
   727  089F  3445               	retlw	69	;'E'
   728  08A0  346E               	retlw	110	;'n'
   729  08A1  3474               	retlw	116	;'t'
   730  08A2  3465               	retlw	101	;'e'
   731  08A3  3472               	retlw	114	;'r'
   732  08A4  3420               	retlw	32	;' '
   733  08A5  346F               	retlw	111	;'o'
   734  08A6  3470               	retlw	112	;'p'
   735  08A7  3474               	retlw	116	;'t'
   736  08A8  3469               	retlw	105	;'i'
   737  08A9  346F               	retlw	111	;'o'
   738  08AA  346E               	retlw	110	;'n'
   739  08AB  343A               	retlw	58	;':'
   740  08AC  3400               	retlw	0
   741  08AD                     STR_13:	
   742  08AD  340A               	retlw	10
   743  08AE  340D               	retlw	13
   744  08AF  3420               	retlw	32	;' '
   745  08B0  3453               	retlw	83	;'S'
   746  08B1  3465               	retlw	101	;'e'
   747  08B2  3467               	retlw	103	;'g'
   748  08B3  346D               	retlw	109	;'m'
   749  08B4  3465               	retlw	101	;'e'
   750  08B5  346E               	retlw	110	;'n'
   751  08B6  3474               	retlw	116	;'t'
   752  08B7  3420               	retlw	32	;' '
   753  08B8  3444               	retlw	68	;'D'
   754  08B9  3461               	retlw	97	;'a'
   755  08BA  3474               	retlw	116	;'t'
   756  08BB  3461               	retlw	97	;'a'
   757  08BC  3442               	retlw	66	;'B'
   758  08BD  3475               	retlw	117	;'u'
   759  08BE  3473               	retlw	115	;'s'
   760  08BF  343A               	retlw	58	;':'
   761  08C0  3420               	retlw	32	;' '
   762  08C1  3450               	retlw	80	;'P'
   763  08C2  3444               	retlw	68	;'D'
   764  08C3  3420               	retlw	32	;' '
   765  08C4  3453               	retlw	83	;'S'
   766  08C5  3465               	retlw	101	;'e'
   767  08C6  3467               	retlw	103	;'g'
   768  08C7  3420               	retlw	32	;' '
   769  08C8  3473               	retlw	115	;'s'
   770  08C9  3465               	retlw	101	;'e'
   771  08CA  346C               	retlw	108	;'l'
   772  08CB  3465               	retlw	101	;'e'
   773  08CC  3463               	retlw	99	;'c'
   774  08CD  3474               	retlw	116	;'t'
   775  08CE  343A               	retlw	58	;':'
   776  08CF  3420               	retlw	32	;' '
   777  08D0  3453               	retlw	83	;'S'
   778  08D1  3431               	retlw	49	;'1'
   779  08D2  342D               	retlw	45	;'-'
   780  08D3  343E               	retlw	62	;'>'
   781  08D4  3450               	retlw	80	;'P'
   782  08D5  3442               	retlw	66	;'B'
   783  08D6  342E               	retlw	46	;'.'
   784  08D7  3430               	retlw	48	;'0'
   785  08D8  3420               	retlw	32	;' '
   786  08D9  3453               	retlw	83	;'S'
   787  08DA  3432               	retlw	50	;'2'
   788  08DB  342D               	retlw	45	;'-'
   789  08DC  343E               	retlw	62	;'>'
   790  08DD  3450               	retlw	80	;'P'
   791  08DE  3442               	retlw	66	;'B'
   792  08DF  342E               	retlw	46	;'.'
   793  08E0  3431               	retlw	49	;'1'
   794  08E1  3420               	retlw	32	;' '
   795  08E2  3453               	retlw	83	;'S'
   796  08E3  3433               	retlw	51	;'3'
   797  08E4  342D               	retlw	45	;'-'
   798  08E5  343E               	retlw	62	;'>'
   799  08E6  3450               	retlw	80	;'P'
   800  08E7  3442               	retlw	66	;'B'
   801  08E8  342E               	retlw	46	;'.'
   802  08E9  3432               	retlw	50	;'2'
   803  08EA  3420               	retlw	32	;' '
   804  08EB  3453               	retlw	83	;'S'
   805  08EC  3434               	retlw	52	;'4'
   806  08ED  342D               	retlw	45	;'-'
   807  08EE  343E               	retlw	62	;'>'
   808  08EF  3450               	retlw	80	;'P'
   809  08F0  3442               	retlw	66	;'B'
   810  08F1  342E               	retlw	46	;'.'
   811  08F2  3434               	retlw	52	;'4'
   812  08F3  3420               	retlw	32	;' '
   813  08F4  3420               	retlw	32	;' '
   814  08F5  3400               	retlw	0
   815  08F6                     STR_9:	
   816  08F6  340A               	retlw	10
   817  08F7  340D               	retlw	13
   818  08F8  3420               	retlw	32	;' '
   819  08F9  344C               	retlw	76	;'L'
   820  08FA  3443               	retlw	67	;'C'
   821  08FB  3444               	retlw	68	;'D'
   822  08FC  3420               	retlw	32	;' '
   823  08FD  3444               	retlw	68	;'D'
   824  08FE  3461               	retlw	97	;'a'
   825  08FF  3474               	retlw	116	;'t'
   826  0900  3461               	retlw	97	;'a'
   827  0901  3442               	retlw	66	;'B'
   828  0902  3475               	retlw	117	;'u'
   829  0903  3473               	retlw	115	;'s'
   830  0904  343A               	retlw	58	;':'
   831  0905  3420               	retlw	32	;' '
   832  0906  3450               	retlw	80	;'P'
   833  0907  3444               	retlw	68	;'D'
   834  0908  3420               	retlw	32	;' '
   835  0909  344D               	retlw	77	;'M'
   836  090A  3473               	retlw	115	;'s'
   837  090B  3462               	retlw	98	;'b'
   838  090C  3420               	retlw	32	;' '
   839  090D  3462               	retlw	98	;'b'
   840  090E  3469               	retlw	105	;'i'
   841  090F  3474               	retlw	116	;'t'
   842  0910  3473               	retlw	115	;'s'
   843  0911  3428               	retlw	40	;'('
   844  0912  3450               	retlw	80	;'P'
   845  0913  3444               	retlw	68	;'D'
   846  0914  3434               	retlw	52	;'4'
   847  0915  342D               	retlw	45	;'-'
   848  0916  3450               	retlw	80	;'P'
   849  0917  3444               	retlw	68	;'D'
   850  0918  3437               	retlw	55	;'7'
   851  0919  3429               	retlw	41	;')'
   852  091A  3420               	retlw	32	;' '
   853  091B  3443               	retlw	67	;'C'
   854  091C  346F               	retlw	111	;'o'
   855  091D  346E               	retlw	110	;'n'
   856  091E  3474               	retlw	116	;'t'
   857  091F  3472               	retlw	114	;'r'
   858  0920  346F               	retlw	111	;'o'
   859  0921  346C               	retlw	108	;'l'
   860  0922  343A               	retlw	58	;':'
   861  0923  3420               	retlw	32	;' '
   862  0924  3452               	retlw	82	;'R'
   863  0925  3453               	retlw	83	;'S'
   864  0926  342D               	retlw	45	;'-'
   865  0927  3450               	retlw	80	;'P'
   866  0928  3442               	retlw	66	;'B'
   867  0929  342E               	retlw	46	;'.'
   868  092A  3430               	retlw	48	;'0'
   869  092B  3420               	retlw	32	;' '
   870  092C  3452               	retlw	82	;'R'
   871  092D  3457               	retlw	87	;'W'
   872  092E  342D               	retlw	45	;'-'
   873  092F  3450               	retlw	80	;'P'
   874  0930  3442               	retlw	66	;'B'
   875  0931  342E               	retlw	46	;'.'
   876  0932  3431               	retlw	49	;'1'
   877  0933  3420               	retlw	32	;' '
   878  0934  3445               	retlw	69	;'E'
   879  0935  344E               	retlw	78	;'N'
   880  0936  342D               	retlw	45	;'-'
   881  0937  3450               	retlw	80	;'P'
   882  0938  3442               	retlw	66	;'B'
   883  0939  342E               	retlw	46	;'.'
   884  093A  3432               	retlw	50	;'2'
   885  093B  3420               	retlw	32	;' '
   886  093C  3400               	retlw	0
   887  093D                     STR_5:	
   888  093D  340A               	retlw	10
   889  093E  340D               	retlw	13
   890  093F  3420               	retlw	32	;' '
   891  0940  344C               	retlw	76	;'L'
   892  0941  3443               	retlw	67	;'C'
   893  0942  3444               	retlw	68	;'D'
   894  0943  3420               	retlw	32	;' '
   895  0944  3444               	retlw	68	;'D'
   896  0945  3461               	retlw	97	;'a'
   897  0946  3474               	retlw	116	;'t'
   898  0947  3461               	retlw	97	;'a'
   899  0948  3442               	retlw	66	;'B'
   900  0949  3475               	retlw	117	;'u'
   901  094A  3473               	retlw	115	;'s'
   902  094B  343A               	retlw	58	;':'
   903  094C  3420               	retlw	32	;' '
   904  094D  3450               	retlw	80	;'P'
   905  094E  3444               	retlw	68	;'D'
   906  094F  3420               	retlw	32	;' '
   907  0950  3443               	retlw	67	;'C'
   908  0951  346F               	retlw	111	;'o'
   909  0952  346E               	retlw	110	;'n'
   910  0953  3474               	retlw	116	;'t'
   911  0954  3472               	retlw	114	;'r'
   912  0955  346F               	retlw	111	;'o'
   913  0956  346C               	retlw	108	;'l'
   914  0957  343A               	retlw	58	;':'
   915  0958  3420               	retlw	32	;' '
   916  0959  3452               	retlw	82	;'R'
   917  095A  3453               	retlw	83	;'S'
   918  095B  342D               	retlw	45	;'-'
   919  095C  3450               	retlw	80	;'P'
   920  095D  3442               	retlw	66	;'B'
   921  095E  342E               	retlw	46	;'.'
   922  095F  3430               	retlw	48	;'0'
   923  0960  3420               	retlw	32	;' '
   924  0961  3452               	retlw	82	;'R'
   925  0962  3457               	retlw	87	;'W'
   926  0963  342D               	retlw	45	;'-'
   927  0964  3450               	retlw	80	;'P'
   928  0965  3442               	retlw	66	;'B'
   929  0966  342E               	retlw	46	;'.'
   930  0967  3431               	retlw	49	;'1'
   931  0968  3420               	retlw	32	;' '
   932  0969  3445               	retlw	69	;'E'
   933  096A  344E               	retlw	78	;'N'
   934  096B  342D               	retlw	45	;'-'
   935  096C  3450               	retlw	80	;'P'
   936  096D  3442               	retlw	66	;'B'
   937  096E  342E               	retlw	46	;'.'
   938  096F  3432               	retlw	50	;'2'
   939  0970  3420               	retlw	32	;' '
   940  0971  3400               	retlw	0
   941  0972                     STR_3:	
   942  0972  340A               	retlw	10
   943  0973  340D               	retlw	13
   944  0974  3443               	retlw	67	;'C'
   945  0975  346F               	retlw	111	;'o'
   946  0976  346E               	retlw	110	;'n'
   947  0977  346E               	retlw	110	;'n'
   948  0978  3465               	retlw	101	;'e'
   949  0979  3463               	retlw	99	;'c'
   950  097A  3474               	retlw	116	;'t'
   951  097B  3420               	retlw	32	;' '
   952  097C  3461               	retlw	97	;'a'
   953  097D  346E               	retlw	110	;'n'
   954  097E  3479               	retlw	121	;'y'
   955  097F  3420               	retlw	32	;' '
   956  0980  3449               	retlw	73	;'I'
   957  0981  344F               	retlw	79	;'O'
   958  0982  3420               	retlw	32	;' '
   959  0983  3450               	retlw	80	;'P'
   960  0984  3469               	retlw	105	;'i'
   961  0985  346E               	retlw	110	;'n'
   962  0986  3473               	retlw	115	;'s'
   963  0987  3420               	retlw	32	;' '
   964  0988  3474               	retlw	116	;'t'
   965  0989  346F               	retlw	111	;'o'
   966  098A  3420               	retlw	32	;' '
   967  098B  3462               	retlw	98	;'b'
   968  098C  3475               	retlw	117	;'u'
   969  098D  347A               	retlw	122	;'z'
   970  098E  347A               	retlw	122	;'z'
   971  098F  3465               	retlw	101	;'e'
   972  0990  3472               	retlw	114	;'r'
   973  0991  342C               	retlw	44	;','
   974  0992  3420               	retlw	32	;' '
   975  0993  3472               	retlw	114	;'r'
   976  0994  3465               	retlw	101	;'e'
   977  0995  346C               	retlw	108	;'l'
   978  0996  3461               	retlw	97	;'a'
   979  0997  3479               	retlw	121	;'y'
   980  0998  3473               	retlw	115	;'s'
   981  0999  342C               	retlw	44	;','
   982  099A  3420               	retlw	32	;' '
   983  099B  346C               	retlw	108	;'l'
   984  099C  3465               	retlw	101	;'e'
   985  099D  3464               	retlw	100	;'d'
   986  099E  3473               	retlw	115	;'s'
   987  099F  3420               	retlw	32	;' '
   988  09A0  3400               	retlw	0
   989  09A1                     STR_16:	
   990  09A1  340A               	retlw	10
   991  09A2  340D               	retlw	13
   992  09A3  3420               	retlw	32	;' '
   993  09A4  344D               	retlw	77	;'M'
   994  09A5  3461               	retlw	97	;'a'
   995  09A6  346B               	retlw	107	;'k'
   996  09A7  3465               	retlw	101	;'e'
   997  09A8  3420               	retlw	32	;' '
   998  09A9  3463               	retlw	99	;'c'
   999  09AA  346F               	retlw	111	;'o'
  1000  09AB  346E               	retlw	110	;'n'
  1001  09AC  346E               	retlw	110	;'n'
  1002  09AD  3465               	retlw	101	;'e'
  1003  09AE  3463               	retlw	99	;'c'
  1004  09AF  3474               	retlw	116	;'t'
  1005  09B0  3469               	retlw	105	;'i'
  1006  09B1  346F               	retlw	111	;'o'
  1007  09B2  346E               	retlw	110	;'n'
  1008  09B3  3473               	retlw	115	;'s'
  1009  09B4  3420               	retlw	32	;' '
  1010  09B5  3461               	retlw	97	;'a'
  1011  09B6  346E               	retlw	110	;'n'
  1012  09B7  3464               	retlw	100	;'d'
  1013  09B8  3420               	retlw	32	;' '
  1014  09B9  3468               	retlw	104	;'h'
  1015  09BA  3469               	retlw	105	;'i'
  1016  09BB  3474               	retlw	116	;'t'
  1017  09BC  3420               	retlw	32	;' '
  1018  09BD  3427               	retlw	39	;'''
  1019  09BE  346B               	retlw	107	;'k'
  1020  09BF  3427               	retlw	39	;'''
  1021  09C0  3420               	retlw	32	;' '
  1022  09C1  3474               	retlw	116	;'t'
  1023  09C2  346F               	retlw	111	;'o'
  1024  09C3  3420               	retlw	32	;' '
  1025  09C4  3474               	retlw	116	;'t'
  1026  09C5  3465               	retlw	101	;'e'
  1027  09C6  3473               	retlw	115	;'s'
  1028  09C7  3474               	retlw	116	;'t'
  1029  09C8  3421               	retlw	33	;'!'
  1030  09C9  3420               	retlw	32	;' '
  1031  09CA  3400               	retlw	0
  1032  09CB                     STR_14:	
  1033  09CB  340A               	retlw	10
  1034  09CC  340D               	retlw	13
  1035  09CD  344D               	retlw	77	;'M'
  1036  09CE  3461               	retlw	97	;'a'
  1037  09CF  346B               	retlw	107	;'k'
  1038  09D0  3465               	retlw	101	;'e'
  1039  09D1  3420               	retlw	32	;' '
  1040  09D2  3463               	retlw	99	;'c'
  1041  09D3  346F               	retlw	111	;'o'
  1042  09D4  346E               	retlw	110	;'n'
  1043  09D5  346E               	retlw	110	;'n'
  1044  09D6  3465               	retlw	101	;'e'
  1045  09D7  3463               	retlw	99	;'c'
  1046  09D8  3474               	retlw	116	;'t'
  1047  09D9  3469               	retlw	105	;'i'
  1048  09DA  346F               	retlw	111	;'o'
  1049  09DB  346E               	retlw	110	;'n'
  1050  09DC  3473               	retlw	115	;'s'
  1051  09DD  3420               	retlw	32	;' '
  1052  09DE  3461               	retlw	97	;'a'
  1053  09DF  346E               	retlw	110	;'n'
  1054  09E0  3464               	retlw	100	;'d'
  1055  09E1  3420               	retlw	32	;' '
  1056  09E2  3468               	retlw	104	;'h'
  1057  09E3  3469               	retlw	105	;'i'
  1058  09E4  3474               	retlw	116	;'t'
  1059  09E5  3420               	retlw	32	;' '
  1060  09E6  3427               	retlw	39	;'''
  1061  09E7  346B               	retlw	107	;'k'
  1062  09E8  3427               	retlw	39	;'''
  1063  09E9  3420               	retlw	32	;' '
  1064  09EA  3474               	retlw	116	;'t'
  1065  09EB  346F               	retlw	111	;'o'
  1066  09EC  3420               	retlw	32	;' '
  1067  09ED  3474               	retlw	116	;'t'
  1068  09EE  3465               	retlw	101	;'e'
  1069  09EF  3473               	retlw	115	;'s'
  1070  09F0  3474               	retlw	116	;'t'
  1071  09F1  3421               	retlw	33	;'!'
  1072  09F2  3420               	retlw	32	;' '
  1073  09F3  3400               	retlw	0
  1074  09F4                     STR_6:	
  1075  09F4  340A               	retlw	10
  1076  09F5  340D               	retlw	13
  1077  09F6  3420               	retlw	32	;' '
  1078  09F7  344D               	retlw	77	;'M'
  1079  09F8  3461               	retlw	97	;'a'
  1080  09F9  346B               	retlw	107	;'k'
  1081  09FA  3465               	retlw	101	;'e'
  1082  09FB  3420               	retlw	32	;' '
  1083  09FC  3463               	retlw	99	;'c'
  1084  09FD  346F               	retlw	111	;'o'
  1085  09FE  346E               	retlw	110	;'n'
  1086  09FF  346E               	retlw	110	;'n'
  1087  0A00  3465               	retlw	101	;'e'
  1088  0A01  3463               	retlw	99	;'c'
  1089  0A02  3474               	retlw	116	;'t'
  1090  0A03  3469               	retlw	105	;'i'
  1091  0A04  346F               	retlw	111	;'o'
  1092  0A05  346E               	retlw	110	;'n'
  1093  0A06  3473               	retlw	115	;'s'
  1094  0A07  3420               	retlw	32	;' '
  1095  0A08  3461               	retlw	97	;'a'
  1096  0A09  346E               	retlw	110	;'n'
  1097  0A0A  3464               	retlw	100	;'d'
  1098  0A0B  3420               	retlw	32	;' '
  1099  0A0C  3468               	retlw	104	;'h'
  1100  0A0D  3469               	retlw	105	;'i'
  1101  0A0E  3474               	retlw	116	;'t'
  1102  0A0F  3420               	retlw	32	;' '
  1103  0A10  3427               	retlw	39	;'''
  1104  0A11  346B               	retlw	107	;'k'
  1105  0A12  3427               	retlw	39	;'''
  1106  0A13  3420               	retlw	32	;' '
  1107  0A14  3474               	retlw	116	;'t'
  1108  0A15  346F               	retlw	111	;'o'
  1109  0A16  3420               	retlw	32	;' '
  1110  0A17  3474               	retlw	116	;'t'
  1111  0A18  3465               	retlw	101	;'e'
  1112  0A19  3473               	retlw	115	;'s'
  1113  0A1A  3474               	retlw	116	;'t'
  1114  0A1B  3420               	retlw	32	;' '
  1115  0A1C  3400               	retlw	0
  1116  0A1D                     STR_4:	
  1117  0A1D  340A               	retlw	10
  1118  0A1E  340D               	retlw	13
  1119  0A1F  344D               	retlw	77	;'M'
  1120  0A20  3461               	retlw	97	;'a'
  1121  0A21  346B               	retlw	107	;'k'
  1122  0A22  3465               	retlw	101	;'e'
  1123  0A23  3420               	retlw	32	;' '
  1124  0A24  3463               	retlw	99	;'c'
  1125  0A25  346F               	retlw	111	;'o'
  1126  0A26  346E               	retlw	110	;'n'
  1127  0A27  346E               	retlw	110	;'n'
  1128  0A28  3465               	retlw	101	;'e'
  1129  0A29  3463               	retlw	99	;'c'
  1130  0A2A  3474               	retlw	116	;'t'
  1131  0A2B  3469               	retlw	105	;'i'
  1132  0A2C  346F               	retlw	111	;'o'
  1133  0A2D  346E               	retlw	110	;'n'
  1134  0A2E  3473               	retlw	115	;'s'
  1135  0A2F  3420               	retlw	32	;' '
  1136  0A30  3461               	retlw	97	;'a'
  1137  0A31  346E               	retlw	110	;'n'
  1138  0A32  3464               	retlw	100	;'d'
  1139  0A33  3420               	retlw	32	;' '
  1140  0A34  3468               	retlw	104	;'h'
  1141  0A35  3469               	retlw	105	;'i'
  1142  0A36  3474               	retlw	116	;'t'
  1143  0A37  3420               	retlw	32	;' '
  1144  0A38  3427               	retlw	39	;'''
  1145  0A39  346B               	retlw	107	;'k'
  1146  0A3A  3427               	retlw	39	;'''
  1147  0A3B  3420               	retlw	32	;' '
  1148  0A3C  3474               	retlw	116	;'t'
  1149  0A3D  346F               	retlw	111	;'o'
  1150  0A3E  3420               	retlw	32	;' '
  1151  0A3F  3474               	retlw	116	;'t'
  1152  0A40  3465               	retlw	101	;'e'
  1153  0A41  3473               	retlw	115	;'s'
  1154  0A42  3474               	retlw	116	;'t'
  1155  0A43  3420               	retlw	32	;' '
  1156  0A44  3400               	retlw	0
  1157  0A45                     STR_22:	
  1158  0A45  340A               	retlw	10
  1159  0A46  340D               	retlw	13
  1160  0A47  344D               	retlw	77	;'M'
  1161  0A48  3461               	retlw	97	;'a'
  1162  0A49  346B               	retlw	107	;'k'
  1163  0A4A  3465               	retlw	101	;'e'
  1164  0A4B  3420               	retlw	32	;' '
  1165  0A4C  3463               	retlw	99	;'c'
  1166  0A4D  346F               	retlw	111	;'o'
  1167  0A4E  346E               	retlw	110	;'n'
  1168  0A4F  346E               	retlw	110	;'n'
  1169  0A50  3465               	retlw	101	;'e'
  1170  0A51  3463               	retlw	99	;'c'
  1171  0A52  3474               	retlw	116	;'t'
  1172  0A53  3469               	retlw	105	;'i'
  1173  0A54  346F               	retlw	111	;'o'
  1174  0A55  346E               	retlw	110	;'n'
  1175  0A56  3473               	retlw	115	;'s'
  1176  0A57  3420               	retlw	32	;' '
  1177  0A58  3461               	retlw	97	;'a'
  1178  0A59  346E               	retlw	110	;'n'
  1179  0A5A  3464               	retlw	100	;'d'
  1180  0A5B  3420               	retlw	32	;' '
  1181  0A5C  3468               	retlw	104	;'h'
  1182  0A5D  3469               	retlw	105	;'i'
  1183  0A5E  3474               	retlw	116	;'t'
  1184  0A5F  3420               	retlw	32	;' '
  1185  0A60  3427               	retlw	39	;'''
  1186  0A61  346B               	retlw	107	;'k'
  1187  0A62  3427               	retlw	39	;'''
  1188  0A63  3420               	retlw	32	;' '
  1189  0A64  3474               	retlw	116	;'t'
  1190  0A65  346F               	retlw	111	;'o'
  1191  0A66  3420               	retlw	32	;' '
  1192  0A67  3474               	retlw	116	;'t'
  1193  0A68  3465               	retlw	101	;'e'
  1194  0A69  3473               	retlw	115	;'s'
  1195  0A6A  3474               	retlw	116	;'t'
  1196  0A6B  3421               	retlw	33	;'!'
  1197  0A6C  3400               	retlw	0
  1198  0A6D                     STR_17:	
  1199  0A6D  340A               	retlw	10
  1200  0A6E  340D               	retlw	13
  1201  0A6F  3474               	retlw	116	;'t'
  1202  0A70  3469               	retlw	105	;'i'
  1203  0A71  346D               	retlw	109	;'m'
  1204  0A72  3465               	retlw	101	;'e'
  1205  0A73  343A               	retlw	58	;':'
  1206  0A74  3425               	retlw	37	;'%'
  1207  0A75  3432               	retlw	50	;'2'
  1208  0A76  3478               	retlw	120	;'x'
  1209  0A77  343A               	retlw	58	;':'
  1210  0A78  3425               	retlw	37	;'%'
  1211  0A79  3432               	retlw	50	;'2'
  1212  0A7A  3478               	retlw	120	;'x'
  1213  0A7B  343A               	retlw	58	;':'
  1214  0A7C  3425               	retlw	37	;'%'
  1215  0A7D  3432               	retlw	50	;'2'
  1216  0A7E  3478               	retlw	120	;'x'
  1217  0A7F  3420               	retlw	32	;' '
  1218  0A80  3420               	retlw	32	;' '
  1219  0A81  340A               	retlw	10
  1220  0A82  3444               	retlw	68	;'D'
  1221  0A83  3461               	retlw	97	;'a'
  1222  0A84  3474               	retlw	116	;'t'
  1223  0A85  3465               	retlw	101	;'e'
  1224  0A86  343A               	retlw	58	;':'
  1225  0A87  3425               	retlw	37	;'%'
  1226  0A88  3432               	retlw	50	;'2'
  1227  0A89  3478               	retlw	120	;'x'
  1228  0A8A  342F               	retlw	47	;'/'
  1229  0A8B  3425               	retlw	37	;'%'
  1230  0A8C  3432               	retlw	50	;'2'
  1231  0A8D  3478               	retlw	120	;'x'
  1232  0A8E  342F               	retlw	47	;'/'
  1233  0A8F  3425               	retlw	37	;'%'
  1234  0A90  3432               	retlw	50	;'2'
  1235  0A91  3478               	retlw	120	;'x'
  1236  0A92  3400               	retlw	0
  1237  0A93                     STR_2:	
  1238  0A93  340A               	retlw	10
  1239  0A94  340D               	retlw	13
  1240  0A95  3452               	retlw	82	;'R'
  1241  0A96  3465               	retlw	101	;'e'
  1242  0A97  3473               	retlw	115	;'s'
  1243  0A98  3465               	retlw	101	;'e'
  1244  0A99  3474               	retlw	116	;'t'
  1245  0A9A  3420               	retlw	32	;' '
  1246  0A9B  3474               	retlw	116	;'t'
  1247  0A9C  3468               	retlw	104	;'h'
  1248  0A9D  3465               	retlw	101	;'e'
  1249  0A9E  3420               	retlw	32	;' '
  1250  0A9F  3462               	retlw	98	;'b'
  1251  0AA0  346F               	retlw	111	;'o'
  1252  0AA1  3461               	retlw	97	;'a'
  1253  0AA2  3472               	retlw	114	;'r'
  1254  0AA3  3464               	retlw	100	;'d'
  1255  0AA4  3420               	retlw	32	;' '
  1256  0AA5  3461               	retlw	97	;'a'
  1257  0AA6  3466               	retlw	102	;'f'
  1258  0AA7  3474               	retlw	116	;'t'
  1259  0AA8  3465               	retlw	101	;'e'
  1260  0AA9  3472               	retlw	114	;'r'
  1261  0AAA  3420               	retlw	32	;' '
  1262  0AAB  3474               	retlw	116	;'t'
  1263  0AAC  3465               	retlw	101	;'e'
  1264  0AAD  3473               	retlw	115	;'s'
  1265  0AAE  3474               	retlw	116	;'t'
  1266  0AAF  3420               	retlw	32	;' '
  1267  0AB0  3469               	retlw	105	;'i'
  1268  0AB1  3473               	retlw	115	;'s'
  1269  0AB2  3420               	retlw	32	;' '
  1270  0AB3  3464               	retlw	100	;'d'
  1271  0AB4  346F               	retlw	111	;'o'
  1272  0AB5  346E               	retlw	110	;'n'
  1273  0AB6  3465               	retlw	101	;'e'
  1274  0AB7  3400               	retlw	0
  1275  0AB8                     STR_15:	
  1276  0AB8  340A               	retlw	10
  1277  0AB9  340D               	retlw	13
  1278  0ABA  3443               	retlw	67	;'C'
  1279  0ABB  346F               	retlw	111	;'o'
  1280  0ABC  346E               	retlw	110	;'n'
  1281  0ABD  346E               	retlw	110	;'n'
  1282  0ABE  3465               	retlw	101	;'e'
  1283  0ABF  3463               	retlw	99	;'c'
  1284  0AC0  3474               	retlw	116	;'t'
  1285  0AC1  3469               	retlw	105	;'i'
  1286  0AC2  346F               	retlw	111	;'o'
  1287  0AC3  346E               	retlw	110	;'n'
  1288  0AC4  3473               	retlw	115	;'s'
  1289  0AC5  3420               	retlw	32	;' '
  1290  0AC6  3453               	retlw	83	;'S'
  1291  0AC7  3443               	retlw	67	;'C'
  1292  0AC8  344C               	retlw	76	;'L'
  1293  0AC9  342D               	retlw	45	;'-'
  1294  0ACA  343E               	retlw	62	;'>'
  1295  0ACB  3450               	retlw	80	;'P'
  1296  0ACC  3443               	retlw	67	;'C'
  1297  0ACD  342E               	retlw	46	;'.'
  1298  0ACE  3433               	retlw	51	;'3'
  1299  0ACF  3420               	retlw	32	;' '
  1300  0AD0  3453               	retlw	83	;'S'
  1301  0AD1  3444               	retlw	68	;'D'
  1302  0AD2  3441               	retlw	65	;'A'
  1303  0AD3  342D               	retlw	45	;'-'
  1304  0AD4  343E               	retlw	62	;'>'
  1305  0AD5  3450               	retlw	80	;'P'
  1306  0AD6  3443               	retlw	67	;'C'
  1307  0AD7  342E               	retlw	46	;'.'
  1308  0AD8  3434               	retlw	52	;'4'
  1309  0AD9  3400               	retlw	0
  1310  0ADA                     STR_20:	
  1311  0ADA  340A               	retlw	10
  1312  0ADB  340D               	retlw	13
  1313  0ADC  3474               	retlw	116	;'t'
  1314  0ADD  3465               	retlw	101	;'e'
  1315  0ADE  346D               	retlw	109	;'m'
  1316  0ADF  3470               	retlw	112	;'p'
  1317  0AE0  343A               	retlw	58	;':'
  1318  0AE1  3425               	retlw	37	;'%'
  1319  0AE2  3433               	retlw	51	;'3'
  1320  0AE3  3464               	retlw	100	;'d'
  1321  0AE4  3420               	retlw	32	;' '
  1322  0AE5  3470               	retlw	112	;'p'
  1323  0AE6  346F               	retlw	111	;'o'
  1324  0AE7  3474               	retlw	116	;'t'
  1325  0AE8  343A               	retlw	58	;':'
  1326  0AE9  3425               	retlw	37	;'%'
  1327  0AEA  3434               	retlw	52	;'4'
  1328  0AEB  3464               	retlw	100	;'d'
  1329  0AEC  3420               	retlw	32	;' '
  1330  0AED  346C               	retlw	108	;'l'
  1331  0AEE  3469               	retlw	105	;'i'
  1332  0AEF  3467               	retlw	103	;'g'
  1333  0AF0  3468               	retlw	104	;'h'
  1334  0AF1  3474               	retlw	116	;'t'
  1335  0AF2  343A               	retlw	58	;':'
  1336  0AF3  3425               	retlw	37	;'%'
  1337  0AF4  3434               	retlw	52	;'4'
  1338  0AF5  3464               	retlw	100	;'d'
  1339  0AF6  3400               	retlw	0
  1340  0AF7                     STR_18:	
  1341  0AF7  340A               	retlw	10
  1342  0AF8  340D               	retlw	13
  1343  0AF9  3445               	retlw	69	;'E'
  1344  0AFA  3465               	retlw	101	;'e'
  1345  0AFB  3470               	retlw	112	;'p'
  1346  0AFC  3472               	retlw	114	;'r'
  1347  0AFD  346F               	retlw	111	;'o'
  1348  0AFE  346D               	retlw	109	;'m'
  1349  0AFF  3420               	retlw	32	;' '
  1350  0B00  3457               	retlw	87	;'W'
  1351  0B01  3472               	retlw	114	;'r'
  1352  0B02  3469               	retlw	105	;'i'
  1353  0B03  3474               	retlw	116	;'t'
  1354  0B04  3465               	retlw	101	;'e'
  1355  0B05  343A               	retlw	58	;':'
  1356  0B06  3420               	retlw	32	;' '
  1357  0B07  3425               	retlw	37	;'%'
  1358  0B08  3463               	retlw	99	;'c'
  1359  0B09  3420               	retlw	32	;' '
  1360  0B0A  3420               	retlw	32	;' '
  1361  0B0B  3420               	retlw	32	;' '
  1362  0B0C  3420               	retlw	32	;' '
  1363  0B0D  3400               	retlw	0
  1364  0B0E                     STR_21:	
  1365  0B0E  340A               	retlw	10
  1366  0B0F  340D               	retlw	13
  1367  0B10  3443               	retlw	67	;'C'
  1368  0B11  346F               	retlw	111	;'o'
  1369  0B12  346E               	retlw	110	;'n'
  1370  0B13  346E               	retlw	110	;'n'
  1371  0B14  3465               	retlw	101	;'e'
  1372  0B15  3463               	retlw	99	;'c'
  1373  0B16  3474               	retlw	116	;'t'
  1374  0B17  3469               	retlw	105	;'i'
  1375  0B18  346F               	retlw	111	;'o'
  1376  0B19  346E               	retlw	110	;'n'
  1377  0B1A  3473               	retlw	115	;'s'
  1378  0B1B  343A               	retlw	58	;':'
  1379  0B1C  3420               	retlw	32	;' '
  1380  0B1D  3450               	retlw	80	;'P'
  1381  0B1E  344F               	retlw	79	;'O'
  1382  0B1F  3452               	retlw	82	;'R'
  1383  0B20  3454               	retlw	84	;'T'
  1384  0B21  3444               	retlw	68	;'D'
  1385  0B22  3400               	retlw	0
  1386  0B23                     STR_7:	
  1387  0B23  3445               	retlw	69	;'E'
  1388  0B24  3478               	retlw	120	;'x'
  1389  0B25  3470               	retlw	112	;'p'
  1390  0B26  346C               	retlw	108	;'l'
  1391  0B27  346F               	retlw	111	;'o'
  1392  0B28  3472               	retlw	114	;'r'
  1393  0B29  3465               	retlw	101	;'e'
  1394  0B2A  3420               	retlw	32	;' '
  1395  0B2B  3445               	retlw	69	;'E'
  1396  0B2C  346D               	retlw	109	;'m'
  1397  0B2D  3462               	retlw	98	;'b'
  1398  0B2E  3465               	retlw	101	;'e'
  1399  0B2F  3464               	retlw	100	;'d'
  1400  0B30  3464               	retlw	100	;'d'
  1401  0B31  3465               	retlw	101	;'e'
  1402  0B32  3464               	retlw	100	;'d'
  1403  0B33  3400               	retlw	0
  1404  0B34                     STR_19:	
  1405  0B34  3445               	retlw	69	;'E'
  1406  0B35  3465               	retlw	101	;'e'
  1407  0B36  3470               	retlw	112	;'p'
  1408  0B37  3472               	retlw	114	;'r'
  1409  0B38  346F               	retlw	111	;'o'
  1410  0B39  346D               	retlw	109	;'m'
  1411  0B3A  3420               	retlw	32	;' '
  1412  0B3B  3452               	retlw	82	;'R'
  1413  0B3C  3465               	retlw	101	;'e'
  1414  0B3D  3461               	retlw	97	;'a'
  1415  0B3E  3464               	retlw	100	;'d'
  1416  0B3F  343A               	retlw	58	;':'
  1417  0B40  3420               	retlw	32	;' '
  1418  0B41  3425               	retlw	37	;'%'
  1419  0B42  3463               	retlw	99	;'c'
  1420  0B43  3400               	retlw	0
  1421  0B44                     STR_12:	
  1422  0B44  344C               	retlw	76	;'L'
  1423  0B45  3463               	retlw	99	;'c'
  1424  0B46  3464               	retlw	100	;'d'
  1425  0B47  3420               	retlw	32	;' '
  1426  0B48  3434               	retlw	52	;'4'
  1427  0B49  342D               	retlw	45	;'-'
  1428  0B4A  3462               	retlw	98	;'b'
  1429  0B4B  3469               	retlw	105	;'i'
  1430  0B4C  3474               	retlw	116	;'t'
  1431  0B4D  3420               	retlw	32	;' '
  1432  0B4E  344D               	retlw	77	;'M'
  1433  0B4F  346F               	retlw	111	;'o'
  1434  0B50  3464               	retlw	100	;'d'
  1435  0B51  3465               	retlw	101	;'e'
  1436  0B52  3400               	retlw	0
  1437  0B53                     STR_8:	
  1438  0B53  344C               	retlw	76	;'L'
  1439  0B54  3463               	retlw	99	;'c'
  1440  0B55  3464               	retlw	100	;'d'
  1441  0B56  3420               	retlw	32	;' '
  1442  0B57  3438               	retlw	56	;'8'
  1443  0B58  342D               	retlw	45	;'-'
  1444  0B59  3462               	retlw	98	;'b'
  1445  0B5A  3469               	retlw	105	;'i'
  1446  0B5B  3474               	retlw	116	;'t'
  1447  0B5C  3420               	retlw	32	;' '
  1448  0B5D  344D               	retlw	77	;'M'
  1449  0B5E  346F               	retlw	111	;'o'
  1450  0B5F  3464               	retlw	100	;'d'
  1451  0B60  3465               	retlw	101	;'e'
  1452  0B61  3400               	retlw	0
  1453  0B62                     STR_23:	
  1454  0B62  340A               	retlw	10
  1455  0B63  340D               	retlw	13
  1456  0B64  3420               	retlw	32	;' '
  1457  0B65  344B               	retlw	75	;'K'
  1458  0B66  3465               	retlw	101	;'e'
  1459  0B67  3479               	retlw	121	;'y'
  1460  0B68  343A               	retlw	58	;':'
  1461  0B69  3425               	retlw	37	;'%'
  1462  0B6A  3463               	retlw	99	;'c'
  1463  0B6B  3400               	retlw	0
  1464  09F4                     
  1465                           ; #config settings
  1466  0000                     
  1467                           	psect	cinit
  1468  07E8                     start_initialization:	
  1469  07E8                     __initialization:	
  1470                           
  1471                           ; Clear objects allocated to BANK1
  1472  07E8  1383               	bcf	3,7	;select IRP bank0
  1473  07E9  30A0               	movlw	low __pbssBANK1
  1474  07EA  0084               	movwf	4
  1475  07EB  30B9               	movlw	low (__pbssBANK1+25)
  1476  07EC  160A  118A  229C  120A  118A  	fcall	clear_ram0
  1477                           
  1478                           ; Initialize objects allocated to BANK1
  1479  07F1  30CD               	movlw	low (__pdataBANK1+8)
  1480  07F2  00FD               	movwf	btemp+-1
  1481  07F3  3012               	movlw	high __pidataBANK1
  1482  07F4  00FE               	movwf	btemp
  1483  07F5  30A4               	movlw	low __pidataBANK1
  1484  07F6  00FF               	movwf	btemp+1
  1485  07F7  30C5               	movlw	low __pdataBANK1
  1486  07F8  0084               	movwf	4
  1487  07F9  160A  118A  230F   	fcall	init_ram0
  1488  07FC                     end_of_initialization:	
  1489                           ;End of C runtime variable initialization code
  1490                           
  1491  07FC                     __end_of__initialization:	
  1492  07FC  0183               	clrf	3
  1493  07FD  120A  158A  2E7B   	ljmp	_main	;jump to C main() function
  1494                           
  1495                           	psect	bssBANK1
  1496  00A0                     __pbssBANK1:	
  1497  00A0                     _LCDConfig:	
  1498  00A0                     	ds	14
  1499  00AE                     _A_ColsPins_U8:	
  1500  00AE                     	ds	4
  1501  00B2                     _A_RowsPins_U8:	
  1502  00B2                     	ds	4
  1503  00B6                     _mm_option:	
  1504  00B6                     	ds	1
  1505  00B7                     _v_LcdTrackCursorPos_U8:	
  1506  00B7                     	ds	1
  1507  00B8                     _v_LcdTrackLineNum_U8:	
  1508  00B8                     	ds	1
  1509                           
  1510                           	psect	dataBANK1
  1511  00C5                     __pdataBANK1:	
  1512  00C5                     _ARR_LcdLineNumAddress_U8:	
  1513  00C5                     	ds	4
  1514  00C9                     seg_test@F1296:	
  1515  00C9                     	ds	4
  1516                           
  1517                           	psect	clrtext
  1518  129C                     clear_ram0:	
  1519                           ;	Called with FSR containing the base address, and
  1520                           ;	W with the last address+1
  1521                           
  1522  129C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1523  129D                     clrloop0:	
  1524  129D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1525  129E  0A84               	incf	4,f	;increment pointer
  1526  129F  0604               	xorwf	4,w	;XOR with final address
  1527  12A0  1903               	btfsc	3,2	;have we reached the end yet?
  1528  12A1  3400               	retlw	0	;all done for this memory range, return
  1529  12A2  0604               	xorwf	4,w	;XOR again to restore value
  1530  12A3  2A9D               	goto	clrloop0	;do the next byte
  1531                           
  1532                           	psect	inittext
  1533  130B                     init_fetch0:	
  1534                           ;	Called with low address in FSR and high address in W
  1535                           
  1536  130B  087E               	movf	126,w
  1537  130C  008A               	movwf	10
  1538  130D  087F               	movf	127,w
  1539  130E  0082               	movwf	2
  1540  130F                     init_ram0:	
  1541                           ;Called with:
  1542                           ;	high address of idata address in btemp 
  1543                           ;	low address of idata address in btemp+1 
  1544                           ;	low address of data in FSR
  1545                           ;	high address + 1 of data in btemp-1
  1546                           
  1547  130F  230B  160A  118A   	fcall	init_fetch0
  1548  1312  0080               	movwf	0
  1549  1313  0A84               	incf	4,f
  1550  1314  0804               	movf	4,w
  1551  1315  067D               	xorwf	125,w
  1552  1316  1903               	btfsc	3,2
  1553  1317  3400               	retlw	0
  1554  1318  0AFF               	incf	127,f
  1555  1319  1903               	btfsc	3,2
  1556  131A  0AFE               	incf	126,f
  1557  131B  2B0F               	goto	init_ram0
  1558                           
  1559                           	psect	cstackBANK1
  1560  00B9                     __pcstackBANK1:	
  1561  00B9                     ??_rtc_test:	
  1562                           
  1563                           ; 1 bytes @ 0x0
  1564  00B9                     	ds	12
  1565                           
  1566                           	psect	cstackCOMMON
  1567  0070                     __pcstackCOMMON:	
  1568  0070                     ?_DELAY_us:	
  1569  0070                     ?_eeprom_write:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0070                     ?_i2c_WaitForIdle:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0070                     ??_i2c_WaitForIdle:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0070                     ?_i2c_Ack:	
  1579                           ; 1 bytes @ 0x0
  1580                           
  1581  0070                     ??_i2c_Ack:	
  1582                           ; 1 bytes @ 0x0
  1583                           
  1584  0070                     ?_i2c_NoAck:	
  1585                           ; 1 bytes @ 0x0
  1586                           
  1587  0070                     ??_i2c_NoAck:	
  1588                           ; 1 bytes @ 0x0
  1589                           
  1590  0070                     ?_LCD_CmdWrite:	
  1591                           ; 1 bytes @ 0x0
  1592                           
  1593  0070                     ?_lcd_Reset:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_LCD_Clear:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ?_LCD_GoToLine:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_lcd_BusyCheck:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_lcd_SendLowerNibble:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_lcd_SendHigherNibble:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_lcd_SendCmdSignals:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_lcd_DataWrite:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_lcd_SendDataSignals:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     ?_gpio_test:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_LCD_8bit_test:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_LCD_4bit_test:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_seg_test:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_rtc_test:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_eeprom_test:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_adc_test:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_keypad_test:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ?_ADC_Init:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ??_ADC_Init:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_EEPROM_ReadByte:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_GPIO_PinDirection:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ?_GPIO_PinWrite:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659  0070                     ?_GPIO_PinRead:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ??_GPIO_PinRead:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_I2C_Init:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ??_I2C_Init:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_I2C_Start:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ??_I2C_Start:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_I2C_Stop:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ??_I2C_Stop:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_I2C_Write:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ??_I2C_Write:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     ?_I2C_Read:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692  0070                     ??_I2C_Read:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0070                     ?_keypad_WaitForKeyRelease:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0070                     ?_keypad_WaitForKeyPress:	
  1699                           ; 1 bytes @ 0x0
  1700                           
  1701  0070                     ?_KEYPAD_GetKey:	
  1702                           ; 1 bytes @ 0x0
  1703                           
  1704  0070                     ?_LCD_GoToNextLine:	
  1705                           ; 1 bytes @ 0x0
  1706                           
  1707  0070                     ?_LCD_DisplayChar:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0070                     ?_RTC_Init:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0070                     ?_RTC_SetDateTime:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0070                     ?_RTC_GetDateTime:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0070                     ?_UART_RxChar:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0070                     ??_UART_RxChar:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0070                     ?_UART_TxChar:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0070                     ??_UART_TxChar:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0070                     ?_main:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?___lldiv:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     GPIO_PinDirection@var_pinDirn_u8:	
  1738                           ; 4 bytes @ 0x0
  1739                           
  1740  0070                     GPIO_PinWrite@var_pinValue_u8:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     I2C_Write@v_i2cData_u8:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     UART_TxChar@v_uartData_u8:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     eeprom_write@value:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     DELAY_us@us_count:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     EEPROM_ReadByte@v_eepromAddress_u16:	
  1756                           ; 2 bytes @ 0x0
  1757                           
  1758  0070                     ___lldiv@divisor:	
  1759                           ; 2 bytes @ 0x0
  1760                           
  1761                           
  1762                           ; 4 bytes @ 0x0
  1763  0070                     	ds	1
  1764  0071                     ??_eeprom_write:	
  1765  0071                     ??_GPIO_PinDirection:	
  1766                           ; 1 bytes @ 0x1
  1767                           
  1768  0071                     ??_GPIO_PinWrite:	
  1769                           ; 1 bytes @ 0x1
  1770                           
  1771  0071                     ??_RTC_Init:	
  1772                           ; 1 bytes @ 0x1
  1773                           
  1774  0071                     ??_RTC_SetDateTime:	
  1775                           ; 1 bytes @ 0x1
  1776                           
  1777  0071                     ?_UART_TxString:	
  1778                           ; 1 bytes @ 0x1
  1779                           
  1780  0071                     I2C_Read@v_ackOption_u8:	
  1781                           ; 1 bytes @ 0x1
  1782                           
  1783  0071                     RTC_SetDateTime@rtc:	
  1784                           ; 1 bytes @ 0x1
  1785                           
  1786  0071                     UART_TxString@ptr_string:	
  1787                           ; 1 bytes @ 0x1
  1788                           
  1789                           
  1790                           ; 2 bytes @ 0x1
  1791  0071                     	ds	1
  1792  0072                     ??_DELAY_us:	
  1793  0072                     ?_DELAY_ms:	
  1794                           ; 1 bytes @ 0x2
  1795                           
  1796  0072                     ??_EEPROM_ReadByte:	
  1797                           ; 1 bytes @ 0x2
  1798                           
  1799  0072                     ?_ADC_GetAdcValue:	
  1800                           ; 1 bytes @ 0x2
  1801                           
  1802  0072                     GPIO_PinRead@var_portNumber_u8:	
  1803                           ; 2 bytes @ 0x2
  1804                           
  1805  0072                     I2C_Read@v_i2cData_u8:	
  1806                           ; 1 bytes @ 0x2
  1807                           
  1808  0072                     eeprom_write@addr:	
  1809                           ; 1 bytes @ 0x2
  1810                           
  1811  0072                     DELAY_ms@ms_count:	
  1812                           ; 1 bytes @ 0x2
  1813                           
  1814                           
  1815                           ; 2 bytes @ 0x2
  1816  0072                     	ds	1
  1817  0073                     ?_EEPROM_WriteByte:	
  1818  0073                     ??_RTC_GetDateTime:	
  1819                           ; 1 bytes @ 0x3
  1820                           
  1821  0073                     ??_UART_TxString:	
  1822                           ; 1 bytes @ 0x3
  1823                           
  1824  0073                     GPIO_PinDirection@var_portNumber_u8:	
  1825                           ; 1 bytes @ 0x3
  1826                           
  1827  0073                     GPIO_PinWrite@var_portNumber_u8:	
  1828                           ; 1 bytes @ 0x3
  1829                           
  1830  0073                     GPIO_PinRead@returnStatus:	
  1831                           ; 1 bytes @ 0x3
  1832                           
  1833  0073                     EEPROM_WriteByte@v_eepromAddress_u16:	
  1834                           ; 1 bytes @ 0x3
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x3
  1838  0073                     	ds	1
  1839  0074                     ??_ADC_GetAdcValue:	
  1840  0074                     ??_DELAY_ms:	
  1841                           ; 1 bytes @ 0x4
  1842                           
  1843  0074                     GPIO_PinDirection@enm_pinNumber:	
  1844                           ; 1 bytes @ 0x4
  1845                           
  1846  0074                     GPIO_PinWrite@enm_pinNumber:	
  1847                           ; 1 bytes @ 0x4
  1848                           
  1849  0074                     GPIO_PinRead@enm_pinNumber:	
  1850                           ; 1 bytes @ 0x4
  1851                           
  1852  0074                     RTC_GetDateTime@rtc:	
  1853                           ; 1 bytes @ 0x4
  1854                           
  1855  0074                     ___lldiv@dividend:	
  1856                           ; 1 bytes @ 0x4
  1857                           
  1858                           
  1859                           ; 4 bytes @ 0x4
  1860  0074                     	ds	1
  1861  0075                     ??_lcd_BusyCheck:	
  1862  0075                     ??_lcd_SendLowerNibble:	
  1863                           ; 1 bytes @ 0x5
  1864                           
  1865  0075                     ??_lcd_SendHigherNibble:	
  1866                           ; 1 bytes @ 0x5
  1867                           
  1868  0075                     ??_lcd_SendCmdSignals:	
  1869                           ; 1 bytes @ 0x5
  1870                           
  1871  0075                     ??_lcd_SendDataSignals:	
  1872                           ; 1 bytes @ 0x5
  1873                           
  1874  0075                     ?_KEYPAD_Init:	
  1875                           ; 1 bytes @ 0x5
  1876                           
  1877  0075                     ??_keypad_WaitForKeyRelease:	
  1878                           ; 1 bytes @ 0x5
  1879                           
  1880  0075                     ??_keypad_WaitForKeyPress:	
  1881                           ; 1 bytes @ 0x5
  1882                           
  1883  0075                     ??_LCD_SetUp:	
  1884                           ; 1 bytes @ 0x5
  1885                           
  1886  0075                     ADC_GetAdcValue@var_adcChannel_u8:	
  1887                           ; 1 bytes @ 0x5
  1888                           
  1889  0075                     EEPROM_WriteByte@v_eepromData_u8:	
  1890                           ; 1 bytes @ 0x5
  1891                           
  1892  0075                     KEYPAD_Init@row_1:	
  1893                           ; 1 bytes @ 0x5
  1894                           
  1895                           
  1896                           ; 1 bytes @ 0x5
  1897  0075                     	ds	1
  1898  0076                     ??_EEPROM_WriteByte:	
  1899  0076                     KEYPAD_Init@row_2:	
  1900                           ; 1 bytes @ 0x6
  1901                           
  1902  0076                     keypad_WaitForKeyRelease@v_keyStatus_u8:	
  1903                           ; 1 bytes @ 0x6
  1904                           
  1905  0076                     keypad_WaitForKeyPress@v_keyStatus_u8:	
  1906                           ; 1 bytes @ 0x6
  1907                           
  1908  0076                     LCD_SetUp@RS:	
  1909                           ; 1 bytes @ 0x6
  1910                           
  1911  0076                     lcd_BusyCheck@busyflag:	
  1912                           ; 1 bytes @ 0x6
  1913                           
  1914  0076                     lcd_SendHigherNibble@dataByte:	
  1915                           ; 1 bytes @ 0x6
  1916                           
  1917  0076                     lcd_SendLowerNibble@dataByte:	
  1918                           ; 1 bytes @ 0x6
  1919                           
  1920                           
  1921                           ; 1 bytes @ 0x6
  1922  0076                     	ds	1
  1923  0077                     ??_LCD_CmdWrite:	
  1924  0077                     ??_lcd_Reset:	
  1925                           ; 1 bytes @ 0x7
  1926                           
  1927  0077                     ??_lcd_DataWrite:	
  1928                           ; 1 bytes @ 0x7
  1929                           
  1930  0077                     KEYPAD_Init@row_3:	
  1931                           ; 1 bytes @ 0x7
  1932                           
  1933  0077                     keypad_WaitForKeyRelease@i:	
  1934                           ; 1 bytes @ 0x7
  1935                           
  1936  0077                     keypad_WaitForKeyPress@i:	
  1937                           ; 1 bytes @ 0x7
  1938                           
  1939                           
  1940                           ; 1 bytes @ 0x7
  1941  0077                     	ds	1
  1942  0078                     ??_KEYPAD_GetKey:	
  1943  0078                     ??___lldiv:	
  1944                           ; 1 bytes @ 0x8
  1945                           
  1946  0078                     KEYPAD_Init@col_0:	
  1947                           ; 1 bytes @ 0x8
  1948                           
  1949                           
  1950                           ; 1 bytes @ 0x8
  1951  0078                     	ds	1
  1952  0079                     KEYPAD_Init@col_1:	
  1953  0079                     LCD_CmdWrite@v_lcdCmd_u8:	
  1954                           ; 1 bytes @ 0x9
  1955                           
  1956  0079                     lcd_DataWrite@dataByte:	
  1957                           ; 1 bytes @ 0x9
  1958                           
  1959  0079                     ___lldiv@quotient:	
  1960                           ; 1 bytes @ 0x9
  1961                           
  1962                           
  1963                           ; 4 bytes @ 0x9
  1964  0079                     	ds	1
  1965  007A                     ??_LCD_GoToLine:	
  1966  007A                     ??_LCD_GoToNextLine:	
  1967                           ; 1 bytes @ 0xA
  1968                           
  1969  007A                     KEYPAD_Init@col_2:	
  1970                           ; 1 bytes @ 0xA
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0xA
  1974  007A                     	ds	1
  1975  007B                     ??_LCD_DisplayChar:	
  1976  007B                     KEYPAD_Init@col_3:	
  1977                           ; 1 bytes @ 0xB
  1978                           
  1979  007B                     LCD_GoToLine@v_lineNumber_u8:	
  1980                           ; 1 bytes @ 0xB
  1981                           
  1982                           
  1983                           ; 1 bytes @ 0xB
  1984  007B                     	ds	1
  1985  007C                     ??_LCD_Clear:	
  1986  007C                     ??_KEYPAD_Init:	
  1987                           ; 1 bytes @ 0xC
  1988                           
  1989  007C                     ?_LCD_Init:	
  1990                           ; 1 bytes @ 0xC
  1991                           
  1992  007C                     LCD_Init@v_MaxCharsPerLine_u8:	
  1993                           ; 1 bytes @ 0xC
  1994                           
  1995  007C                     LCD_DisplayChar@v_lcdData_u8:	
  1996                           ; 1 bytes @ 0xC
  1997                           
  1998                           
  1999                           ; 1 bytes @ 0xC
  2000  007C                     	ds	1
  2001  007D                     ??_LCD_Init:	
  2002  007D                     ??_LCD_DisplayString:	
  2003                           ; 1 bytes @ 0xD
  2004                           
  2005  007D                     ___lldiv@counter:	
  2006                           ; 1 bytes @ 0xD
  2007                           
  2008                           
  2009                           ; 1 bytes @ 0xD
  2010  007D                     	ds	1
  2011  007E                     ??_seg_test:	
  2012  007E                     ??_UART_Init:	
  2013                           ; 1 bytes @ 0xE
  2014                           
  2015                           
  2016                           	psect	cstackBANK0
  2017  0020                     __pcstackBANK0:	
  2018                           ; 1 bytes @ 0xE
  2019                           
  2020  0020                     ?_UART_SetBaudRate:	
  2021  0020                     ?_LCD_SetUp:	
  2022                           ; 1 bytes @ 0x0
  2023                           
  2024  0020                     ?_LCD_DisplayString:	
  2025                           ; 1 bytes @ 0x0
  2026                           
  2027  0020                     ?___bmul:	
  2028                           ; 1 bytes @ 0x0
  2029                           
  2030  0020                     KEYPAD_Init@row_0:	
  2031                           ; 1 bytes @ 0x0
  2032                           
  2033  0020                     KEYPAD_GetKey@v_KeyPressed_u8:	
  2034                           ; 1 bytes @ 0x0
  2035                           
  2036  0020                     LCD_SetUp@RW:	
  2037                           ; 1 bytes @ 0x0
  2038                           
  2039  0020                     LCD_Init@v_lcdNoOfLines_u8:	
  2040                           ; 1 bytes @ 0x0
  2041                           
  2042  0020                     ___bmul@multiplicand:	
  2043                           ; 1 bytes @ 0x0
  2044                           
  2045  0020                     LCD_DisplayString@ptr_stringPointer_u8:	
  2046                           ; 1 bytes @ 0x0
  2047                           
  2048  0020                     UART_SetBaudRate@v_baudRate_u32:	
  2049                           ; 2 bytes @ 0x0
  2050                           
  2051                           
  2052                           ; 4 bytes @ 0x0
  2053  0020                     	ds	1
  2054  0021                     ??___bmul:	
  2055  0021                     KEYPAD_Init@i:	
  2056                           ; 1 bytes @ 0x1
  2057                           
  2058  0021                     KEYPAD_GetKey@j:	
  2059                           ; 1 bytes @ 0x1
  2060                           
  2061  0021                     LCD_SetUp@EN:	
  2062                           ; 1 bytes @ 0x1
  2063                           
  2064                           
  2065                           ; 1 bytes @ 0x1
  2066  0021                     	ds	1
  2067  0022                     KEYPAD_GetKey@i:	
  2068  0022                     LCD_SetUp@D0:	
  2069                           ; 1 bytes @ 0x2
  2070                           
  2071  0022                     ___bmul@product:	
  2072                           ; 1 bytes @ 0x2
  2073                           
  2074                           
  2075                           ; 1 bytes @ 0x2
  2076  0022                     	ds	1
  2077  0023                     LCD_SetUp@D1:	
  2078  0023                     ___bmul@multiplier:	
  2079                           ; 1 bytes @ 0x3
  2080                           
  2081                           
  2082                           ; 1 bytes @ 0x3
  2083  0023                     	ds	1
  2084  0024                     ??_UART_SetBaudRate:	
  2085  0024                     ?_UART_TxNumber:	
  2086                           ; 1 bytes @ 0x4
  2087                           
  2088  0024                     LCD_SetUp@D2:	
  2089                           ; 1 bytes @ 0x4
  2090                           
  2091  0024                     UART_TxNumber@v_number_u32:	
  2092                           ; 1 bytes @ 0x4
  2093                           
  2094                           
  2095                           ; 4 bytes @ 0x4
  2096  0024                     	ds	1
  2097  0025                     LCD_SetUp@D3:	
  2098                           
  2099                           ; 1 bytes @ 0x5
  2100  0025                     	ds	1
  2101  0026                     LCD_SetUp@D4:	
  2102                           
  2103                           ; 1 bytes @ 0x6
  2104  0026                     	ds	1
  2105  0027                     LCD_SetUp@D5:	
  2106                           
  2107                           ; 1 bytes @ 0x7
  2108  0027                     	ds	1
  2109  0028                     LCD_SetUp@D6:	
  2110  0028                     UART_TxNumber@v_numOfDigitsToTransmit_u8:	
  2111                           ; 1 bytes @ 0x8
  2112                           
  2113                           
  2114                           ; 1 bytes @ 0x8
  2115  0028                     	ds	1
  2116  0029                     ??_UART_TxNumber:	
  2117  0029                     LCD_SetUp@D7:	
  2118                           ; 1 bytes @ 0x9
  2119                           
  2120  0029                     UART_SetBaudRate@RegValue:	
  2121                           ; 1 bytes @ 0x9
  2122                           
  2123                           
  2124                           ; 1 bytes @ 0x9
  2125  0029                     	ds	1
  2126  002A                     ?_UART_Init:	
  2127  002A                     UART_Init@v_baudRate_u32:	
  2128                           ; 1 bytes @ 0xA
  2129                           
  2130                           
  2131                           ; 4 bytes @ 0xA
  2132  002A                     	ds	11
  2133  0035                     UART_TxNumber@a:	
  2134                           
  2135                           ; 10 bytes @ 0x15
  2136  0035                     	ds	10
  2137  003F                     _UART_TxNumber$486:	
  2138                           
  2139                           ; 2 bytes @ 0x1F
  2140  003F                     	ds	2
  2141  0041                     UART_TxNumber@v_numericSystem_u8:	
  2142                           
  2143                           ; 1 bytes @ 0x21
  2144  0041                     	ds	1
  2145  0042                     UART_TxNumber@i:	
  2146                           
  2147                           ; 1 bytes @ 0x22
  2148  0042                     	ds	1
  2149  0043                     ?_UART_Printf:	
  2150  0043                     UART_Printf@argList:	
  2151                           ; 1 bytes @ 0x23
  2152                           
  2153                           
  2154                           ; 2 bytes @ 0x23
  2155  0043                     	ds	14
  2156  0051                     ??_UART_Printf:	
  2157                           
  2158                           ; 1 bytes @ 0x31
  2159  0051                     	ds	2
  2160  0053                     UART_Printf@str:	
  2161                           
  2162                           ; 1 bytes @ 0x33
  2163  0053                     	ds	1
  2164  0054                     UART_Printf@v_num_s32:	
  2165                           
  2166                           ; 4 bytes @ 0x34
  2167  0054                     	ds	4
  2168  0058                     UART_Printf@v_num_s16:	
  2169                           
  2170                           ; 2 bytes @ 0x38
  2171  0058                     	ds	2
  2172  005A                     UART_Printf@v_num_u32:	
  2173                           
  2174                           ; 4 bytes @ 0x3A
  2175  005A                     	ds	4
  2176  005E                     UART_Printf@v_num_u16:	
  2177                           
  2178                           ; 2 bytes @ 0x3E
  2179  005E                     	ds	2
  2180  0060                     UART_Printf@ptr:	
  2181                           
  2182                           ; 2 bytes @ 0x40
  2183  0060                     	ds	2
  2184  0062                     UART_Printf@ch:	
  2185                           
  2186                           ; 1 bytes @ 0x42
  2187  0062                     	ds	1
  2188  0063                     UART_Printf@v_numOfDigitsToTransmit_u8:	
  2189                           
  2190                           ; 1 bytes @ 0x43
  2191  0063                     	ds	1
  2192  0064                     UART_Printf@argp:	
  2193                           
  2194                           ; 1 bytes @ 0x44
  2195  0064                     	ds	1
  2196  0065                     ??_gpio_test:	
  2197  0065                     ??_LCD_8bit_test:	
  2198                           ; 1 bytes @ 0x45
  2199                           
  2200  0065                     ??_LCD_4bit_test:	
  2201                           ; 1 bytes @ 0x45
  2202                           
  2203  0065                     ??_eeprom_test:	
  2204                           ; 1 bytes @ 0x45
  2205                           
  2206  0065                     ??_adc_test:	
  2207                           ; 1 bytes @ 0x45
  2208                           
  2209  0065                     ??_keypad_test:	
  2210                           ; 1 bytes @ 0x45
  2211                           
  2212  0065                     seg_test@seg_code:	
  2213                           ; 1 bytes @ 0x45
  2214                           
  2215  0065                     rtc_test@rtc:	
  2216                           ; 4 bytes @ 0x45
  2217                           
  2218                           
  2219                           ; 7 bytes @ 0x45
  2220  0065                     	ds	2
  2221  0067                     gpio_test@i:	
  2222  0067                     adc_test@temp:	
  2223                           ; 1 bytes @ 0x47
  2224                           
  2225                           
  2226                           ; 2 bytes @ 0x47
  2227  0067                     	ds	1
  2228  0068                     eeprom_test@read_char:	
  2229                           
  2230                           ; 1 bytes @ 0x48
  2231  0068                     	ds	1
  2232  0069                     eeprom_test@eeprom_address:	
  2233  0069                     adc_test@light:	
  2234                           ; 1 bytes @ 0x49
  2235                           
  2236                           
  2237                           ; 2 bytes @ 0x49
  2238  0069                     	ds	1
  2239  006A                     eeprom_test@write_char:	
  2240                           
  2241                           ; 1 bytes @ 0x4A
  2242  006A                     	ds	1
  2243  006B                     adc_test@pot:	
  2244                           
  2245                           ; 2 bytes @ 0x4B
  2246  006B                     	ds	1
  2247  006C                     keypad_test@key:	
  2248                           
  2249                           ; 1 bytes @ 0x4C
  2250  006C                     	ds	3
  2251  006F                     ??_main:	
  2252                           
  2253                           ; 1 bytes @ 0x4F
  2254  006F                     	ds	1
  2255                           
  2256                           	psect	maintext
  2257  0E7B                     __pmaintext:	
  2258 ;;
  2259 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2260 ;;
  2261 ;; *************** function _main *****************
  2262 ;; Defined at:
  2263 ;;		line 87 in file "main.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;		None
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;		None
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : B00/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2277 ;;      Params:         0       0       0       0       0
  2278 ;;      Locals:         0       0       0       0       0
  2279 ;;      Temps:          0       1       0       0       0
  2280 ;;      Totals:         0       1       0       0       0
  2281 ;;Total ram usage:        1 bytes
  2282 ;; Hardware stack levels required when called:    8
  2283 ;; This function calls:
  2284 ;;		_LCD_4bit_test
  2285 ;;		_LCD_8bit_test
  2286 ;;		_UART_Init
  2287 ;;		_UART_RxChar
  2288 ;;		_UART_TxString
  2289 ;;		_adc_test
  2290 ;;		_eeprom_test
  2291 ;;		_gpio_test
  2292 ;;		_keypad_test
  2293 ;;		_rtc_test
  2294 ;;		_seg_test
  2295 ;; This function is called by:
  2296 ;;		Startup code after reset
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           
  2301                           ;psect for function _main
  2302  0E7B                     _main:	
  2303                           
  2304                           ;main.c: 89: UART_Init(9600);
  2305                           
  2306                           ;incstack = 0
  2307                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2308  0E7B  3000               	movlw	0
  2309  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0E7E  00AD               	movwf	UART_Init@v_baudRate_u32+3
  2312  0E7F  3000               	movlw	0
  2313  0E80  00AC               	movwf	UART_Init@v_baudRate_u32+2
  2314  0E81  3025               	movlw	37
  2315  0E82  00AB               	movwf	UART_Init@v_baudRate_u32+1
  2316  0E83  3080               	movlw	128
  2317  0E84  00AA               	movwf	UART_Init@v_baudRate_u32
  2318  0E85  120A  158A  236C  120A  158A  	fcall	_UART_Init
  2319                           
  2320                           ;main.c: 90: UART_TxString("\n\rTest menu Utra x51 v1.1\r\n 1:GPIO Blink\r\n 2:LCD 8-bit
      +                           \n\r 3:LCD 4-bit\n\r 4:7-Segment\n\r 5:RTC\n\r 6:EEPROM\n\r 7:ADC\n\r 8:Keypad \n\r Ent
      +                          er option:");
  2321  0E8A  3022               	movlw	low (STR_1| (0+32768))
  2322  0E8B  00F1               	movwf	UART_TxString@ptr_string
  2323  0E8C  3088               	movlw	high (STR_1| (0+32768))
  2324  0E8D  00F2               	movwf	UART_TxString@ptr_string+1
  2325  0E8E  160A  118A  2414  120A  158A  	fcall	_UART_TxString
  2326                           
  2327                           ;main.c: 91: UART_TxString("\n\rReset the board after test is done");
  2328  0E93  3093               	movlw	low (STR_2| (0+32768))
  2329  0E94  00F1               	movwf	UART_TxString@ptr_string
  2330  0E95  308A               	movlw	high (STR_2| (0+32768))
  2331  0E96  00F2               	movwf	UART_TxString@ptr_string+1
  2332  0E97  160A  118A  2414  120A  158A  	fcall	_UART_TxString
  2333                           
  2334                           ;main.c: 92: mm_option = UART_RxChar();
  2335  0E9C  160A  118A  227F  120A  158A  	fcall	_UART_RxChar
  2336  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0EA3  00EF               	movwf	??_main
  2339  0EA4  086F               	movf	??_main,w
  2340  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  2341  0EA6  1303               	bcf	3,6	;RP1=0, select bank1
  2342  0EA7  00B6               	movwf	_mm_option^(0+128)
  2343                           
  2344                           ;main.c: 94: {
  2345                           ;main.c: 95: switch(mm_option)
  2346                           
  2347                           ;main.c: 93: while(1)
  2348  0EA8  2ED8               	goto	l3418
  2349  0EA9                     l3400:	
  2350                           ;main.c: 96: {
  2351                           ;main.c: 97: case '1': gpio_test(); break;
  2352                           
  2353  0EA9  120A  118A  20F9  120A  158A  	fcall	_gpio_test
  2354  0EAE  2ED8               	goto	l3418
  2355  0EAF                     l3402:	
  2356                           ;main.c: 98: case '2': LCD_8bit_test(); break;
  2357                           
  2358  0EAF  120A  158A  2603  120A  158A  	fcall	_LCD_8bit_test
  2359  0EB4  2ED8               	goto	l3418
  2360  0EB5                     l3404:	
  2361                           ;main.c: 99: case '3': LCD_4bit_test(); break;
  2362                           
  2363  0EB5  120A  158A  258B  120A  158A  	fcall	_LCD_4bit_test
  2364  0EBA  2ED8               	goto	l3418
  2365  0EBB                     l3406:	
  2366                           ;main.c: 100: case '4': seg_test(); break;
  2367                           
  2368  0EBB  120A  158A  2516  120A  158A  	fcall	_seg_test
  2369  0EC0  2ED8               	goto	l3418
  2370  0EC1                     l3408:	
  2371                           ;main.c: 101: case '5': rtc_test(); break;
  2372                           
  2373  0EC1  120A  118A  219A  120A  158A  	fcall	_rtc_test
  2374  0EC6  2ED8               	goto	l3418
  2375  0EC7                     l3410:	
  2376                           ;main.c: 102: case '6': eeprom_test(); break;
  2377                           
  2378  0EC7  120A  158A  2382  120A  158A  	fcall	_eeprom_test
  2379  0ECC  2ED8               	goto	l3418
  2380  0ECD                     l3412:	
  2381                           ;main.c: 103: case '7': adc_test(); break;
  2382                           
  2383  0ECD  160A  118A  25A4  120A  158A  	fcall	_adc_test
  2384  0ED2  2ED8               	goto	l3418
  2385  0ED3                     l3414:	
  2386                           ;main.c: 104: case '8': keypad_test();break;
  2387                           
  2388  0ED3  160A  118A  2745  120A  158A  	fcall	_keypad_test
  2389  0ED8                     l3418:	
  2390                           ;main.c: 106: }
  2391                           
  2392                           ;main.c: 105: default:break;
  2393                           
  2394  0ED8  1683               	bsf	3,5	;RP0=1, select bank1
  2395  0ED9  1303               	bcf	3,6	;RP1=0, select bank1
  2396  0EDA  0836               	movf	_mm_option^(0+128),w
  2397                           
  2398                           ; Switch size 1, requested type "space"
  2399                           ; Number of cases is 8, Range of values is 49 to 56
  2400                           ; switch strategies available:
  2401                           ; Name         Instructions Cycles
  2402                           ; simple_byte           25    13 (average)
  2403                           ; direct_byte           35    11 (fixed)
  2404                           ; jumptable            263     9 (fixed)
  2405                           ;	Chosen strategy is simple_byte
  2406  0EDB  3A31               	xorlw	49	; case 49
  2407  0EDC  1903               	skipnz
  2408  0EDD  2EA9               	goto	l3400
  2409  0EDE  3A03               	xorlw	3	; case 50
  2410  0EDF  1903               	skipnz
  2411  0EE0  2EAF               	goto	l3402
  2412  0EE1  3A01               	xorlw	1	; case 51
  2413  0EE2  1903               	skipnz
  2414  0EE3  2EB5               	goto	l3404
  2415  0EE4  3A07               	xorlw	7	; case 52
  2416  0EE5  1903               	skipnz
  2417  0EE6  2EBB               	goto	l3406
  2418  0EE7  3A01               	xorlw	1	; case 53
  2419  0EE8  1903               	skipnz
  2420  0EE9  2EC1               	goto	l3408
  2421  0EEA  3A03               	xorlw	3	; case 54
  2422  0EEB  1903               	skipnz
  2423  0EEC  2EC7               	goto	l3410
  2424  0EED  3A01               	xorlw	1	; case 55
  2425  0EEE  1903               	skipnz
  2426  0EEF  2ECD               	goto	l3412
  2427  0EF0  3A0F               	xorlw	15	; case 56
  2428  0EF1  1903               	skipnz
  2429  0EF2  2ED3               	goto	l3414
  2430  0EF3  2ED8               	goto	l3418
  2431  0EF4  2ED8               	goto	l3418
  2432  0EF5                     __end_of_main:	
  2433                           
  2434                           	psect	text1
  2435  0D16                     __ptext1:	
  2436 ;; *************** function _seg_test *****************
  2437 ;; Defined at:
  2438 ;;		line 208 in file "main.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  seg_code        4   69[BANK0 ] unsigned char [4]
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2452 ;;      Params:         0       0       0       0       0
  2453 ;;      Locals:         0       4       0       0       0
  2454 ;;      Temps:          0       0       0       0       0
  2455 ;;      Totals:         0       4       0       0       0
  2456 ;;Total ram usage:        4 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    3
  2459 ;; This function calls:
  2460 ;;		_DELAY_us
  2461 ;;		_UART_Printf
  2462 ;;		_UART_RxChar
  2463 ;;		_UART_TxString
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           
  2470                           ;psect for function _seg_test
  2471  0D16                     _seg_test:	
  2472                           
  2473                           ;main.c: 210: unsigned char seg_code[]={0xC0,0xF9,0xA4,0xB0};
  2474                           
  2475                           ;incstack = 0
  2476                           ; Regs used in _seg_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2477  0D16  1683               	bsf	3,5	;RP0=1, select bank1
  2478  0D17  1303               	bcf	3,6	;RP1=0, select bank1
  2479  0D18  084C               	movf	(seg_test@F1296+3)^(0+128),w
  2480  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0D1B  00E8               	movwf	seg_test@seg_code+3
  2483  0D1C  1683               	bsf	3,5	;RP0=1, select bank1
  2484  0D1D  1303               	bcf	3,6	;RP1=0, select bank1
  2485  0D1E  084B               	movf	(seg_test@F1296+2)^(0+128),w
  2486  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0D21  00E7               	movwf	seg_test@seg_code+2
  2489  0D22  1683               	bsf	3,5	;RP0=1, select bank1
  2490  0D23  1303               	bcf	3,6	;RP1=0, select bank1
  2491  0D24  084A               	movf	(seg_test@F1296+1)^(0+128),w
  2492  0D25  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0D26  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0D27  00E6               	movwf	seg_test@seg_code+1
  2495  0D28  1683               	bsf	3,5	;RP0=1, select bank1
  2496  0D29  1303               	bcf	3,6	;RP1=0, select bank1
  2497  0D2A  0849               	movf	seg_test@F1296^(0+128),w
  2498  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  2499  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  2500  0D2D  00E5               	movwf	seg_test@seg_code
  2501                           
  2502                           ;main.c: 211: UART_TxString("\n\r Segment DataBus: PD Seg select: S1->PB.0 S2->PB.1 S3->
      +                          PB.2 S4->PB.4  ");
  2503  0D2E  30AD               	movlw	low (STR_13| (0+32768))
  2504  0D2F  00F1               	movwf	UART_TxString@ptr_string
  2505  0D30  3088               	movlw	high (STR_13| (0+32768))
  2506  0D31  00F2               	movwf	UART_TxString@ptr_string+1
  2507  0D32  160A  118A  2414  120A  158A  	fcall	_UART_TxString
  2508                           
  2509                           ;main.c: 212: UART_Printf("\n\rMake connections and hit 'k' to test! ");
  2510  0D37  30CB               	movlw	low (STR_14| (0+32768))
  2511  0D38  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0D39  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0D3A  00C3               	movwf	UART_Printf@argList
  2514  0D3B  3089               	movlw	high (STR_14| (0+32768))
  2515  0D3C  00C4               	movwf	UART_Printf@argList+1
  2516  0D3D  120A  118A  25C9  120A  158A  	fcall	_UART_Printf
  2517  0D42                     l3260:	
  2518                           ;main.c: 213: while(UART_RxChar()!='k');
  2519                           
  2520  0D42  160A  118A  227F  120A  158A  	fcall	_UART_RxChar
  2521  0D47  3A6B               	xorlw	107
  2522  0D48  1D03               	skipz
  2523  0D49  2D42               	goto	l3260
  2524                           
  2525                           ;main.c: 214: TRISD = 0x00u;
  2526  0D4A  1683               	bsf	3,5	;RP0=1, select bank1
  2527  0D4B  1303               	bcf	3,6	;RP1=0, select bank1
  2528  0D4C  0188               	clrf	8	;volatile
  2529                           
  2530                           ;main.c: 215: TRISB = 0x00u;
  2531  0D4D  0186               	clrf	6	;volatile
  2532  0D4E                     l3264:	
  2533                           ;main.c: 217: while(1)
  2534                           
  2535                           
  2536                           ;main.c: 218: {
  2537                           ;main.c: 219: PORTB=0x01;
  2538  0D4E  3001               	movlw	1
  2539  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0D51  0086               	movwf	6	;volatile
  2542                           
  2543                           ;main.c: 220: PORTD = seg_code[0];
  2544  0D52  0865               	movf	seg_test@seg_code,w
  2545  0D53  0088               	movwf	8	;volatile
  2546                           
  2547                           ;main.c: 221: DELAY_us(10);
  2548  0D54  300A               	movlw	10
  2549  0D55  00F0               	movwf	DELAY_us@us_count
  2550  0D56  3000               	movlw	0
  2551  0D57  00F1               	movwf	DELAY_us@us_count+1
  2552  0D58  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  2553                           
  2554                           ;main.c: 222: PORTB=0x02;
  2555  0D5D  3002               	movlw	2
  2556  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0D60  0086               	movwf	6	;volatile
  2559                           
  2560                           ;main.c: 223: PORTD = seg_code[1];
  2561  0D61  0866               	movf	seg_test@seg_code+1,w
  2562  0D62  0088               	movwf	8	;volatile
  2563                           
  2564                           ;main.c: 224: DELAY_us(10);
  2565  0D63  300A               	movlw	10
  2566  0D64  00F0               	movwf	DELAY_us@us_count
  2567  0D65  3000               	movlw	0
  2568  0D66  00F1               	movwf	DELAY_us@us_count+1
  2569  0D67  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  2570                           
  2571                           ;main.c: 225: PORTB=0x04;
  2572  0D6C  3004               	movlw	4
  2573  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  2574  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  2575  0D6F  0086               	movwf	6	;volatile
  2576                           
  2577                           ;main.c: 226: PORTD = seg_code[2];
  2578  0D70  0867               	movf	seg_test@seg_code+2,w
  2579  0D71  0088               	movwf	8	;volatile
  2580                           
  2581                           ;main.c: 227: DELAY_us(10);
  2582  0D72  300A               	movlw	10
  2583  0D73  00F0               	movwf	DELAY_us@us_count
  2584  0D74  3000               	movlw	0
  2585  0D75  00F1               	movwf	DELAY_us@us_count+1
  2586  0D76  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  2587                           
  2588                           ;main.c: 228: PORTB=0x08;
  2589  0D7B  3008               	movlw	8
  2590  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  2592  0D7E  0086               	movwf	6	;volatile
  2593                           
  2594                           ;main.c: 229: PORTD = seg_code[3];
  2595  0D7F  0868               	movf	seg_test@seg_code+3,w
  2596  0D80  0088               	movwf	8	;volatile
  2597                           
  2598                           ;main.c: 230: DELAY_us(10);
  2599  0D81  300A               	movlw	10
  2600  0D82  00F0               	movwf	DELAY_us@us_count
  2601  0D83  3000               	movlw	0
  2602  0D84  00F1               	movwf	DELAY_us@us_count+1
  2603  0D85  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  2604  0D8A  2D4E               	goto	l3264
  2605  0D8B                     __end_of_seg_test:	
  2606                           
  2607                           	psect	text2
  2608  019A                     __ptext2:	
  2609 ;; *************** function _rtc_test *****************
  2610 ;; Defined at:
  2611 ;;		line 238 in file "main.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;  rtc             7   69[BANK0 ] struct .
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         0       0       0       0       0
  2626 ;;      Locals:         0       7       0       0       0
  2627 ;;      Temps:          0       0      12       0       0
  2628 ;;      Totals:         0       7      12       0       0
  2629 ;;Total ram usage:       19 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    3
  2632 ;; This function calls:
  2633 ;;		_RTC_GetDateTime
  2634 ;;		_RTC_Init
  2635 ;;		_RTC_SetDateTime
  2636 ;;		_UART_Printf
  2637 ;;		_UART_RxChar
  2638 ;; This function is called by:
  2639 ;;		_main
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           
  2644                           ;psect for function _rtc_test
  2645  019A                     _rtc_test:	
  2646                           
  2647                           ;main.c: 240: rtc_t rtc;
  2648                           ;main.c: 241: UART_Printf("\n\rConnections SCL->PC.3 SDA->PC.4");
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _rtc_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2652  019A  30B8               	movlw	low (STR_15| (0+32768))
  2653  019B  1283               	bcf	3,5	;RP0=0, select bank0
  2654  019C  1303               	bcf	3,6	;RP1=0, select bank0
  2655  019D  00C3               	movwf	UART_Printf@argList
  2656  019E  308A               	movlw	high (STR_15| (0+32768))
  2657  019F  00C4               	movwf	UART_Printf@argList+1
  2658  01A0  120A  118A  25C9  120A  118A  	fcall	_UART_Printf
  2659                           
  2660                           ;main.c: 242: UART_Printf("\n\r Make connections and hit 'k' to test! ");
  2661  01A5  30A1               	movlw	low (STR_16| (0+32768))
  2662  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  2663  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  2664  01A8  00C3               	movwf	UART_Printf@argList
  2665  01A9  3089               	movlw	high (STR_16| (0+32768))
  2666  01AA  00C4               	movwf	UART_Printf@argList+1
  2667  01AB  120A  118A  25C9  120A  118A  	fcall	_UART_Printf
  2668  01B0                     l3290:	
  2669                           ;main.c: 243: while(UART_RxChar()!='k');
  2670                           
  2671  01B0  160A  118A  227F  120A  118A  	fcall	_UART_RxChar
  2672  01B5  3A6B               	xorlw	107
  2673  01B6  1D03               	skipz
  2674  01B7  29B0               	goto	l3290
  2675                           
  2676                           ;main.c: 245: RTC_Init();
  2677  01B8  160A  118A  23AB  120A  118A  	fcall	_RTC_Init
  2678                           
  2679                           ;main.c: 246: rtc.hour = 0x10;
  2680  01BD  3010               	movlw	16
  2681  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  2682  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  2683  01C0  00B9               	movwf	??_rtc_test^(0+128)
  2684  01C1  0839               	movf	??_rtc_test^(0+128),w
  2685  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  2686  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  2687  01C4  00E7               	movwf	rtc_test@rtc+2
  2688                           
  2689                           ;main.c: 247: rtc.min = 0x40;
  2690  01C5  3040               	movlw	64
  2691  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  2692  01C7  1303               	bcf	3,6	;RP1=0, select bank1
  2693  01C8  00B9               	movwf	??_rtc_test^(0+128)
  2694  01C9  0839               	movf	??_rtc_test^(0+128),w
  2695  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2696  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  2697  01CC  00E6               	movwf	rtc_test@rtc+1
  2698                           
  2699                           ;main.c: 248: rtc.sec = 0x00;
  2700  01CD  01E5               	clrf	rtc_test@rtc
  2701                           
  2702                           ;main.c: 250: rtc.date = 0x01;
  2703  01CE  01E9               	clrf	rtc_test@rtc+4
  2704  01CF  0AE9               	incf	rtc_test@rtc+4,f
  2705                           
  2706                           ;main.c: 251: rtc.month = 0x01;
  2707  01D0  01EA               	clrf	rtc_test@rtc+5
  2708  01D1  0AEA               	incf	rtc_test@rtc+5,f
  2709                           
  2710                           ;main.c: 252: rtc.year = 0x16;
  2711  01D2  3016               	movlw	22
  2712  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2713  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  2714  01D5  00B9               	movwf	??_rtc_test^(0+128)
  2715  01D6  0839               	movf	??_rtc_test^(0+128),w
  2716  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  2717  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  2718  01D9  00EB               	movwf	rtc_test@rtc+6
  2719                           
  2720                           ;main.c: 253: rtc.weekDay = 5;
  2721  01DA  3005               	movlw	5
  2722  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  2723  01DC  1303               	bcf	3,6	;RP1=0, select bank1
  2724  01DD  00B9               	movwf	??_rtc_test^(0+128)
  2725  01DE  0839               	movf	??_rtc_test^(0+128),w
  2726  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  2727  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  2728  01E1  00E8               	movwf	rtc_test@rtc+3
  2729                           
  2730                           ;main.c: 260: RTC_SetDateTime(&rtc);
  2731  01E2  3065               	movlw	(low (rtc_test@rtc| 0))& (0+255)
  2732  01E3  160A  118A  26EB  120A  118A  	fcall	_RTC_SetDateTime
  2733  01E8                     l3310:	
  2734                           ;main.c: 264: while(1)
  2735                           
  2736                           
  2737                           ;main.c: 265: {
  2738                           ;main.c: 266: RTC_GetDateTime(&rtc);
  2739  01E8  3065               	movlw	(low (rtc_test@rtc| 0))& (0+255)
  2740  01E9  120A  158A  26F5  120A  118A  	fcall	_RTC_GetDateTime
  2741                           
  2742                           ;main.c: 267: UART_Printf("\n\rtime:%2x:%2x:%2x  \nDate:%2x/%2x/%2x",(uint16_t)rtc.hour,
      +                          (uint16_t)rtc.min,(uint16_t)rtc.sec,(uint16_t)rtc.date,(uint16_t)rtc.month,(uint16_t)rtc
      +                          .year);
  2743  01EE  306D               	movlw	low (STR_17| (0+32768))
  2744  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  2745  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  2746  01F1  00C3               	movwf	UART_Printf@argList
  2747  01F2  308A               	movlw	high (STR_17| (0+32768))
  2748  01F3  00C4               	movwf	UART_Printf@argList+1
  2749  01F4  0867               	movf	rtc_test@rtc+2,w
  2750  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  2751  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  2752  01F7  00B9               	movwf	??_rtc_test^(0+128)
  2753  01F8  01BA               	clrf	(??_rtc_test^(0+128)+1)
  2754  01F9  0839               	movf	??_rtc_test^(0+128),w
  2755  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  2756  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  2757  01FC  00C5               	movwf	?_UART_Printf+2
  2758  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  2759  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  2760  01FF  083A               	movf	(??_rtc_test+1)^(0+128),w
  2761  0200  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0201  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0202  00C6               	movwf	?_UART_Printf+3
  2764  0203  0866               	movf	rtc_test@rtc+1,w
  2765  0204  1683               	bsf	3,5	;RP0=1, select bank1
  2766  0205  1303               	bcf	3,6	;RP1=0, select bank1
  2767  0206  00BB               	movwf	(??_rtc_test+2)^(0+128)
  2768  0207  01BC               	clrf	((??_rtc_test+2)^(0+128)+1)
  2769  0208  083B               	movf	(??_rtc_test+2)^(0+128),w
  2770  0209  1283               	bcf	3,5	;RP0=0, select bank0
  2771  020A  1303               	bcf	3,6	;RP1=0, select bank0
  2772  020B  00C7               	movwf	?_UART_Printf+4
  2773  020C  1683               	bsf	3,5	;RP0=1, select bank1
  2774  020D  1303               	bcf	3,6	;RP1=0, select bank1
  2775  020E  083C               	movf	(??_rtc_test+3)^(0+128),w
  2776  020F  1283               	bcf	3,5	;RP0=0, select bank0
  2777  0210  1303               	bcf	3,6	;RP1=0, select bank0
  2778  0211  00C8               	movwf	?_UART_Printf+5
  2779  0212  0865               	movf	rtc_test@rtc,w
  2780  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2781  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2782  0215  00BD               	movwf	(??_rtc_test+4)^(0+128)
  2783  0216  01BE               	clrf	((??_rtc_test+4)^(0+128)+1)
  2784  0217  083D               	movf	(??_rtc_test+4)^(0+128),w
  2785  0218  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0219  1303               	bcf	3,6	;RP1=0, select bank0
  2787  021A  00C9               	movwf	?_UART_Printf+6
  2788  021B  1683               	bsf	3,5	;RP0=1, select bank1
  2789  021C  1303               	bcf	3,6	;RP1=0, select bank1
  2790  021D  083E               	movf	(??_rtc_test+5)^(0+128),w
  2791  021E  1283               	bcf	3,5	;RP0=0, select bank0
  2792  021F  1303               	bcf	3,6	;RP1=0, select bank0
  2793  0220  00CA               	movwf	?_UART_Printf+7
  2794  0221  0869               	movf	rtc_test@rtc+4,w
  2795  0222  1683               	bsf	3,5	;RP0=1, select bank1
  2796  0223  1303               	bcf	3,6	;RP1=0, select bank1
  2797  0224  00BF               	movwf	(??_rtc_test+6)^(0+128)
  2798  0225  01C0               	clrf	((??_rtc_test+6)^(0+128)+1)
  2799  0226  083F               	movf	(??_rtc_test+6)^(0+128),w
  2800  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2802  0229  00CB               	movwf	?_UART_Printf+8
  2803  022A  1683               	bsf	3,5	;RP0=1, select bank1
  2804  022B  1303               	bcf	3,6	;RP1=0, select bank1
  2805  022C  0840               	movf	(??_rtc_test+7)^(0+128),w
  2806  022D  1283               	bcf	3,5	;RP0=0, select bank0
  2807  022E  1303               	bcf	3,6	;RP1=0, select bank0
  2808  022F  00CC               	movwf	?_UART_Printf+9
  2809  0230  086A               	movf	rtc_test@rtc+5,w
  2810  0231  1683               	bsf	3,5	;RP0=1, select bank1
  2811  0232  1303               	bcf	3,6	;RP1=0, select bank1
  2812  0233  00C1               	movwf	(??_rtc_test+8)^(0+128)
  2813  0234  01C2               	clrf	((??_rtc_test+8)^(0+128)+1)
  2814  0235  0841               	movf	(??_rtc_test+8)^(0+128),w
  2815  0236  1283               	bcf	3,5	;RP0=0, select bank0
  2816  0237  1303               	bcf	3,6	;RP1=0, select bank0
  2817  0238  00CD               	movwf	?_UART_Printf+10
  2818  0239  1683               	bsf	3,5	;RP0=1, select bank1
  2819  023A  1303               	bcf	3,6	;RP1=0, select bank1
  2820  023B  0842               	movf	(??_rtc_test+9)^(0+128),w
  2821  023C  1283               	bcf	3,5	;RP0=0, select bank0
  2822  023D  1303               	bcf	3,6	;RP1=0, select bank0
  2823  023E  00CE               	movwf	?_UART_Printf+11
  2824  023F  086B               	movf	rtc_test@rtc+6,w
  2825  0240  1683               	bsf	3,5	;RP0=1, select bank1
  2826  0241  1303               	bcf	3,6	;RP1=0, select bank1
  2827  0242  00C3               	movwf	(??_rtc_test+10)^(0+128)
  2828  0243  01C4               	clrf	((??_rtc_test+10)^(0+128)+1)
  2829  0244  0843               	movf	(??_rtc_test+10)^(0+128),w
  2830  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0247  00CF               	movwf	?_UART_Printf+12
  2833  0248  1683               	bsf	3,5	;RP0=1, select bank1
  2834  0249  1303               	bcf	3,6	;RP1=0, select bank1
  2835  024A  0844               	movf	(??_rtc_test+11)^(0+128),w
  2836  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2837  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2838  024D  00D0               	movwf	?_UART_Printf+13
  2839  024E  120A  118A  25C9  120A  118A  	fcall	_UART_Printf
  2840  0253  29E8               	goto	l3310
  2841  0254                     __end_of_rtc_test:	
  2842                           
  2843                           	psect	text3
  2844  16EB                     __ptext3:	
  2845 ;; *************** function _RTC_SetDateTime *****************
  2846 ;; Defined at:
  2847 ;;		line 95 in file "../00-libfiles/rtc.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  rtc             1    wreg     PTR struct .
  2850 ;;		 -> rtc_test@rtc(7), 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  rtc             1    1[COMMON] PTR struct .
  2853 ;;		 -> rtc_test@rtc(7), 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2863 ;;      Params:         0       0       0       0       0
  2864 ;;      Locals:         1       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0
  2866 ;;      Totals:         1       0       0       0       0
  2867 ;;Total ram usage:        1 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		_I2C_Start
  2872 ;;		_I2C_Stop
  2873 ;;		_I2C_Write
  2874 ;; This function is called by:
  2875 ;;		_rtc_test
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           
  2880                           ;psect for function _RTC_SetDateTime
  2881  16EB                     _RTC_SetDateTime:	
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in _RTC_SetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2885                           ;RTC_SetDateTime@rtc stored from wreg
  2886  16EB  00F1               	movwf	RTC_SetDateTime@rtc
  2887                           
  2888                           ;rtc.c: 97: I2C_Start();
  2889  16EC  160A  118A  2279  160A  118A  	fcall	_I2C_Start
  2890                           
  2891                           ;rtc.c: 99: I2C_Write(0xD0u);
  2892  16F1  30D0               	movlw	208
  2893  16F2  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2894                           
  2895                           ;rtc.c: 100: I2C_Write(0x00u);
  2896  16F7  3000               	movlw	0
  2897  16F8  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2898                           
  2899                           ;rtc.c: 102: I2C_Write(rtc->sec);
  2900  16FD  0871               	movf	RTC_SetDateTime@rtc,w
  2901  16FE  0084               	movwf	4
  2902  16FF  1383               	bcf	3,7	;select IRP bank0
  2903  1700  0800               	movf	0,w
  2904  1701  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2905                           
  2906                           ;rtc.c: 103: I2C_Write(rtc->min);
  2907  1706  0A71               	incf	RTC_SetDateTime@rtc,w
  2908  1707  0084               	movwf	4
  2909  1708  1383               	bcf	3,7	;select IRP bank0
  2910  1709  0800               	movf	0,w
  2911  170A  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2912                           
  2913                           ;rtc.c: 104: I2C_Write(rtc->hour);
  2914  170F  0871               	movf	RTC_SetDateTime@rtc,w
  2915  1710  3E02               	addlw	2
  2916  1711  0084               	movwf	4
  2917  1712  1383               	bcf	3,7	;select IRP bank0
  2918  1713  0800               	movf	0,w
  2919  1714  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2920                           
  2921                           ;rtc.c: 105: I2C_Write(rtc->weekDay);
  2922  1719  0871               	movf	RTC_SetDateTime@rtc,w
  2923  171A  3E03               	addlw	3
  2924  171B  0084               	movwf	4
  2925  171C  1383               	bcf	3,7	;select IRP bank0
  2926  171D  0800               	movf	0,w
  2927  171E  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2928                           
  2929                           ;rtc.c: 106: I2C_Write(rtc->date);
  2930  1723  0871               	movf	RTC_SetDateTime@rtc,w
  2931  1724  3E04               	addlw	4
  2932  1725  0084               	movwf	4
  2933  1726  1383               	bcf	3,7	;select IRP bank0
  2934  1727  0800               	movf	0,w
  2935  1728  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2936                           
  2937                           ;rtc.c: 107: I2C_Write(rtc->month);
  2938  172D  0871               	movf	RTC_SetDateTime@rtc,w
  2939  172E  3E05               	addlw	5
  2940  172F  0084               	movwf	4
  2941  1730  1383               	bcf	3,7	;select IRP bank0
  2942  1731  0800               	movf	0,w
  2943  1732  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2944                           
  2945                           ;rtc.c: 108: I2C_Write(rtc->year);
  2946  1737  0871               	movf	RTC_SetDateTime@rtc,w
  2947  1738  3E06               	addlw	6
  2948  1739  0084               	movwf	4
  2949  173A  1383               	bcf	3,7	;select IRP bank0
  2950  173B  0800               	movf	0,w
  2951  173C  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  2952                           
  2953                           ;rtc.c: 110: I2C_Stop();
  2954  1741  120A  118A  2003   	fcall	_I2C_Stop
  2955  1744  0008               	return
  2956  1745                     __end_of_RTC_SetDateTime:	
  2957                           
  2958                           	psect	text4
  2959  13AB                     __ptext4:	
  2960 ;; *************** function _RTC_Init *****************
  2961 ;; Defined at:
  2962 ;;		line 57 in file "../00-libfiles/rtc.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0, pclath, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2976 ;;      Params:         0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0
  2979 ;;      Totals:         0       0       0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    2
  2983 ;; This function calls:
  2984 ;;		_I2C_Init
  2985 ;;		_I2C_Start
  2986 ;;		_I2C_Stop
  2987 ;;		_I2C_Write
  2988 ;; This function is called by:
  2989 ;;		_rtc_test
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           
  2994                           ;psect for function _RTC_Init
  2995  13AB                     _RTC_Init:	
  2996                           
  2997                           ;rtc.c: 59: I2C_Init();
  2998                           
  2999                           ;incstack = 0
  3000                           ; Regs used in _RTC_Init: [wreg+status,2+status,0+pclath+cstack]
  3001  13AB  160A  118A  22EC  160A  118A  	fcall	_I2C_Init
  3002                           
  3003                           ;rtc.c: 60: I2C_Start();
  3004  13B0  160A  118A  2279  160A  118A  	fcall	_I2C_Start
  3005                           
  3006                           ;rtc.c: 62: I2C_Write(0xD0u);
  3007  13B5  30D0               	movlw	208
  3008  13B6  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  3009                           
  3010                           ;rtc.c: 63: I2C_Write(0x07u);
  3011  13BB  3007               	movlw	7
  3012  13BC  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  3013                           
  3014                           ;rtc.c: 65: I2C_Write(0x00);
  3015  13C1  3000               	movlw	0
  3016  13C2  160A  118A  22DF  160A  118A  	fcall	_I2C_Write
  3017                           
  3018                           ;rtc.c: 67: I2C_Stop();
  3019  13C7  120A  118A  2003   	fcall	_I2C_Stop
  3020  13CA  0008               	return
  3021  13CB                     __end_of_RTC_Init:	
  3022                           
  3023                           	psect	text5
  3024  12EC                     __ptext5:	
  3025 ;; *************** function _I2C_Init *****************
  3026 ;; Defined at:
  3027 ;;		line 87 in file "../00-libfiles/i2c.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3041 ;;      Params:         0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0
  3044 ;;      Totals:         0       0       0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_RTC_Init
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _I2C_Init
  3056  12EC                     _I2C_Init:	
  3057                           
  3058                           ;i2c.c: 89: TRISC3 = 0x01u;
  3059                           
  3060                           ;incstack = 0
  3061                           ; Regs used in _I2C_Init: [wreg]
  3062  12EC  1683               	bsf	3,5	;RP0=1, select bank1
  3063  12ED  1303               	bcf	3,6	;RP1=0, select bank1
  3064  12EE  1587               	bsf	7,3	;volatile
  3065                           
  3066                           ;i2c.c: 90: TRISC4 = 0x01u;
  3067  12EF  1607               	bsf	7,4	;volatile
  3068                           
  3069                           ;i2c.c: 92: SSPSTAT |= 0x80;
  3070  12F0  1794               	bsf	20,7	;volatile
  3071                           
  3072                           ;i2c.c: 93: SSPCON = 0x28;
  3073  12F1  3028               	movlw	40
  3074  12F2  1283               	bcf	3,5	;RP0=0, select bank0
  3075  12F3  1303               	bcf	3,6	;RP1=0, select bank0
  3076  12F4  0094               	movwf	20	;volatile
  3077                           
  3078                           ;i2c.c: 94: SSPADD = 50;
  3079  12F5  3032               	movlw	50
  3080  12F6  1683               	bsf	3,5	;RP0=1, select bank1
  3081  12F7  1303               	bcf	3,6	;RP1=0, select bank1
  3082  12F8  0093               	movwf	19	;volatile
  3083  12F9  0008               	return
  3084  12FA                     __end_of_I2C_Init:	
  3085                           
  3086                           	psect	text6
  3087  0EF5                     __ptext6:	
  3088 ;; *************** function _RTC_GetDateTime *****************
  3089 ;; Defined at:
  3090 ;;		line 131 in file "../00-libfiles/rtc.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  rtc             1    wreg     PTR struct .
  3093 ;;		 -> rtc_test@rtc(7), 
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  rtc             1    4[COMMON] PTR struct .
  3096 ;;		 -> rtc_test@rtc(7), 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3106 ;;      Params:         0       0       0       0       0
  3107 ;;      Locals:         1       0       0       0       0
  3108 ;;      Temps:          1       0       0       0       0
  3109 ;;      Totals:         2       0       0       0       0
  3110 ;;Total ram usage:        2 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    2
  3113 ;; This function calls:
  3114 ;;		_I2C_Read
  3115 ;;		_I2C_Start
  3116 ;;		_I2C_Stop
  3117 ;;		_I2C_Write
  3118 ;; This function is called by:
  3119 ;;		_rtc_test
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function _RTC_GetDateTime
  3125  0EF5                     _RTC_GetDateTime:	
  3126                           
  3127                           ;incstack = 0
  3128                           ; Regs used in _RTC_GetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3129                           ;RTC_GetDateTime@rtc stored from wreg
  3130  0EF5  00F4               	movwf	RTC_GetDateTime@rtc
  3131                           
  3132                           ;rtc.c: 133: I2C_Start();
  3133  0EF6  160A  118A  2279  120A  158A  	fcall	_I2C_Start
  3134                           
  3135                           ;rtc.c: 135: I2C_Write(0xD0u);
  3136  0EFB  30D0               	movlw	208
  3137  0EFC  160A  118A  22DF  120A  158A  	fcall	_I2C_Write
  3138                           
  3139                           ;rtc.c: 136: I2C_Write(0x00u);
  3140  0F01  3000               	movlw	0
  3141  0F02  160A  118A  22DF  120A  158A  	fcall	_I2C_Write
  3142                           
  3143                           ;rtc.c: 138: I2C_Stop();
  3144  0F07  120A  118A  2003  120A  158A  	fcall	_I2C_Stop
  3145                           
  3146                           ;rtc.c: 140: I2C_Start();
  3147  0F0C  160A  118A  2279  120A  158A  	fcall	_I2C_Start
  3148                           
  3149                           ;rtc.c: 141: I2C_Write(0xD1u);
  3150  0F11  30D1               	movlw	209
  3151  0F12  160A  118A  22DF  120A  158A  	fcall	_I2C_Write
  3152                           
  3153                           ;rtc.c: 143: rtc->sec = I2C_Read(1);
  3154  0F17  3001               	movlw	1
  3155  0F18  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3156  0F1D  00F3               	movwf	??_RTC_GetDateTime
  3157  0F1E  0874               	movf	RTC_GetDateTime@rtc,w
  3158  0F1F  0084               	movwf	4
  3159  0F20  0873               	movf	??_RTC_GetDateTime,w
  3160  0F21  1383               	bcf	3,7	;select IRP bank0
  3161  0F22  0080               	movwf	0
  3162                           
  3163                           ;rtc.c: 144: rtc->min = I2C_Read(1);
  3164  0F23  3001               	movlw	1
  3165  0F24  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3166  0F29  00F3               	movwf	??_RTC_GetDateTime
  3167  0F2A  0A74               	incf	RTC_GetDateTime@rtc,w
  3168  0F2B  0084               	movwf	4
  3169  0F2C  0873               	movf	??_RTC_GetDateTime,w
  3170  0F2D  1383               	bcf	3,7	;select IRP bank0
  3171  0F2E  0080               	movwf	0
  3172                           
  3173                           ;rtc.c: 145: rtc->hour= I2C_Read(1);
  3174  0F2F  3001               	movlw	1
  3175  0F30  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3176  0F35  00F3               	movwf	??_RTC_GetDateTime
  3177  0F36  0874               	movf	RTC_GetDateTime@rtc,w
  3178  0F37  3E02               	addlw	2
  3179  0F38  0084               	movwf	4
  3180  0F39  0873               	movf	??_RTC_GetDateTime,w
  3181  0F3A  1383               	bcf	3,7	;select IRP bank0
  3182  0F3B  0080               	movwf	0
  3183                           
  3184                           ;rtc.c: 146: rtc->weekDay = I2C_Read(1);
  3185  0F3C  3001               	movlw	1
  3186  0F3D  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3187  0F42  00F3               	movwf	??_RTC_GetDateTime
  3188  0F43  0874               	movf	RTC_GetDateTime@rtc,w
  3189  0F44  3E03               	addlw	3
  3190  0F45  0084               	movwf	4
  3191  0F46  0873               	movf	??_RTC_GetDateTime,w
  3192  0F47  1383               	bcf	3,7	;select IRP bank0
  3193  0F48  0080               	movwf	0
  3194                           
  3195                           ;rtc.c: 147: rtc->date= I2C_Read(1);
  3196  0F49  3001               	movlw	1
  3197  0F4A  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3198  0F4F  00F3               	movwf	??_RTC_GetDateTime
  3199  0F50  0874               	movf	RTC_GetDateTime@rtc,w
  3200  0F51  3E04               	addlw	4
  3201  0F52  0084               	movwf	4
  3202  0F53  0873               	movf	??_RTC_GetDateTime,w
  3203  0F54  1383               	bcf	3,7	;select IRP bank0
  3204  0F55  0080               	movwf	0
  3205                           
  3206                           ;rtc.c: 148: rtc->month=I2C_Read(1);
  3207  0F56  3001               	movlw	1
  3208  0F57  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3209  0F5C  00F3               	movwf	??_RTC_GetDateTime
  3210  0F5D  0874               	movf	RTC_GetDateTime@rtc,w
  3211  0F5E  3E05               	addlw	5
  3212  0F5F  0084               	movwf	4
  3213  0F60  0873               	movf	??_RTC_GetDateTime,w
  3214  0F61  1383               	bcf	3,7	;select IRP bank0
  3215  0F62  0080               	movwf	0
  3216                           
  3217                           ;rtc.c: 149: rtc->year =I2C_Read(0);
  3218  0F63  3000               	movlw	0
  3219  0F64  160A  118A  238B  120A  158A  	fcall	_I2C_Read
  3220  0F69  00F3               	movwf	??_RTC_GetDateTime
  3221  0F6A  0874               	movf	RTC_GetDateTime@rtc,w
  3222  0F6B  3E06               	addlw	6
  3223  0F6C  0084               	movwf	4
  3224  0F6D  0873               	movf	??_RTC_GetDateTime,w
  3225  0F6E  1383               	bcf	3,7	;select IRP bank0
  3226  0F6F  0080               	movwf	0
  3227                           
  3228                           ;rtc.c: 151: I2C_Stop();
  3229  0F70  120A  118A  2003   	fcall	_I2C_Stop
  3230  0F73  0008               	return
  3231  0F74                     __end_of_RTC_GetDateTime:	
  3232                           
  3233                           	psect	text7
  3234  12DF                     __ptext7:	
  3235 ;; *************** function _I2C_Write *****************
  3236 ;; Defined at:
  3237 ;;		line 179 in file "../00-libfiles/i2c.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  v_i2cData_u8    1    wreg     unsigned char 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  v_i2cData_u8    1    0[COMMON] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3251 ;;      Params:         0       0       0       0       0
  3252 ;;      Locals:         1       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0
  3254 ;;      Totals:         1       0       0       0       0
  3255 ;;Total ram usage:        1 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    1
  3258 ;; This function calls:
  3259 ;;		_i2c_WaitForIdle
  3260 ;; This function is called by:
  3261 ;;		_RTC_Init
  3262 ;;		_RTC_SetDateTime
  3263 ;;		_RTC_GetDateTime
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _I2C_Write
  3269  12DF                     _I2C_Write:	
  3270                           
  3271                           ;incstack = 0
  3272                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  3273                           ;I2C_Write@v_i2cData_u8 stored from wreg
  3274  12DF  00F0               	movwf	I2C_Write@v_i2cData_u8
  3275                           
  3276                           ;i2c.c: 183: SSPBUF = v_i2cData_u8;
  3277  12E0  0870               	movf	I2C_Write@v_i2cData_u8,w
  3278  12E1  1283               	bcf	3,5	;RP0=0, select bank0
  3279  12E2  1303               	bcf	3,6	;RP1=0, select bank0
  3280  12E3  0093               	movwf	19	;volatile
  3281  12E4                     l220:	
  3282                           ;i2c.c: 184: while(BF==1);
  3283                           
  3284  12E4  1683               	bsf	3,5	;RP0=1, select bank1
  3285  12E5  1303               	bcf	3,6	;RP1=0, select bank1
  3286  12E6  1814               	btfsc	20,0	;volatile
  3287  12E7  2AE4               	goto	l220
  3288                           
  3289                           ;i2c.c: 185: i2c_WaitForIdle();
  3290  12E8  160A  118A  22D4   	fcall	_i2c_WaitForIdle
  3291  12EB  0008               	return
  3292  12EC                     __end_of_I2C_Write:	
  3293                           
  3294                           	psect	text8
  3295  0003                     __ptext8:	
  3296 ;; *************** function _I2C_Stop *****************
  3297 ;; Defined at:
  3298 ;;		line 147 in file "../00-libfiles/i2c.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		None
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3312 ;;      Params:         0       0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0
  3315 ;;      Totals:         0       0       0       0       0
  3316 ;;Total ram usage:        0 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; This function calls:
  3319 ;;		Nothing
  3320 ;; This function is called by:
  3321 ;;		_RTC_Init
  3322 ;;		_RTC_SetDateTime
  3323 ;;		_RTC_GetDateTime
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           
  3328                           ;psect for function _I2C_Stop
  3329  0003                     _I2C_Stop:	
  3330                           
  3331                           ;i2c.c: 149: PEN = 1;
  3332                           
  3333                           ;incstack = 0
  3334                           ; Regs used in _I2C_Stop: []
  3335  0003  1683               	bsf	3,5	;RP0=1, select bank1
  3336  0004  1303               	bcf	3,6	;RP1=0, select bank1
  3337  0005  1511               	bsf	17,2	;volatile
  3338  0006                     l214:	
  3339                           ;i2c.c: 150: while(PEN == 1);
  3340                           
  3341  0006  1D11               	btfss	17,2	;volatile
  3342  0007  0008               	return
  3343  0008  2806               	goto	l214
  3344  0009                     __end_of_I2C_Stop:	
  3345                           
  3346                           	psect	text9
  3347  1279                     __ptext9:	
  3348 ;; *************** function _I2C_Start *****************
  3349 ;; Defined at:
  3350 ;;		line 118 in file "../00-libfiles/i2c.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		None
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3364 ;;      Params:         0       0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0
  3367 ;;      Totals:         0       0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_RTC_Init
  3374 ;;		_RTC_SetDateTime
  3375 ;;		_RTC_GetDateTime
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _I2C_Start
  3381  1279                     _I2C_Start:	
  3382                           
  3383                           ;i2c.c: 120: SEN = 1;
  3384                           
  3385                           ;incstack = 0
  3386                           ; Regs used in _I2C_Start: []
  3387  1279  1683               	bsf	3,5	;RP0=1, select bank1
  3388  127A  1303               	bcf	3,6	;RP1=0, select bank1
  3389  127B  1411               	bsf	17,0	;volatile
  3390  127C                     l208:	
  3391                           ;i2c.c: 121: while(SEN == 1);
  3392                           
  3393  127C  1C11               	btfss	17,0	;volatile
  3394  127D  0008               	return
  3395  127E  2A7C               	goto	l208
  3396  127F                     __end_of_I2C_Start:	
  3397                           
  3398                           	psect	text10
  3399  138B                     __ptext10:	
  3400 ;; *************** function _I2C_Read *****************
  3401 ;; Defined at:
  3402 ;;		line 214 in file "../00-libfiles/i2c.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  v_ackOption_    1    wreg     unsigned char 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  v_ackOption_    1    1[COMMON] unsigned char 
  3407 ;;  v_i2cData_u8    1    2[COMMON] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      unsigned char 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0, pclath, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3417 ;;      Params:         0       0       0       0       0
  3418 ;;      Locals:         2       0       0       0       0
  3419 ;;      Temps:          1       0       0       0       0
  3420 ;;      Totals:         3       0       0       0       0
  3421 ;;Total ram usage:        3 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    1
  3424 ;; This function calls:
  3425 ;;		_i2c_Ack
  3426 ;;		_i2c_NoAck
  3427 ;;		_i2c_WaitForIdle
  3428 ;; This function is called by:
  3429 ;;		_RTC_GetDateTime
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _I2C_Read
  3435  138B                     _I2C_Read:	
  3436                           
  3437                           ;incstack = 0
  3438                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  3439                           ;I2C_Read@v_ackOption_u8 stored from wreg
  3440  138B  00F1               	movwf	I2C_Read@v_ackOption_u8
  3441                           
  3442                           ;i2c.c: 216: uint8_t v_i2cData_u8=0x00;
  3443  138C  01F2               	clrf	I2C_Read@v_i2cData_u8
  3444                           
  3445                           ;i2c.c: 218: RCEN = 1;
  3446  138D  1683               	bsf	3,5	;RP0=1, select bank1
  3447  138E  1303               	bcf	3,6	;RP1=0, select bank1
  3448  138F  1591               	bsf	17,3	;volatile
  3449  1390                     l226:	
  3450                           ;i2c.c: 219: while(BF==0);
  3451                           
  3452  1390  1C14               	btfss	20,0	;volatile
  3453  1391  2B90               	goto	l226
  3454                           
  3455                           ;i2c.c: 220: v_i2cData_u8 = SSPBUF;
  3456  1392  1283               	bcf	3,5	;RP0=0, select bank0
  3457  1393  1303               	bcf	3,6	;RP1=0, select bank0
  3458  1394  0813               	movf	19,w	;volatile
  3459  1395  00F0               	movwf	??_I2C_Read
  3460  1396  0870               	movf	??_I2C_Read,w
  3461  1397  00F2               	movwf	I2C_Read@v_i2cData_u8
  3462                           
  3463                           ;i2c.c: 221: i2c_WaitForIdle();
  3464  1398  160A  118A  22D4  160A  118A  	fcall	_i2c_WaitForIdle
  3465                           
  3466                           ;i2c.c: 223: if(v_ackOption_u8==1)
  3467  139D  0371               	decf	I2C_Read@v_ackOption_u8,w
  3468  139E  1D03               	btfss	3,2
  3469  139F  2BA6               	goto	l2620
  3470                           
  3471                           ;i2c.c: 224: {
  3472                           ;i2c.c: 225: i2c_Ack();
  3473  13A0  160A  118A  2286  160A  118A  	fcall	_i2c_Ack
  3474                           
  3475                           ;i2c.c: 226: }
  3476  13A5  2BA9               	goto	l2622
  3477  13A6                     l2620:	
  3478                           
  3479                           ;i2c.c: 227: else
  3480                           ;i2c.c: 228: {
  3481                           ;i2c.c: 229: i2c_NoAck();
  3482  13A6  160A  118A  228D   	fcall	_i2c_NoAck
  3483  13A9                     l2622:	
  3484                           
  3485                           ;i2c.c: 230: }
  3486                           ;i2c.c: 232: return v_i2cData_u8;
  3487  13A9  0872               	movf	I2C_Read@v_i2cData_u8,w
  3488  13AA  0008               	return
  3489  13AB                     __end_of_I2C_Read:	
  3490                           
  3491                           	psect	text11
  3492  12D4                     __ptext11:	
  3493 ;; *************** function _i2c_WaitForIdle *****************
  3494 ;; Defined at:
  3495 ;;		line 258 in file "../00-libfiles/i2c.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		None
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3509 ;;      Params:         0       0       0       0       0
  3510 ;;      Locals:         0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0
  3512 ;;      Totals:         0       0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		_I2C_Write
  3519 ;;		_I2C_Read
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           
  3524                           ;psect for function _i2c_WaitForIdle
  3525  12D4                     _i2c_WaitForIdle:	
  3526  12D4                     l234:	
  3527                           ;i2c.c: 260: while ( (SEN == 1) || (RSEN == 1) || (PEN == 1) || (RCEN == 1) || (R_W == 1
      +                          ) );
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _i2c_WaitForIdle: []
  3531                           
  3532  12D4  1683               	bsf	3,5	;RP0=1, select bank1
  3533  12D5  1303               	bcf	3,6	;RP1=0, select bank1
  3534  12D6  1C11               	btfss	17,0	;volatile
  3535  12D7  1891               	btfsc	17,1	;volatile
  3536  12D8  2AD4               	goto	l234
  3537  12D9  1D11               	btfss	17,2	;volatile
  3538  12DA  1991               	btfsc	17,3	;volatile
  3539  12DB  2AD4               	goto	l234
  3540  12DC  1D14               	btfss	20,2	;volatile
  3541  12DD  0008               	return
  3542  12DE  2AD4               	goto	l234
  3543  12DF                     __end_of_i2c_WaitForIdle:	
  3544                           
  3545                           	psect	text12
  3546  128D                     __ptext12:	
  3547 ;; *************** function _i2c_NoAck *****************
  3548 ;; Defined at:
  3549 ;;		line 299 in file "../00-libfiles/i2c.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		None
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3563 ;;      Params:         0       0       0       0       0
  3564 ;;      Locals:         0       0       0       0       0
  3565 ;;      Temps:          0       0       0       0       0
  3566 ;;      Totals:         0       0       0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_I2C_Read
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _i2c_NoAck
  3578  128D                     _i2c_NoAck:	
  3579                           
  3580                           ;i2c.c: 301: ACKDT = 1;
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _i2c_NoAck: []
  3584  128D  1683               	bsf	3,5	;RP0=1, select bank1
  3585  128E  1303               	bcf	3,6	;RP1=0, select bank1
  3586  128F  1691               	bsf	17,5	;volatile
  3587                           
  3588                           ;i2c.c: 302: ACKEN = 1;
  3589  1290  1611               	bsf	17,4	;volatile
  3590  1291                     l246:	
  3591                           ;i2c.c: 303: while(ACKEN == 1);
  3592                           
  3593  1291  1E11               	btfss	17,4	;volatile
  3594  1292  0008               	return
  3595  1293  2A91               	goto	l246
  3596  1294                     __end_of_i2c_NoAck:	
  3597                           
  3598                           	psect	text13
  3599  1286                     __ptext13:	
  3600 ;; *************** function _i2c_Ack *****************
  3601 ;; Defined at:
  3602 ;;		line 279 in file "../00-libfiles/i2c.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		None
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3616 ;;      Params:         0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0
  3619 ;;      Totals:         0       0       0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_I2C_Read
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function _i2c_Ack
  3631  1286                     _i2c_Ack:	
  3632                           
  3633                           ;i2c.c: 281: ACKDT = 0;
  3634                           
  3635                           ;incstack = 0
  3636                           ; Regs used in _i2c_Ack: []
  3637  1286  1683               	bsf	3,5	;RP0=1, select bank1
  3638  1287  1303               	bcf	3,6	;RP1=0, select bank1
  3639  1288  1291               	bcf	17,5	;volatile
  3640                           
  3641                           ;i2c.c: 282: ACKEN = 1;
  3642  1289  1611               	bsf	17,4	;volatile
  3643  128A                     l240:	
  3644                           ;i2c.c: 283: while(ACKEN == 1);
  3645                           
  3646  128A  1E11               	btfss	17,4	;volatile
  3647  128B  0008               	return
  3648  128C  2A8A               	goto	l240
  3649  128D                     __end_of_i2c_Ack:	
  3650                           
  3651                           	psect	text14
  3652  1745                     __ptext14:	
  3653 ;; *************** function _keypad_test *****************
  3654 ;; Defined at:
  3655 ;;		line 313 in file "main.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  key             1   76[BANK0 ] unsigned char 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3669 ;;      Params:         0       0       0       0       0
  3670 ;;      Locals:         0       1       0       0       0
  3671 ;;      Temps:          0       7       0       0       0
  3672 ;;      Totals:         0       8       0       0       0
  3673 ;;Total ram usage:        8 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    3
  3676 ;; This function calls:
  3677 ;;		_KEYPAD_GetKey
  3678 ;;		_KEYPAD_Init
  3679 ;;		_UART_Printf
  3680 ;;		_UART_RxChar
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           
  3687                           ;psect for function _keypad_test
  3688  1745                     _keypad_test:	
  3689                           
  3690                           ;main.c: 315: uint8_t key;
  3691                           ;main.c: 316: UART_Printf("\n\rConnections: PORTD");
  3692                           
  3693                           ;incstack = 0
  3694                           ; Regs used in _keypad_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3695  1745  300E               	movlw	low (STR_21| (0+32768))
  3696  1746  1283               	bcf	3,5	;RP0=0, select bank0
  3697  1747  1303               	bcf	3,6	;RP1=0, select bank0
  3698  1748  00C3               	movwf	UART_Printf@argList
  3699  1749  308B               	movlw	high (STR_21| (0+32768))
  3700  174A  00C4               	movwf	UART_Printf@argList+1
  3701  174B  120A  118A  25C9  160A  118A  	fcall	_UART_Printf
  3702                           
  3703                           ;main.c: 317: UART_Printf("\n\rMake connections and hit 'k' to test!");
  3704  1750  3045               	movlw	low (STR_22| (0+32768))
  3705  1751  1283               	bcf	3,5	;RP0=0, select bank0
  3706  1752  1303               	bcf	3,6	;RP1=0, select bank0
  3707  1753  00C3               	movwf	UART_Printf@argList
  3708  1754  308A               	movlw	high (STR_22| (0+32768))
  3709  1755  00C4               	movwf	UART_Printf@argList+1
  3710  1756  120A  118A  25C9  160A  118A  	fcall	_UART_Printf
  3711  175B                     l3340:	
  3712                           ;main.c: 318: while(UART_RxChar()!='k');
  3713                           
  3714  175B  160A  118A  227F  160A  118A  	fcall	_UART_RxChar
  3715  1760  3A6B               	xorlw	107
  3716  1761  1D03               	skipz
  3717  1762  2F5B               	goto	l3340
  3718                           
  3719                           ;main.c: 319: KEYPAD_Init(PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7);
  3720  1763  3019               	movlw	25
  3721  1764  1283               	bcf	3,5	;RP0=0, select bank0
  3722  1765  1303               	bcf	3,6	;RP1=0, select bank0
  3723  1766  00E5               	movwf	??_keypad_test
  3724  1767  0865               	movf	??_keypad_test,w
  3725  1768  00F5               	movwf	KEYPAD_Init@row_1
  3726  1769  301A               	movlw	26
  3727  176A  00E6               	movwf	??_keypad_test+1
  3728  176B  0866               	movf	??_keypad_test+1,w
  3729  176C  00F6               	movwf	KEYPAD_Init@row_2
  3730  176D  301B               	movlw	27
  3731  176E  00E7               	movwf	??_keypad_test+2
  3732  176F  0867               	movf	??_keypad_test+2,w
  3733  1770  00F7               	movwf	KEYPAD_Init@row_3
  3734  1771  301C               	movlw	28
  3735  1772  00E8               	movwf	??_keypad_test+3
  3736  1773  0868               	movf	??_keypad_test+3,w
  3737  1774  00F8               	movwf	KEYPAD_Init@col_0
  3738  1775  301D               	movlw	29
  3739  1776  00E9               	movwf	??_keypad_test+4
  3740  1777  0869               	movf	??_keypad_test+4,w
  3741  1778  00F9               	movwf	KEYPAD_Init@col_1
  3742  1779  301E               	movlw	30
  3743  177A  00EA               	movwf	??_keypad_test+5
  3744  177B  086A               	movf	??_keypad_test+5,w
  3745  177C  00FA               	movwf	KEYPAD_Init@col_2
  3746  177D  301F               	movlw	31
  3747  177E  00EB               	movwf	??_keypad_test+6
  3748  177F  086B               	movf	??_keypad_test+6,w
  3749  1780  00FB               	movwf	KEYPAD_Init@col_3
  3750  1781  3018               	movlw	24
  3751  1782  160A  118A  2692  160A  118A  	fcall	_KEYPAD_Init
  3752  1787                     l3344:	
  3753                           ;main.c: 320: while(1)
  3754                           
  3755                           
  3756                           ;main.c: 321: {
  3757                           ;main.c: 322: key = KEYPAD_GetKey();
  3758  1787  120A  118A  205A  160A  118A  	fcall	_KEYPAD_GetKey
  3759  178C  1283               	bcf	3,5	;RP0=0, select bank0
  3760  178D  1303               	bcf	3,6	;RP1=0, select bank0
  3761  178E  00E5               	movwf	??_keypad_test
  3762  178F  0865               	movf	??_keypad_test,w
  3763  1790  00EC               	movwf	keypad_test@key
  3764                           
  3765                           ;main.c: 323: UART_Printf("\n\r Key:%c", key);
  3766  1791  3062               	movlw	low (STR_23| (0+32768))
  3767  1792  00C3               	movwf	UART_Printf@argList
  3768  1793  308B               	movlw	high (STR_23| (0+32768))
  3769  1794  00C4               	movwf	UART_Printf@argList+1
  3770  1795  086C               	movf	keypad_test@key,w
  3771  1796  00E5               	movwf	??_keypad_test
  3772  1797  01E6               	clrf	??_keypad_test+1
  3773  1798  0865               	movf	??_keypad_test,w
  3774  1799  00C5               	movwf	?_UART_Printf+2
  3775  179A  0866               	movf	??_keypad_test+1,w
  3776  179B  00C6               	movwf	?_UART_Printf+3
  3777  179C  120A  118A  25C9  160A  118A  	fcall	_UART_Printf
  3778  17A1  2F87               	goto	l3344
  3779  17A2                     __end_of_keypad_test:	
  3780                           
  3781                           	psect	text15
  3782  1692                     __ptext15:	
  3783 ;; *************** function _KEYPAD_Init *****************
  3784 ;; Defined at:
  3785 ;;		line 110 in file "../00-libfiles/keypad.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  row_0           1    wreg     enum E22
  3788 ;;  row_1           1    5[COMMON] enum E22
  3789 ;;  row_2           1    6[COMMON] enum E22
  3790 ;;  row_3           1    7[COMMON] enum E22
  3791 ;;  col_0           1    8[COMMON] enum E22
  3792 ;;  col_1           1    9[COMMON] enum E22
  3793 ;;  col_2           1   10[COMMON] enum E22
  3794 ;;  col_3           1   11[COMMON] enum E22
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  row_0           1    0[BANK0 ] enum E22
  3797 ;;  i               1    1[BANK0 ] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      void 
  3800 ;; Registers used:
  3801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3807 ;;      Params:         7       0       0       0       0
  3808 ;;      Locals:         0       2       0       0       0
  3809 ;;      Temps:          1       0       0       0       0
  3810 ;;      Totals:         8       2       0       0       0
  3811 ;;Total ram usage:       10 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    1
  3814 ;; This function calls:
  3815 ;;		_GPIO_PinDirection
  3816 ;; This function is called by:
  3817 ;;		_keypad_test
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           
  3822                           ;psect for function _KEYPAD_Init
  3823  1692                     _KEYPAD_Init:	
  3824                           
  3825                           ;incstack = 0
  3826                           ; Regs used in _KEYPAD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3827                           ;KEYPAD_Init@row_0 stored from wreg
  3828  1692  1283               	bcf	3,5	;RP0=0, select bank0
  3829  1693  1303               	bcf	3,6	;RP1=0, select bank0
  3830  1694  00A0               	movwf	KEYPAD_Init@row_0
  3831                           
  3832                           ;keypad.c: 120: uint8_t i;
  3833                           ;keypad.c: 122: A_RowsPins_U8[0] = row_0;
  3834  1695  0820               	movf	KEYPAD_Init@row_0,w
  3835  1696  00FC               	movwf	??_KEYPAD_Init
  3836  1697  087C               	movf	??_KEYPAD_Init,w
  3837  1698  1683               	bsf	3,5	;RP0=1, select bank1
  3838  1699  1303               	bcf	3,6	;RP1=0, select bank1
  3839  169A  00B2               	movwf	_A_RowsPins_U8^(0+128)
  3840                           
  3841                           ;keypad.c: 123: A_RowsPins_U8[1] = row_1;
  3842  169B  0875               	movf	KEYPAD_Init@row_1,w
  3843  169C  00FC               	movwf	??_KEYPAD_Init
  3844  169D  087C               	movf	??_KEYPAD_Init,w
  3845  169E  00B3               	movwf	(_A_RowsPins_U8^(0+128)+1)
  3846                           
  3847                           ;keypad.c: 124: A_RowsPins_U8[2] = row_2;
  3848  169F  0876               	movf	KEYPAD_Init@row_2,w
  3849  16A0  00FC               	movwf	??_KEYPAD_Init
  3850  16A1  087C               	movf	??_KEYPAD_Init,w
  3851  16A2  00B4               	movwf	(_A_RowsPins_U8^(0+128)+2)
  3852                           
  3853                           ;keypad.c: 125: A_RowsPins_U8[3] = row_3;
  3854  16A3  0877               	movf	KEYPAD_Init@row_3,w
  3855  16A4  00FC               	movwf	??_KEYPAD_Init
  3856  16A5  087C               	movf	??_KEYPAD_Init,w
  3857  16A6  00B5               	movwf	(_A_RowsPins_U8^(0+128)+3)
  3858                           
  3859                           ;keypad.c: 127: A_ColsPins_U8[0] = col_0;
  3860  16A7  0878               	movf	KEYPAD_Init@col_0,w
  3861  16A8  00FC               	movwf	??_KEYPAD_Init
  3862  16A9  087C               	movf	??_KEYPAD_Init,w
  3863  16AA  00AE               	movwf	_A_ColsPins_U8^(0+128)
  3864                           
  3865                           ;keypad.c: 128: A_ColsPins_U8[1] = col_1;
  3866  16AB  0879               	movf	KEYPAD_Init@col_1,w
  3867  16AC  00FC               	movwf	??_KEYPAD_Init
  3868  16AD  087C               	movf	??_KEYPAD_Init,w
  3869  16AE  00AF               	movwf	(_A_ColsPins_U8^(0+128)+1)
  3870                           
  3871                           ;keypad.c: 129: A_ColsPins_U8[2] = col_2;
  3872  16AF  087A               	movf	KEYPAD_Init@col_2,w
  3873  16B0  00FC               	movwf	??_KEYPAD_Init
  3874  16B1  087C               	movf	??_KEYPAD_Init,w
  3875  16B2  00B0               	movwf	(_A_ColsPins_U8^(0+128)+2)
  3876                           
  3877                           ;keypad.c: 130: A_ColsPins_U8[3] = col_3;
  3878  16B3  087B               	movf	KEYPAD_Init@col_3,w
  3879  16B4  00FC               	movwf	??_KEYPAD_Init
  3880  16B5  087C               	movf	??_KEYPAD_Init,w
  3881  16B6  00B1               	movwf	(_A_ColsPins_U8^(0+128)+3)
  3882                           
  3883                           ;keypad.c: 132: for(i=0;i<(4);i++)
  3884  16B7  1283               	bcf	3,5	;RP0=0, select bank0
  3885  16B8  1303               	bcf	3,6	;RP1=0, select bank0
  3886  16B9  01A1               	clrf	KEYPAD_Init@i
  3887  16BA  3004               	movlw	4
  3888  16BB  0221               	subwf	KEYPAD_Init@i,w
  3889  16BC  1803               	btfsc	3,0
  3890  16BD  2ED3               	goto	l2846
  3891  16BE                     l2840:	
  3892                           
  3893                           ;keypad.c: 133: {
  3894                           ;keypad.c: 134: GPIO_PinDirection(A_RowsPins_U8[i],0x00u);
  3895  16BE  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3896  16BF  0821               	movf	KEYPAD_Init@i,w
  3897  16C0  3EB2               	addlw	(low (_A_RowsPins_U8| 0))& (0+255)
  3898  16C1  0084               	movwf	4
  3899  16C2  1383               	bcf	3,7	;select IRP bank1
  3900  16C3  0800               	movf	0,w
  3901  16C4  120A  118A  2325  160A  118A  	fcall	_GPIO_PinDirection
  3902  16C9  3001               	movlw	1
  3903  16CA  00FC               	movwf	??_KEYPAD_Init
  3904  16CB  087C               	movf	??_KEYPAD_Init,w
  3905  16CC  1283               	bcf	3,5	;RP0=0, select bank0
  3906  16CD  1303               	bcf	3,6	;RP1=0, select bank0
  3907  16CE  07A1               	addwf	KEYPAD_Init@i,f
  3908  16CF  3004               	movlw	4
  3909  16D0  0221               	subwf	KEYPAD_Init@i,w
  3910  16D1  1C03               	skipc
  3911  16D2  2EBE               	goto	l2840
  3912  16D3                     l2846:	
  3913                           
  3914                           ;keypad.c: 135: }
  3915                           ;keypad.c: 137: for(i=0;i<(4);i++)
  3916  16D3  01A1               	clrf	KEYPAD_Init@i
  3917  16D4                     L1:	
  3918  16D4  3004               	movlw	4
  3919  16D5  0221               	subwf	KEYPAD_Init@i,w
  3920  16D6  1803               	btfsc	3,0
  3921  16D7  0008               	return
  3922                           
  3923                           ;keypad.c: 138: {
  3924                           ;keypad.c: 139: GPIO_PinDirection(A_ColsPins_U8[i],0x01u);
  3925  16D8  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3926  16D9  0AF0               	incf	GPIO_PinDirection@var_pinDirn_u8,f
  3927  16DA  0821               	movf	KEYPAD_Init@i,w
  3928  16DB  3EAE               	addlw	(low (_A_ColsPins_U8| 0))& (0+255)
  3929  16DC  0084               	movwf	4
  3930  16DD  1383               	bcf	3,7	;select IRP bank1
  3931  16DE  0800               	movf	0,w
  3932  16DF  120A  118A  2325  160A  118A  	fcall	_GPIO_PinDirection
  3933  16E4  3001               	movlw	1
  3934  16E5  00FC               	movwf	??_KEYPAD_Init
  3935  16E6  087C               	movf	??_KEYPAD_Init,w
  3936  16E7  1283               	bcf	3,5	;RP0=0, select bank0
  3937  16E8  1303               	bcf	3,6	;RP1=0, select bank0
  3938  16E9  07A1               	addwf	KEYPAD_Init@i,f
  3939  16EA  2ED4               	goto	L1
  3940  16EB                     __end_of_KEYPAD_Init:	
  3941                           
  3942                           	psect	text16
  3943  005A                     __ptext16:	
  3944 ;; *************** function _KEYPAD_GetKey *****************
  3945 ;; Defined at:
  3946 ;;		line 256 in file "../00-libfiles/keypad.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;		None
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;  i               1    2[BANK0 ] unsigned char 
  3951 ;;  j               1    1[BANK0 ] unsigned char 
  3952 ;;  v_KeyPressed    1    0[BANK0 ] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      unsigned char 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3962 ;;      Params:         0       0       0       0       0
  3963 ;;      Locals:         0       3       0       0       0
  3964 ;;      Temps:          4       0       0       0       0
  3965 ;;      Totals:         4       3       0       0       0
  3966 ;;Total ram usage:        7 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    2
  3969 ;; This function calls:
  3970 ;;		_GPIO_PinRead
  3971 ;;		_GPIO_PinWrite
  3972 ;;		_keypad_WaitForKeyPress
  3973 ;;		_keypad_WaitForKeyRelease
  3974 ;; This function is called by:
  3975 ;;		_keypad_test
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           
  3980                           ;psect for function _KEYPAD_GetKey
  3981  005A                     _KEYPAD_GetKey:	
  3982                           
  3983                           ;keypad.c: 258: uint8_t i,j,v_KeyPressed_u8 = 0;
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _KEYPAD_GetKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3987  005A  1283               	bcf	3,5	;RP0=0, select bank0
  3988  005B  1303               	bcf	3,6	;RP1=0, select bank0
  3989  005C  01A0               	clrf	KEYPAD_GetKey@v_KeyPressed_u8
  3990                           
  3991                           ;keypad.c: 261: keypad_WaitForKeyRelease();
  3992  005D  120A  158A  2441  120A  118A  	fcall	_keypad_WaitForKeyRelease
  3993                           
  3994                           ;keypad.c: 262: keypad_WaitForKeyPress();
  3995  0062  120A  158A  23E1  120A  118A  	fcall	_keypad_WaitForKeyPress
  3996                           
  3997                           ;keypad.c: 264: for (i=0;i<(4);i++)
  3998  0067  1283               	bcf	3,5	;RP0=0, select bank0
  3999  0068  1303               	bcf	3,6	;RP1=0, select bank0
  4000  0069  01A2               	clrf	KEYPAD_GetKey@i
  4001  006A  3004               	movlw	4
  4002  006B  0222               	subwf	KEYPAD_GetKey@i,w
  4003  006C  1803               	btfsc	3,0
  4004  006D  2884               	goto	l2874
  4005  006E                     l2868:	
  4006                           
  4007                           ;keypad.c: 265: {
  4008                           ;keypad.c: 266: GPIO_PinWrite(A_RowsPins_U8[i],0x01u);
  4009  006E  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4010  006F  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  4011  0070  0822               	movf	KEYPAD_GetKey@i,w
  4012  0071  3EB2               	addlw	(low (_A_RowsPins_U8| 0))& (0+255)
  4013  0072  0084               	movwf	4
  4014  0073  1383               	bcf	3,7	;select IRP bank1
  4015  0074  0800               	movf	0,w
  4016  0075  120A  118A  23FE  120A  118A  	fcall	_GPIO_PinWrite
  4017  007A  3001               	movlw	1
  4018  007B  00F8               	movwf	??_KEYPAD_GetKey
  4019  007C  0878               	movf	??_KEYPAD_GetKey,w
  4020  007D  1283               	bcf	3,5	;RP0=0, select bank0
  4021  007E  1303               	bcf	3,6	;RP1=0, select bank0
  4022  007F  07A2               	addwf	KEYPAD_GetKey@i,f
  4023  0080  3004               	movlw	4
  4024  0081  0222               	subwf	KEYPAD_GetKey@i,w
  4025  0082  1C03               	skipc
  4026  0083  286E               	goto	l2868
  4027  0084                     l2874:	
  4028                           
  4029                           ;keypad.c: 267: }
  4030                           ;keypad.c: 269: for (i=0;(i<(4));i++)
  4031  0084  01A2               	clrf	KEYPAD_GetKey@i
  4032  0085  3004               	movlw	4
  4033  0086  0222               	subwf	KEYPAD_GetKey@i,w
  4034  0087  1803               	btfsc	3,0
  4035  0088  28D0               	goto	l2906
  4036  0089                     l2880:	
  4037                           
  4038                           ;keypad.c: 270: {
  4039                           ;keypad.c: 271: GPIO_PinWrite(A_RowsPins_U8[i],0x00u);
  4040  0089  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4041  008A  0822               	movf	KEYPAD_GetKey@i,w
  4042  008B  3EB2               	addlw	(low (_A_RowsPins_U8| 0))& (0+255)
  4043  008C  0084               	movwf	4
  4044  008D  1383               	bcf	3,7	;select IRP bank1
  4045  008E  0800               	movf	0,w
  4046  008F  120A  118A  23FE  120A  118A  	fcall	_GPIO_PinWrite
  4047                           
  4048                           ;keypad.c: 273: for(j=0; (j<(4)); j++)
  4049  0094  1283               	bcf	3,5	;RP0=0, select bank0
  4050  0095  1303               	bcf	3,6	;RP1=0, select bank0
  4051  0096  01A1               	clrf	KEYPAD_GetKey@j
  4052  0097  3004               	movlw	4
  4053  0098  0221               	subwf	KEYPAD_GetKey@j,w
  4054  0099  1803               	btfsc	3,0
  4055  009A  28B7               	goto	l2896
  4056  009B                     l2888:	
  4057                           
  4058                           ;keypad.c: 274: {
  4059                           ;keypad.c: 275: if(GPIO_PinRead(A_ColsPins_U8[j]) == 0)
  4060  009B  0821               	movf	KEYPAD_GetKey@j,w
  4061  009C  3EAE               	addlw	(low (_A_ColsPins_U8| 0))& (0+255)
  4062  009D  0084               	movwf	4
  4063  009E  1383               	bcf	3,7	;select IRP bank1
  4064  009F  0800               	movf	0,w
  4065  00A0  120A  158A  24A1  120A  118A  	fcall	_GPIO_PinRead
  4066  00A5  3A00               	xorlw	0
  4067  00A6  1D03               	skipz
  4068  00A7  28AD               	goto	l2892
  4069                           
  4070                           ;keypad.c: 276: {
  4071                           ;keypad.c: 277: v_KeyPressed_u8 = 1;
  4072  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  4073  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  4074  00AA  01A0               	clrf	KEYPAD_GetKey@v_KeyPressed_u8
  4075  00AB  0AA0               	incf	KEYPAD_GetKey@v_KeyPressed_u8,f
  4076                           
  4077                           ;keypad.c: 278: break;
  4078  00AC  28B7               	goto	l2896
  4079  00AD                     l2892:	
  4080  00AD  3001               	movlw	1
  4081  00AE  00F8               	movwf	??_KEYPAD_GetKey
  4082  00AF  0878               	movf	??_KEYPAD_GetKey,w
  4083  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  4084  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4085  00B2  07A1               	addwf	KEYPAD_GetKey@j,f
  4086  00B3  3004               	movlw	4
  4087  00B4  0221               	subwf	KEYPAD_GetKey@j,w
  4088  00B5  1C03               	skipc
  4089  00B6  289B               	goto	l2888
  4090  00B7                     l2896:	
  4091                           
  4092                           ;keypad.c: 279: }
  4093                           ;keypad.c: 280: }
  4094                           ;keypad.c: 282: if(v_KeyPressed_u8 ==1)
  4095  00B7  0320               	decf	KEYPAD_GetKey@v_KeyPressed_u8,w
  4096  00B8  1903               	btfsc	3,2
  4097  00B9  28D0               	goto	l2906
  4098                           
  4099                           ;keypad.c: 285: }
  4100                           ;keypad.c: 287: GPIO_PinWrite(A_RowsPins_U8[i],0x01u);
  4101                           
  4102                           ;keypad.c: 283: {
  4103                           ;keypad.c: 284: break;
  4104  00BA  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4105  00BB  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  4106  00BC  0822               	movf	KEYPAD_GetKey@i,w
  4107  00BD  3EB2               	addlw	(low (_A_RowsPins_U8| 0))& (0+255)
  4108  00BE  0084               	movwf	4
  4109  00BF  1383               	bcf	3,7	;select IRP bank1
  4110  00C0  0800               	movf	0,w
  4111  00C1  120A  118A  23FE  120A  118A  	fcall	_GPIO_PinWrite
  4112  00C6  3001               	movlw	1
  4113  00C7  00F8               	movwf	??_KEYPAD_GetKey
  4114  00C8  0878               	movf	??_KEYPAD_GetKey,w
  4115  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  4116  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  4117  00CB  07A2               	addwf	KEYPAD_GetKey@i,f
  4118  00CC  3004               	movlw	4
  4119  00CD  0222               	subwf	KEYPAD_GetKey@i,w
  4120  00CE  1C03               	skipc
  4121  00CF  2889               	goto	l2880
  4122  00D0                     l2906:	
  4123                           
  4124                           ;keypad.c: 288: }
  4125                           ;keypad.c: 290: if(i<(4))
  4126  00D0  3004               	movlw	4
  4127  00D1  0222               	subwf	KEYPAD_GetKey@i,w
  4128  00D2  1803               	skipnc
  4129  00D3  28F3               	goto	l2910
  4130                           
  4131                           ;keypad.c: 291: v_KeyPressed_u8 = A_KeyLookUptable_U8[i][j];
  4132  00D4  0822               	movf	KEYPAD_GetKey@i,w
  4133  00D5  00F8               	movwf	??_KEYPAD_GetKey
  4134  00D6  3001               	movlw	1
  4135  00D7                     u3425:	
  4136  00D7  1003               	clrc
  4137  00D8  0DF8               	rlf	??_KEYPAD_GetKey,f
  4138  00D9  3EFF               	addlw	-1
  4139  00DA  1D03               	skipz
  4140  00DB  28D7               	goto	u3425
  4141  00DC  1003               	clrc
  4142  00DD  0D78               	rlf	??_KEYPAD_GetKey,w
  4143  00DE  3E12               	addlw	low (_A_KeyLookUptable_U8| (0+32768))
  4144  00DF  00F9               	movwf	??_KEYPAD_GetKey+1
  4145  00E0  3088               	movlw	high (_A_KeyLookUptable_U8| (0+32768))
  4146  00E1  1803               	skipnc
  4147  00E2  3E01               	addlw	1
  4148  00E3  00FA               	movwf	??_KEYPAD_GetKey+2
  4149  00E4  0821               	movf	KEYPAD_GetKey@j,w
  4150  00E5  0779               	addwf	??_KEYPAD_GetKey+1,w
  4151  00E6  0084               	movwf	4
  4152  00E7  087A               	movf	??_KEYPAD_GetKey+2,w
  4153  00E8  1803               	skipnc
  4154  00E9  0A7A               	incf	??_KEYPAD_GetKey+2,w
  4155  00EA  00FF               	movwf	127
  4156  00EB  120A  158A  2000  120A  118A  	fcall	stringtab
  4157  00F0  00FB               	movwf	??_KEYPAD_GetKey+3
  4158  00F1  087B               	movf	??_KEYPAD_GetKey+3,w
  4159  00F2  28F6               	goto	L2
  4160  00F3                     l2910:	
  4161                           
  4162                           ;keypad.c: 292: else
  4163                           ;keypad.c: 293: v_KeyPressed_u8 = ('x');
  4164  00F3  3078               	movlw	120
  4165  00F4  00F8               	movwf	??_KEYPAD_GetKey
  4166  00F5  0878               	movf	??_KEYPAD_GetKey,w
  4167  00F6                     L2:	
  4168  00F6  00A0               	movwf	KEYPAD_GetKey@v_KeyPressed_u8
  4169                           
  4170                           ;keypad.c: 296: return v_KeyPressed_u8;
  4171  00F7  0820               	movf	KEYPAD_GetKey@v_KeyPressed_u8,w
  4172  00F8  0008               	return
  4173  00F9                     __end_of_KEYPAD_GetKey:	
  4174                           
  4175                           	psect	text17
  4176  0C41                     __ptext17:	
  4177 ;; *************** function _keypad_WaitForKeyRelease *****************
  4178 ;; Defined at:
  4179 ;;		line 155 in file "../00-libfiles/keypad.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  i               1    7[COMMON] unsigned char 
  4184 ;;  v_keyStatus_    1    6[COMMON] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4194 ;;      Params:         0       0       0       0       0
  4195 ;;      Locals:         2       0       0       0       0
  4196 ;;      Temps:          1       0       0       0       0
  4197 ;;      Totals:         3       0       0       0       0
  4198 ;;Total ram usage:        3 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    1
  4201 ;; This function calls:
  4202 ;;		_DELAY_us
  4203 ;;		_GPIO_PinRead
  4204 ;;		_GPIO_PinWrite
  4205 ;; This function is called by:
  4206 ;;		_KEYPAD_GetKey
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _keypad_WaitForKeyRelease
  4212  0C41                     _keypad_WaitForKeyRelease:	
  4213                           
  4214                           ;keypad.c: 158: uint8_t i,v_keyStatus_u8;
  4215                           ;keypad.c: 160: for (i=0;i<(4);i++)
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _keypad_WaitForKeyRelease: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4219  0C41  01F7               	clrf	keypad_WaitForKeyRelease@i
  4220  0C42  3004               	movlw	4
  4221  0C43  0277               	subwf	keypad_WaitForKeyRelease@i,w
  4222  0C44  1803               	btfsc	3,0
  4223  0C45  2C59               	goto	l276
  4224  0C46                     l2632:	
  4225                           
  4226                           ;keypad.c: 161: {
  4227                           ;keypad.c: 162: GPIO_PinWrite(A_RowsPins_U8[i],0x00u);
  4228  0C46  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4229  0C47  0877               	movf	keypad_WaitForKeyRelease@i,w
  4230  0C48  3EB2               	addlw	(low (_A_RowsPins_U8| 0))& (0+255)
  4231  0C49  0084               	movwf	4
  4232  0C4A  1383               	bcf	3,7	;select IRP bank1
  4233  0C4B  0800               	movf	0,w
  4234  0C4C  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  4235  0C51  3001               	movlw	1
  4236  0C52  00F5               	movwf	??_keypad_WaitForKeyRelease
  4237  0C53  0875               	movf	??_keypad_WaitForKeyRelease,w
  4238  0C54  07F7               	addwf	keypad_WaitForKeyRelease@i,f
  4239  0C55  3004               	movlw	4
  4240  0C56  0277               	subwf	keypad_WaitForKeyRelease@i,w
  4241  0C57  1C03               	skipc
  4242  0C58  2C46               	goto	l2632
  4243  0C59                     l276:	
  4244                           ;keypad.c: 166: {
  4245                           ;keypad.c: 167: do
  4246                           
  4247                           ;keypad.c: 163: }
  4248                           ;keypad.c: 165: do
  4249                           
  4250                           
  4251                           ;keypad.c: 168: {
  4252                           ;keypad.c: 169: v_keyStatus_u8 = 1;
  4253  0C59  01F6               	clrf	keypad_WaitForKeyRelease@v_keyStatus_u8
  4254  0C5A  0AF6               	incf	keypad_WaitForKeyRelease@v_keyStatus_u8,f
  4255                           
  4256                           ;keypad.c: 170: for(i=0; i<(4); i++)
  4257  0C5B  01F7               	clrf	keypad_WaitForKeyRelease@i
  4258  0C5C  3004               	movlw	4
  4259  0C5D  0277               	subwf	keypad_WaitForKeyRelease@i,w
  4260  0C5E  1803               	btfsc	3,0
  4261  0C5F  2C75               	goto	l2650
  4262  0C60                     l2644:	
  4263                           
  4264                           ;keypad.c: 171: {
  4265                           ;keypad.c: 172: v_keyStatus_u8 &= GPIO_PinRead(A_ColsPins_U8[i]);
  4266  0C60  0877               	movf	keypad_WaitForKeyRelease@i,w
  4267  0C61  3EAE               	addlw	(low (_A_ColsPins_U8| 0))& (0+255)
  4268  0C62  0084               	movwf	4
  4269  0C63  1383               	bcf	3,7	;select IRP bank1
  4270  0C64  0800               	movf	0,w
  4271  0C65  120A  158A  24A1  120A  158A  	fcall	_GPIO_PinRead
  4272  0C6A  00F5               	movwf	??_keypad_WaitForKeyRelease
  4273  0C6B  0875               	movf	??_keypad_WaitForKeyRelease,w
  4274  0C6C  05F6               	andwf	keypad_WaitForKeyRelease@v_keyStatus_u8,f
  4275  0C6D  3001               	movlw	1
  4276  0C6E  00F5               	movwf	??_keypad_WaitForKeyRelease
  4277  0C6F  0875               	movf	??_keypad_WaitForKeyRelease,w
  4278  0C70  07F7               	addwf	keypad_WaitForKeyRelease@i,f
  4279  0C71  3004               	movlw	4
  4280  0C72  0277               	subwf	keypad_WaitForKeyRelease@i,w
  4281  0C73  1C03               	skipc
  4282  0C74  2C60               	goto	l2644
  4283  0C75                     l2650:	
  4284                           
  4285                           ;keypad.c: 173: }
  4286                           ;keypad.c: 174: }while(v_keyStatus_u8 == 0);
  4287  0C75  0876               	movf	keypad_WaitForKeyRelease@v_keyStatus_u8,w
  4288  0C76  1903               	btfsc	3,2
  4289  0C77  2C59               	goto	l276
  4290                           
  4291                           ;keypad.c: 176: DELAY_us((10));
  4292  0C78  300A               	movlw	10
  4293  0C79  00F0               	movwf	DELAY_us@us_count
  4294  0C7A  3000               	movlw	0
  4295  0C7B  00F1               	movwf	DELAY_us@us_count+1
  4296  0C7C  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  4297                           
  4298                           ;keypad.c: 178: v_keyStatus_u8 = 1;
  4299  0C81  01F6               	clrf	keypad_WaitForKeyRelease@v_keyStatus_u8
  4300  0C82  0AF6               	incf	keypad_WaitForKeyRelease@v_keyStatus_u8,f
  4301                           
  4302                           ;keypad.c: 179: for(i=0; i<(4); i++)
  4303  0C83  01F7               	clrf	keypad_WaitForKeyRelease@i
  4304  0C84  3004               	movlw	4
  4305  0C85  0277               	subwf	keypad_WaitForKeyRelease@i,w
  4306  0C86  1803               	btfsc	3,0
  4307  0C87  2C9D               	goto	l2668
  4308  0C88                     l2662:	
  4309                           
  4310                           ;keypad.c: 180: {
  4311                           ;keypad.c: 181: v_keyStatus_u8 &= GPIO_PinRead(A_ColsPins_U8[i]);
  4312  0C88  0877               	movf	keypad_WaitForKeyRelease@i,w
  4313  0C89  3EAE               	addlw	(low (_A_ColsPins_U8| 0))& (0+255)
  4314  0C8A  0084               	movwf	4
  4315  0C8B  1383               	bcf	3,7	;select IRP bank1
  4316  0C8C  0800               	movf	0,w
  4317  0C8D  120A  158A  24A1  120A  158A  	fcall	_GPIO_PinRead
  4318  0C92  00F5               	movwf	??_keypad_WaitForKeyRelease
  4319  0C93  0875               	movf	??_keypad_WaitForKeyRelease,w
  4320  0C94  05F6               	andwf	keypad_WaitForKeyRelease@v_keyStatus_u8,f
  4321  0C95  3001               	movlw	1
  4322  0C96  00F5               	movwf	??_keypad_WaitForKeyRelease
  4323  0C97  0875               	movf	??_keypad_WaitForKeyRelease,w
  4324  0C98  07F7               	addwf	keypad_WaitForKeyRelease@i,f
  4325  0C99  3004               	movlw	4
  4326  0C9A  0277               	subwf	keypad_WaitForKeyRelease@i,w
  4327  0C9B  1C03               	skipc
  4328  0C9C  2C88               	goto	l2662
  4329  0C9D                     l2668:	
  4330                           
  4331                           ;keypad.c: 182: }
  4332                           ;keypad.c: 183: }while(v_keyStatus_u8 == 0);
  4333  0C9D  0876               	movf	keypad_WaitForKeyRelease@v_keyStatus_u8,w
  4334  0C9E  1D03               	btfss	3,2
  4335  0C9F  0008               	return
  4336  0CA0  2C59               	goto	l276
  4337  0CA1                     __end_of_keypad_WaitForKeyRelease:	
  4338                           
  4339                           	psect	text18
  4340  0BE1                     __ptext18:	
  4341 ;; *************** function _keypad_WaitForKeyPress *****************
  4342 ;; Defined at:
  4343 ;;		line 201 in file "../00-libfiles/keypad.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  i               1    7[COMMON] unsigned char 
  4348 ;;  v_keyStatus_    1    6[COMMON] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4358 ;;      Params:         0       0       0       0       0
  4359 ;;      Locals:         2       0       0       0       0
  4360 ;;      Temps:          1       0       0       0       0
  4361 ;;      Totals:         3       0       0       0       0
  4362 ;;Total ram usage:        3 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    1
  4365 ;; This function calls:
  4366 ;;		_DELAY_us
  4367 ;;		_GPIO_PinRead
  4368 ;;		_GPIO_PinWrite
  4369 ;; This function is called by:
  4370 ;;		_KEYPAD_GetKey
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _keypad_WaitForKeyPress
  4376  0BE1                     _keypad_WaitForKeyPress:	
  4377                           
  4378                           ;keypad.c: 203: uint8_t i,v_keyStatus_u8;
  4379                           ;keypad.c: 205: for (i=0;i<(4);i++)
  4380                           
  4381                           ;incstack = 0
  4382                           ; Regs used in _keypad_WaitForKeyPress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4383  0BE1  01F7               	clrf	keypad_WaitForKeyPress@i
  4384  0BE2  3004               	movlw	4
  4385  0BE3  0277               	subwf	keypad_WaitForKeyPress@i,w
  4386  0BE4  1803               	btfsc	3,0
  4387  0BE5  2BF9               	goto	l289
  4388  0BE6                     l2676:	
  4389                           
  4390                           ;keypad.c: 206: {
  4391                           ;keypad.c: 207: GPIO_PinWrite(A_RowsPins_U8[i],0x00u);
  4392  0BE6  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4393  0BE7  0877               	movf	keypad_WaitForKeyPress@i,w
  4394  0BE8  3EB2               	addlw	(low (_A_RowsPins_U8| 0))& (0+255)
  4395  0BE9  0084               	movwf	4
  4396  0BEA  1383               	bcf	3,7	;select IRP bank1
  4397  0BEB  0800               	movf	0,w
  4398  0BEC  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  4399  0BF1  3001               	movlw	1
  4400  0BF2  00F5               	movwf	??_keypad_WaitForKeyPress
  4401  0BF3  0875               	movf	??_keypad_WaitForKeyPress,w
  4402  0BF4  07F7               	addwf	keypad_WaitForKeyPress@i,f
  4403  0BF5  3004               	movlw	4
  4404  0BF6  0277               	subwf	keypad_WaitForKeyPress@i,w
  4405  0BF7  1C03               	skipc
  4406  0BF8  2BE6               	goto	l2676
  4407  0BF9                     l289:	
  4408                           ;keypad.c: 211: {
  4409                           ;keypad.c: 212: do
  4410                           
  4411                           ;keypad.c: 208: }
  4412                           ;keypad.c: 210: do
  4413                           
  4414                           
  4415                           ;keypad.c: 213: {
  4416                           ;keypad.c: 214: v_keyStatus_u8 = 1;
  4417  0BF9  01F6               	clrf	keypad_WaitForKeyPress@v_keyStatus_u8
  4418  0BFA  0AF6               	incf	keypad_WaitForKeyPress@v_keyStatus_u8,f
  4419                           
  4420                           ;keypad.c: 215: for(i=0; i<(4); i++)
  4421  0BFB  01F7               	clrf	keypad_WaitForKeyPress@i
  4422  0BFC  3004               	movlw	4
  4423  0BFD  0277               	subwf	keypad_WaitForKeyPress@i,w
  4424  0BFE  1803               	btfsc	3,0
  4425  0BFF  2C15               	goto	l2694
  4426  0C00                     l2688:	
  4427                           
  4428                           ;keypad.c: 216: {
  4429                           ;keypad.c: 217: v_keyStatus_u8 &= GPIO_PinRead(A_ColsPins_U8[i]);
  4430  0C00  0877               	movf	keypad_WaitForKeyPress@i,w
  4431  0C01  3EAE               	addlw	(low (_A_ColsPins_U8| 0))& (0+255)
  4432  0C02  0084               	movwf	4
  4433  0C03  1383               	bcf	3,7	;select IRP bank1
  4434  0C04  0800               	movf	0,w
  4435  0C05  120A  158A  24A1  120A  158A  	fcall	_GPIO_PinRead
  4436  0C0A  00F5               	movwf	??_keypad_WaitForKeyPress
  4437  0C0B  0875               	movf	??_keypad_WaitForKeyPress,w
  4438  0C0C  05F6               	andwf	keypad_WaitForKeyPress@v_keyStatus_u8,f
  4439  0C0D  3001               	movlw	1
  4440  0C0E  00F5               	movwf	??_keypad_WaitForKeyPress
  4441  0C0F  0875               	movf	??_keypad_WaitForKeyPress,w
  4442  0C10  07F7               	addwf	keypad_WaitForKeyPress@i,f
  4443  0C11  3004               	movlw	4
  4444  0C12  0277               	subwf	keypad_WaitForKeyPress@i,w
  4445  0C13  1C03               	skipc
  4446  0C14  2C00               	goto	l2688
  4447  0C15                     l2694:	
  4448                           
  4449                           ;keypad.c: 218: }
  4450                           ;keypad.c: 219: }while(v_keyStatus_u8 != 0);
  4451  0C15  0876               	movf	keypad_WaitForKeyPress@v_keyStatus_u8,w
  4452  0C16  1D03               	btfss	3,2
  4453  0C17  2BF9               	goto	l289
  4454                           
  4455                           ;keypad.c: 222: DELAY_us((10));
  4456  0C18  300A               	movlw	10
  4457  0C19  00F0               	movwf	DELAY_us@us_count
  4458  0C1A  3000               	movlw	0
  4459  0C1B  00F1               	movwf	DELAY_us@us_count+1
  4460  0C1C  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  4461                           
  4462                           ;keypad.c: 224: v_keyStatus_u8 = 1;
  4463  0C21  01F6               	clrf	keypad_WaitForKeyPress@v_keyStatus_u8
  4464  0C22  0AF6               	incf	keypad_WaitForKeyPress@v_keyStatus_u8,f
  4465                           
  4466                           ;keypad.c: 225: for(i=0; i<(4); i++)
  4467  0C23  01F7               	clrf	keypad_WaitForKeyPress@i
  4468  0C24  3004               	movlw	4
  4469  0C25  0277               	subwf	keypad_WaitForKeyPress@i,w
  4470  0C26  1803               	btfsc	3,0
  4471  0C27  2C3D               	goto	l2712
  4472  0C28                     l2706:	
  4473                           
  4474                           ;keypad.c: 226: {
  4475                           ;keypad.c: 227: v_keyStatus_u8 &= GPIO_PinRead(A_ColsPins_U8[i]);
  4476  0C28  0877               	movf	keypad_WaitForKeyPress@i,w
  4477  0C29  3EAE               	addlw	(low (_A_ColsPins_U8| 0))& (0+255)
  4478  0C2A  0084               	movwf	4
  4479  0C2B  1383               	bcf	3,7	;select IRP bank1
  4480  0C2C  0800               	movf	0,w
  4481  0C2D  120A  158A  24A1  120A  158A  	fcall	_GPIO_PinRead
  4482  0C32  00F5               	movwf	??_keypad_WaitForKeyPress
  4483  0C33  0875               	movf	??_keypad_WaitForKeyPress,w
  4484  0C34  05F6               	andwf	keypad_WaitForKeyPress@v_keyStatus_u8,f
  4485  0C35  3001               	movlw	1
  4486  0C36  00F5               	movwf	??_keypad_WaitForKeyPress
  4487  0C37  0875               	movf	??_keypad_WaitForKeyPress,w
  4488  0C38  07F7               	addwf	keypad_WaitForKeyPress@i,f
  4489  0C39  3004               	movlw	4
  4490  0C3A  0277               	subwf	keypad_WaitForKeyPress@i,w
  4491  0C3B  1C03               	skipc
  4492  0C3C  2C28               	goto	l2706
  4493  0C3D                     l2712:	
  4494                           
  4495                           ;keypad.c: 228: }
  4496                           ;keypad.c: 229: }while(v_keyStatus_u8 != 0);
  4497  0C3D  0876               	movf	keypad_WaitForKeyPress@v_keyStatus_u8,w
  4498  0C3E  1903               	btfsc	3,2
  4499  0C3F  0008               	return
  4500  0C40  2BF9               	goto	l289
  4501  0C41                     __end_of_keypad_WaitForKeyPress:	
  4502                           
  4503                           	psect	text19
  4504  00F9                     __ptext19:	
  4505 ;; *************** function _gpio_test *****************
  4506 ;; Defined at:
  4507 ;;		line 115 in file "main.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  i               1   71[BANK0 ] unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4521 ;;      Params:         0       0       0       0       0
  4522 ;;      Locals:         0       1       0       0       0
  4523 ;;      Temps:          0       2       0       0       0
  4524 ;;      Totals:         0       3       0       0       0
  4525 ;;Total ram usage:        3 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    3
  4528 ;; This function calls:
  4529 ;;		_DELAY_ms
  4530 ;;		_UART_Printf
  4531 ;;		_UART_RxChar
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _gpio_test
  4539  00F9                     _gpio_test:	
  4540                           
  4541                           ;main.c: 117: unsigned char i;
  4542                           ;main.c: 118: UART_Printf("\n\rConnect any IO Pins to buzzer, relays, leds ");
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _gpio_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4546  00F9  3072               	movlw	low (STR_3| (0+32768))
  4547  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  4548  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  4549  00FC  00C3               	movwf	UART_Printf@argList
  4550  00FD  3089               	movlw	high (STR_3| (0+32768))
  4551  00FE  00C4               	movwf	UART_Printf@argList+1
  4552  00FF  120A  118A  25C9  120A  118A  	fcall	_UART_Printf
  4553                           
  4554                           ;main.c: 119: UART_Printf("\n\rMake connections and hit 'k' to test ");
  4555  0104  301D               	movlw	low (STR_4| (0+32768))
  4556  0105  1283               	bcf	3,5	;RP0=0, select bank0
  4557  0106  1303               	bcf	3,6	;RP1=0, select bank0
  4558  0107  00C3               	movwf	UART_Printf@argList
  4559  0108  308A               	movlw	high (STR_4| (0+32768))
  4560  0109  00C4               	movwf	UART_Printf@argList+1
  4561  010A  120A  118A  25C9  120A  118A  	fcall	_UART_Printf
  4562  010F                     l3170:	
  4563                           ;main.c: 120: while(UART_RxChar()!='k');
  4564                           
  4565  010F  160A  118A  227F  120A  118A  	fcall	_UART_RxChar
  4566  0114  3A6B               	xorlw	107
  4567  0115  1D03               	skipz
  4568  0116  290F               	goto	l3170
  4569                           
  4570                           ;main.c: 121: ADCON0 = 0x00;
  4571  0117  1283               	bcf	3,5	;RP0=0, select bank0
  4572  0118  1303               	bcf	3,6	;RP1=0, select bank0
  4573  0119  019F               	clrf	31	;volatile
  4574                           
  4575                           ;main.c: 122: ADCON1 = 0x07;
  4576  011A  3007               	movlw	7
  4577  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4578  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4579  011D  009F               	movwf	31	;volatile
  4580                           
  4581                           ;main.c: 123: TRISA = 0x00u;
  4582  011E  0185               	clrf	5	;volatile
  4583                           
  4584                           ;main.c: 124: TRISB = 0x00u;
  4585  011F  0186               	clrf	6	;volatile
  4586                           
  4587                           ;main.c: 125: TRISC = 0x00u;
  4588  0120  0187               	clrf	7	;volatile
  4589                           
  4590                           ;main.c: 126: TRISD = 0x00u;
  4591  0121  0188               	clrf	8	;volatile
  4592                           
  4593                           ;main.c: 127: TRISE = 0x00u;
  4594  0122  0189               	clrf	9	;volatile
  4595  0123                     l3186:	
  4596                           ;main.c: 128: while(1)
  4597                           
  4598                           
  4599                           ;main.c: 129: {
  4600                           ;main.c: 130: for(i=0;i<2;i++)
  4601  0123  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0124  01E7               	clrf	gpio_test@i
  4603  0125  3002               	movlw	2
  4604  0126  0267               	subwf	gpio_test@i,w
  4605  0127  1803               	btfsc	3,0
  4606  0128  2956               	goto	l662
  4607  0129                     l3192:	
  4608                           
  4609                           ;main.c: 131: {
  4610                           ;main.c: 133: PORTA = 0xff;
  4611  0129  30FF               	movlw	255
  4612  012A  0085               	movwf	5	;volatile
  4613                           
  4614                           ;main.c: 134: PORTB = 0xff;
  4615  012B  30FF               	movlw	255
  4616  012C  0086               	movwf	6	;volatile
  4617                           
  4618                           ;main.c: 135: PORTC = 0xff;
  4619  012D  30FF               	movlw	255
  4620  012E  0087               	movwf	7	;volatile
  4621                           
  4622                           ;main.c: 136: PORTD = 0xff;
  4623  012F  30FF               	movlw	255
  4624  0130  0088               	movwf	8	;volatile
  4625                           
  4626                           ;main.c: 137: PORTE = 0xff;
  4627  0131  30FF               	movlw	255
  4628  0132  0089               	movwf	9	;volatile
  4629                           
  4630                           ;main.c: 138: DELAY_ms(500);
  4631  0133  30F4               	movlw	244
  4632  0134  00F2               	movwf	DELAY_ms@ms_count
  4633  0135  3001               	movlw	1
  4634  0136  00F3               	movwf	DELAY_ms@ms_count+1
  4635  0137  160A  118A  232F  120A  118A  	fcall	_DELAY_ms
  4636                           
  4637                           ;main.c: 141: PORTA = 0x00;
  4638  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4639  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4640  013E  0185               	clrf	5	;volatile
  4641                           
  4642                           ;main.c: 142: PORTB = 0x00;
  4643  013F  0186               	clrf	6	;volatile
  4644                           
  4645                           ;main.c: 143: PORTC = 0x00;
  4646  0140  0187               	clrf	7	;volatile
  4647                           
  4648                           ;main.c: 144: PORTD = 0x00;
  4649  0141  0188               	clrf	8	;volatile
  4650                           
  4651                           ;main.c: 145: PORTE = 0x00;
  4652  0142  0189               	clrf	9	;volatile
  4653                           
  4654                           ;main.c: 146: DELAY_ms(500);
  4655  0143  30F4               	movlw	244
  4656  0144  00F2               	movwf	DELAY_ms@ms_count
  4657  0145  3001               	movlw	1
  4658  0146  00F3               	movwf	DELAY_ms@ms_count+1
  4659  0147  160A  118A  232F  120A  118A  	fcall	_DELAY_ms
  4660  014C  3001               	movlw	1
  4661  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4662  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4663  014F  00E5               	movwf	??_gpio_test
  4664  0150  0865               	movf	??_gpio_test,w
  4665  0151  07E7               	addwf	gpio_test@i,f
  4666  0152  3002               	movlw	2
  4667  0153  0267               	subwf	gpio_test@i,w
  4668  0154  1C03               	skipc
  4669  0155  2929               	goto	l3192
  4670  0156                     l662:	
  4671                           
  4672                           ;main.c: 147: }
  4673                           ;main.c: 149: for(i=1;i;i=i<<1)
  4674  0156  01E7               	clrf	gpio_test@i
  4675  0157  0AE7               	incf	gpio_test@i,f
  4676  0158                     l3218:	
  4677  0158  0867               	movf	gpio_test@i,w
  4678  0159  1903               	btfsc	3,2
  4679  015A  2977               	goto	l3220
  4680                           
  4681                           ;main.c: 150: {
  4682                           ;main.c: 151: PORTA = i;
  4683  015B  0867               	movf	gpio_test@i,w
  4684  015C  0085               	movwf	5	;volatile
  4685                           
  4686                           ;main.c: 152: PORTB = i;
  4687  015D  0867               	movf	gpio_test@i,w
  4688  015E  0086               	movwf	6	;volatile
  4689                           
  4690                           ;main.c: 153: PORTC = i;
  4691  015F  0867               	movf	gpio_test@i,w
  4692  0160  0087               	movwf	7	;volatile
  4693                           
  4694                           ;main.c: 154: PORTD = i;
  4695  0161  0867               	movf	gpio_test@i,w
  4696  0162  0088               	movwf	8	;volatile
  4697                           
  4698                           ;main.c: 155: PORTE = i;
  4699  0163  0867               	movf	gpio_test@i,w
  4700  0164  0089               	movwf	9	;volatile
  4701                           
  4702                           ;main.c: 156: DELAY_ms(100);
  4703  0165  3064               	movlw	100
  4704  0166  00F2               	movwf	DELAY_ms@ms_count
  4705  0167  3000               	movlw	0
  4706  0168  00F3               	movwf	DELAY_ms@ms_count+1
  4707  0169  160A  118A  232F  120A  118A  	fcall	_DELAY_ms
  4708  016E  1283               	bcf	3,5	;RP0=0, select bank0
  4709  016F  1303               	bcf	3,6	;RP1=0, select bank0
  4710  0170  0867               	movf	gpio_test@i,w
  4711  0171  00E5               	movwf	??_gpio_test
  4712  0172  0765               	addwf	??_gpio_test,w
  4713  0173  00E6               	movwf	??_gpio_test+1
  4714  0174  0866               	movf	??_gpio_test+1,w
  4715  0175  00E7               	movwf	gpio_test@i
  4716  0176  2958               	goto	l3218
  4717  0177                     l3220:	
  4718                           
  4719                           ;main.c: 157: }
  4720                           ;main.c: 159: for(i=0x80;i;i=i>>1)
  4721  0177  3080               	movlw	128
  4722  0178  00E5               	movwf	??_gpio_test
  4723  0179  0865               	movf	??_gpio_test,w
  4724  017A                     L3:	
  4725  017A  00E7               	movwf	gpio_test@i
  4726  017B  0867               	movf	gpio_test@i,w
  4727  017C  1903               	btfsc	3,2
  4728  017D  2923               	goto	l3186
  4729                           
  4730                           ;main.c: 160: {
  4731                           ;main.c: 161: PORTA = i;
  4732  017E  0867               	movf	gpio_test@i,w
  4733  017F  0085               	movwf	5	;volatile
  4734                           
  4735                           ;main.c: 162: PORTB = i;
  4736  0180  0867               	movf	gpio_test@i,w
  4737  0181  0086               	movwf	6	;volatile
  4738                           
  4739                           ;main.c: 163: PORTC = i;
  4740  0182  0867               	movf	gpio_test@i,w
  4741  0183  0087               	movwf	7	;volatile
  4742                           
  4743                           ;main.c: 164: PORTD = i;
  4744  0184  0867               	movf	gpio_test@i,w
  4745  0185  0088               	movwf	8	;volatile
  4746                           
  4747                           ;main.c: 165: PORTE = i;
  4748  0186  0867               	movf	gpio_test@i,w
  4749  0187  0089               	movwf	9	;volatile
  4750                           
  4751                           ;main.c: 166: DELAY_ms(100);
  4752  0188  3064               	movlw	100
  4753  0189  00F2               	movwf	DELAY_ms@ms_count
  4754  018A  3000               	movlw	0
  4755  018B  00F3               	movwf	DELAY_ms@ms_count+1
  4756  018C  160A  118A  232F  120A  118A  	fcall	_DELAY_ms
  4757  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0193  0867               	movf	gpio_test@i,w
  4760  0194  00E5               	movwf	??_gpio_test
  4761  0195  1003               	clrc
  4762  0196  0C65               	rrf	??_gpio_test,w
  4763  0197  00E6               	movwf	??_gpio_test+1
  4764  0198  0866               	movf	??_gpio_test+1,w
  4765  0199  297A               	goto	L3
  4766  019A                     __end_of_gpio_test:	
  4767                           
  4768                           	psect	text20
  4769  0B82                     __ptext20:	
  4770 ;; *************** function _eeprom_test *****************
  4771 ;; Defined at:
  4772 ;;		line 274 in file "main.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;		None
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  write_char      1   74[BANK0 ] unsigned char 
  4777 ;;  eeprom_addre    1   73[BANK0 ] unsigned char 
  4778 ;;  read_char       1   72[BANK0 ] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4788 ;;      Params:         0       0       0       0       0
  4789 ;;      Locals:         0       3       0       0       0
  4790 ;;      Temps:          0       3       0       0       0
  4791 ;;      Totals:         0       6       0       0       0
  4792 ;;Total ram usage:        6 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    3
  4795 ;; This function calls:
  4796 ;;		_EEPROM_ReadByte
  4797 ;;		_EEPROM_WriteByte
  4798 ;;		_UART_Printf
  4799 ;; This function is called by:
  4800 ;;		_main
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _eeprom_test
  4806  0B82                     _eeprom_test:	
  4807                           
  4808                           ;main.c: 276: unsigned char eeprom_address = 0x00, write_char = 'X', read_char;
  4809                           
  4810                           ;incstack = 0
  4811                           ; Regs used in _eeprom_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4812  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  4813  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  4814  0B84  01E9               	clrf	eeprom_test@eeprom_address
  4815  0B85  3058               	movlw	88
  4816  0B86  00E5               	movwf	??_eeprom_test
  4817  0B87  0865               	movf	??_eeprom_test,w
  4818  0B88  00EA               	movwf	eeprom_test@write_char
  4819                           
  4820                           ;main.c: 278: for(write_char='A';write_char<='Z';write_char++)
  4821  0B89  3041               	movlw	65
  4822  0B8A  00E5               	movwf	??_eeprom_test
  4823  0B8B  0865               	movf	??_eeprom_test,w
  4824  0B8C  00EA               	movwf	eeprom_test@write_char
  4825  0B8D  305B               	movlw	91
  4826  0B8E  026A               	subwf	eeprom_test@write_char,w
  4827  0B8F  1803               	btfsc	3,0
  4828  0B90  2BE0               	goto	l715
  4829  0B91                     l3324:	
  4830                           
  4831                           ;main.c: 279: {
  4832                           ;main.c: 280: UART_Printf("\n\rEeprom Write: %c    ",write_char);
  4833  0B91  30F7               	movlw	low (STR_18| (0+32768))
  4834  0B92  00C3               	movwf	UART_Printf@argList
  4835  0B93  308A               	movlw	high (STR_18| (0+32768))
  4836  0B94  00C4               	movwf	UART_Printf@argList+1
  4837  0B95  086A               	movf	eeprom_test@write_char,w
  4838  0B96  00E5               	movwf	??_eeprom_test
  4839  0B97  01E6               	clrf	??_eeprom_test+1
  4840  0B98  0865               	movf	??_eeprom_test,w
  4841  0B99  00C5               	movwf	?_UART_Printf+2
  4842  0B9A  0866               	movf	??_eeprom_test+1,w
  4843  0B9B  00C6               	movwf	?_UART_Printf+3
  4844  0B9C  120A  118A  25C9  120A  158A  	fcall	_UART_Printf
  4845                           
  4846                           ;main.c: 281: EEPROM_WriteByte(eeprom_address, write_char);
  4847  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  4848  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  4849  0BA3  0869               	movf	eeprom_test@eeprom_address,w
  4850  0BA4  00E5               	movwf	??_eeprom_test
  4851  0BA5  01E6               	clrf	??_eeprom_test+1
  4852  0BA6  0865               	movf	??_eeprom_test,w
  4853  0BA7  00F3               	movwf	EEPROM_WriteByte@v_eepromAddress_u16
  4854  0BA8  0866               	movf	??_eeprom_test+1,w
  4855  0BA9  00F4               	movwf	EEPROM_WriteByte@v_eepromAddress_u16+1
  4856  0BAA  086A               	movf	eeprom_test@write_char,w
  4857  0BAB  00E7               	movwf	??_eeprom_test+2
  4858  0BAC  0867               	movf	??_eeprom_test+2,w
  4859  0BAD  00F5               	movwf	EEPROM_WriteByte@v_eepromData_u8
  4860  0BAE  160A  118A  22B5  120A  158A  	fcall	_EEPROM_WriteByte
  4861                           
  4862                           ;main.c: 284: read_char = EEPROM_ReadByte(eeprom_address);
  4863  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  4864  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  4865  0BB5  0869               	movf	eeprom_test@eeprom_address,w
  4866  0BB6  00E5               	movwf	??_eeprom_test
  4867  0BB7  01E6               	clrf	??_eeprom_test+1
  4868  0BB8  0865               	movf	??_eeprom_test,w
  4869  0BB9  00F0               	movwf	EEPROM_ReadByte@v_eepromAddress_u16
  4870  0BBA  0866               	movf	??_eeprom_test+1,w
  4871  0BBB  00F1               	movwf	EEPROM_ReadByte@v_eepromAddress_u16+1
  4872  0BBC  160A  118A  22FA  120A  158A  	fcall	_EEPROM_ReadByte
  4873  0BC1  1283               	bcf	3,5	;RP0=0, select bank0
  4874  0BC2  1303               	bcf	3,6	;RP1=0, select bank0
  4875  0BC3  00E7               	movwf	??_eeprom_test+2
  4876  0BC4  0867               	movf	??_eeprom_test+2,w
  4877  0BC5  00E8               	movwf	eeprom_test@read_char
  4878                           
  4879                           ;main.c: 285: UART_Printf("Eeprom Read: %c",read_char);
  4880  0BC6  3034               	movlw	low (STR_19| (0+32768))
  4881  0BC7  00C3               	movwf	UART_Printf@argList
  4882  0BC8  308B               	movlw	high (STR_19| (0+32768))
  4883  0BC9  00C4               	movwf	UART_Printf@argList+1
  4884  0BCA  0868               	movf	eeprom_test@read_char,w
  4885  0BCB  00E5               	movwf	??_eeprom_test
  4886  0BCC  01E6               	clrf	??_eeprom_test+1
  4887  0BCD  0865               	movf	??_eeprom_test,w
  4888  0BCE  00C5               	movwf	?_UART_Printf+2
  4889  0BCF  0866               	movf	??_eeprom_test+1,w
  4890  0BD0  00C6               	movwf	?_UART_Printf+3
  4891  0BD1  120A  118A  25C9  120A  158A  	fcall	_UART_Printf
  4892  0BD6  3001               	movlw	1
  4893  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  4894  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  4895  0BD9  00E5               	movwf	??_eeprom_test
  4896  0BDA  0865               	movf	??_eeprom_test,w
  4897  0BDB  07EA               	addwf	eeprom_test@write_char,f
  4898  0BDC  305B               	movlw	91
  4899  0BDD  026A               	subwf	eeprom_test@write_char,w
  4900  0BDE  1C03               	skipc
  4901  0BDF  2B91               	goto	l3324
  4902  0BE0                     l715:	
  4903                           ;main.c: 286: }
  4904                           ;main.c: 288: while (1);
  4905                           
  4906  0BE0  2BE0               	goto	l715
  4907  0BE1                     __end_of_eeprom_test:	
  4908                           
  4909                           	psect	text21
  4910  12B5                     __ptext21:	
  4911 ;; *************** function _EEPROM_WriteByte *****************
  4912 ;; Defined at:
  4913 ;;		line 60 in file "../00-libfiles/eeprom.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  v_eepromAddr    2    3[COMMON] unsigned int 
  4916 ;;  v_eepromData    1    5[COMMON] unsigned char 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      void 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0, pclath, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4928 ;;      Params:         3       0       0       0       0
  4929 ;;      Locals:         0       0       0       0       0
  4930 ;;      Temps:          1       0       0       0       0
  4931 ;;      Totals:         4       0       0       0       0
  4932 ;;Total ram usage:        4 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    1
  4935 ;; This function calls:
  4936 ;;		_eeprom_write
  4937 ;; This function is called by:
  4938 ;;		_eeprom_test
  4939 ;;		_EEPROM_WriteString
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _EEPROM_WriteByte
  4945  12B5                     _EEPROM_WriteByte:	
  4946                           
  4947                           ;eeprom.c: 62: eeprom_write(v_eepromAddress_u16,v_eepromData_u8);
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2+status,0+pclath+cstack]
  4951  12B5  0875               	movf	EEPROM_WriteByte@v_eepromData_u8,w
  4952  12B6  00F6               	movwf	??_EEPROM_WriteByte
  4953  12B7  0876               	movf	??_EEPROM_WriteByte,w
  4954  12B8  00F0               	movwf	eeprom_write@value
  4955  12B9  0873               	movf	EEPROM_WriteByte@v_eepromAddress_u16,w
  4956  12BA  160A  118A  2439   	fcall	_eeprom_write
  4957  12BD  0008               	return
  4958  12BE                     __end_of_EEPROM_WriteByte:	
  4959                           
  4960                           	psect	text22
  4961  1439                     __ptext22:	
  4962 ;; *************** function _eeprom_write *****************
  4963 ;; Defined at:
  4964 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.36\sources\pic\eewrite.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  addr            1    wreg     unsigned char 
  4967 ;;  value           1    0[COMMON] unsigned char 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;  addr            1    2[COMMON] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         1       0       0       0       0
  4980 ;;      Locals:         1       0       0       0       0
  4981 ;;      Temps:          1       0       0       0       0
  4982 ;;      Totals:         3       0       0       0       0
  4983 ;;Total ram usage:        3 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_EEPROM_WriteByte
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _eeprom_write
  4994  1439                     _eeprom_write:	
  4995                           
  4996                           ;incstack = 0
  4997                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4998                           ;eeprom_write@addr stored from wreg
  4999  1439  00F2               	movwf	eeprom_write@addr
  5000  143A                     l752:	
  5001  143A  1683               	bsf	3,5	;RP0=1, select bank3
  5002  143B  1703               	bsf	3,6	;RP1=1, select bank3
  5003  143C  188C               	btfsc	12,1	;volsfr
  5004  143D  2C3A               	goto	l752
  5005  143E  0872               	movf	eeprom_write@addr,w
  5006  143F  1283               	bcf	3,5	;RP0=0, select bank2
  5007  1440  1703               	bsf	3,6	;RP1=1, select bank2
  5008  1441  008D               	movwf	13	;volatile
  5009  1442  0870               	movf	eeprom_write@value,w
  5010  1443  008C               	movwf	12	;volatile
  5011  1444  303F               	movlw	63
  5012  1445  00F1               	movwf	??_eeprom_write
  5013  1446  0871               	movf	??_eeprom_write,w
  5014  1447  1683               	bsf	3,5	;RP0=1, select bank3
  5015  1448  1703               	bsf	3,6	;RP1=1, select bank3
  5016  1449  058C               	andwf	12,f	;volsfr
  5017  144A  1283               	bcf	3,5	;RP0=0, select bank0
  5018  144B  1303               	bcf	3,6	;RP1=0, select bank0
  5019  144C  1003               	bcf	3,0	;volatile
  5020  144D  1B8B               	btfsc	11,7	;volatile
  5021  144E  1403               	bsf	3,0	;volatile
  5022  144F  138B               	bcf	11,7	;volatile
  5023  1450  1683               	bsf	3,5	;RP0=1, select bank3
  5024  1451  1703               	bsf	3,6	;RP1=1, select bank3
  5025  1452  150C               	bsf	12,2	;volsfr
  5026  1453  3055               	movlw	85
  5027  1454  008D               	movwf	13	;volsfr
  5028  1455  30AA               	movlw	170
  5029  1456  008D               	movwf	13	;volsfr
  5030  1457  148C               	bsf	12,1	;volsfr
  5031  1458  110C               	bcf	12,2	;volsfr
  5032  1459  1283               	bcf	3,5	;RP0=0, select bank0
  5033  145A  1303               	bcf	3,6	;RP1=0, select bank0
  5034  145B  1C03               	btfss	3,0	;volatile
  5035  145C  0008               	return
  5036  145D  178B               	bsf	11,7	;volatile
  5037  145E  0008               	return
  5038  145F                     __end_of_eeprom_write:	
  5039                           
  5040                           	psect	text23
  5041  12FA                     __ptext23:	
  5042 ;; *************** function _EEPROM_ReadByte *****************
  5043 ;; Defined at:
  5044 ;;		line 88 in file "../00-libfiles/eeprom.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  v_eepromAddr    2    0[COMMON] unsigned int 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      unsigned char 
  5051 ;; Registers used:
  5052 ;;		wreg
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5058 ;;      Params:         2       0       0       0       0
  5059 ;;      Locals:         0       0       0       0       0
  5060 ;;      Temps:          0       0       0       0       0
  5061 ;;      Totals:         2       0       0       0       0
  5062 ;;Total ram usage:        2 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; This function calls:
  5065 ;;		Nothing
  5066 ;; This function is called by:
  5067 ;;		_eeprom_test
  5068 ;;		_EEPROM_ReadString
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           
  5073                           ;psect for function _EEPROM_ReadByte
  5074  12FA                     _EEPROM_ReadByte:	
  5075  12FA                     l59:	
  5076                           ;eeprom.c: 90: while(RD || WR);
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in _EEPROM_ReadByte: [wreg]
  5080                           
  5081  12FA  1683               	bsf	3,5	;RP0=1, select bank3
  5082  12FB  1703               	bsf	3,6	;RP1=1, select bank3
  5083  12FC  180C               	btfsc	12,0	;volsfr
  5084  12FD  2AFA               	goto	l59
  5085  12FE  188C               	btfsc	12,1	;volsfr
  5086  12FF  2AFA               	goto	l59
  5087                           
  5088                           ;eeprom.c: 91: EEADR=v_eepromAddress_u16;
  5089  1300  0870               	movf	EEPROM_ReadByte@v_eepromAddress_u16,w
  5090  1301  1283               	bcf	3,5	;RP0=0, select bank2
  5091  1302  1703               	bsf	3,6	;RP1=1, select bank2
  5092  1303  008D               	movwf	13	;volatile
  5093                           
  5094                           ;eeprom.c: 93: RD = 1;
  5095  1304  1683               	bsf	3,5	;RP0=1, select bank3
  5096  1305  1703               	bsf	3,6	;RP1=1, select bank3
  5097  1306  140C               	bsf	12,0	;volsfr
  5098                           
  5099                           ;eeprom.c: 94: return(EEDATA);
  5100  1307  1283               	bcf	3,5	;RP0=0, select bank2
  5101  1308  1703               	bsf	3,6	;RP1=1, select bank2
  5102  1309  080C               	movf	12,w	;volatile
  5103  130A  0008               	return
  5104  130B                     __end_of_EEPROM_ReadByte:	
  5105                           
  5106                           	psect	text24
  5107  15A4                     __ptext24:	
  5108 ;; *************** function _adc_test *****************
  5109 ;; Defined at:
  5110 ;;		line 294 in file "main.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;		None
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  pot             2   75[BANK0 ] unsigned int 
  5115 ;;  light           2   73[BANK0 ] unsigned int 
  5116 ;;  temp            2   71[BANK0 ] unsigned int 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      void 
  5119 ;; Registers used:
  5120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5126 ;;      Params:         0       0       0       0       0
  5127 ;;      Locals:         0       6       0       0       0
  5128 ;;      Temps:          0       2       0       0       0
  5129 ;;      Totals:         0       8       0       0       0
  5130 ;;Total ram usage:        8 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    3
  5133 ;; This function calls:
  5134 ;;		_ADC_GetAdcValue
  5135 ;;		_ADC_Init
  5136 ;;		_UART_Printf
  5137 ;; This function is called by:
  5138 ;;		_main
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           
  5143                           ;psect for function _adc_test
  5144  15A4                     _adc_test:	
  5145                           
  5146                           ;main.c: 296: uint16_t temp,light,pot;
  5147                           ;main.c: 297: ADC_Init();
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in _adc_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5151  15A4  160A  118A  2294  160A  118A  	fcall	_ADC_Init
  5152  15A9                     l720:	
  5153                           ;main.c: 299: while(1)
  5154                           
  5155                           
  5156                           ;main.c: 300: {
  5157                           ;main.c: 301: temp = ADC_GetAdcValue(0)/2;
  5158  15A9  3000               	movlw	0
  5159  15AA  160A  118A  23CB  160A  118A  	fcall	_ADC_GetAdcValue
  5160  15AF  0872               	movf	?_ADC_GetAdcValue,w
  5161  15B0  1283               	bcf	3,5	;RP0=0, select bank0
  5162  15B1  1303               	bcf	3,6	;RP1=0, select bank0
  5163  15B2  00E5               	movwf	??_adc_test
  5164  15B3  0873               	movf	?_ADC_GetAdcValue+1,w
  5165  15B4  00E6               	movwf	??_adc_test+1
  5166  15B5  1003               	clrc
  5167  15B6  0CE6               	rrf	??_adc_test+1,f
  5168  15B7  0CE5               	rrf	??_adc_test,f
  5169  15B8  0865               	movf	??_adc_test,w
  5170  15B9  00E7               	movwf	adc_test@temp
  5171  15BA  0866               	movf	??_adc_test+1,w
  5172  15BB  00E8               	movwf	adc_test@temp+1
  5173                           
  5174                           ;main.c: 302: pot = ADC_GetAdcValue(1);
  5175  15BC  3001               	movlw	1
  5176  15BD  160A  118A  23CB  160A  118A  	fcall	_ADC_GetAdcValue
  5177  15C2  0873               	movf	?_ADC_GetAdcValue+1,w
  5178  15C3  1283               	bcf	3,5	;RP0=0, select bank0
  5179  15C4  1303               	bcf	3,6	;RP1=0, select bank0
  5180  15C5  00EC               	movwf	adc_test@pot+1
  5181  15C6  0872               	movf	?_ADC_GetAdcValue,w
  5182  15C7  00EB               	movwf	adc_test@pot
  5183                           
  5184                           ;main.c: 303: light = ADC_GetAdcValue(2);
  5185  15C8  3002               	movlw	2
  5186  15C9  160A  118A  23CB  160A  118A  	fcall	_ADC_GetAdcValue
  5187  15CE  0873               	movf	?_ADC_GetAdcValue+1,w
  5188  15CF  1283               	bcf	3,5	;RP0=0, select bank0
  5189  15D0  1303               	bcf	3,6	;RP1=0, select bank0
  5190  15D1  00EA               	movwf	adc_test@light+1
  5191  15D2  0872               	movf	?_ADC_GetAdcValue,w
  5192  15D3  00E9               	movwf	adc_test@light
  5193                           
  5194                           ;main.c: 304: UART_Printf("\n\rtemp:%3d pot:%4d light:%4d", temp,pot,light);
  5195  15D4  30DA               	movlw	low (STR_20| (0+32768))
  5196  15D5  00C3               	movwf	UART_Printf@argList
  5197  15D6  308A               	movlw	high (STR_20| (0+32768))
  5198  15D7  00C4               	movwf	UART_Printf@argList+1
  5199  15D8  0868               	movf	adc_test@temp+1,w
  5200  15D9  00C6               	movwf	?_UART_Printf+3
  5201  15DA  0867               	movf	adc_test@temp,w
  5202  15DB  00C5               	movwf	?_UART_Printf+2
  5203  15DC  086C               	movf	adc_test@pot+1,w
  5204  15DD  00C8               	movwf	?_UART_Printf+5
  5205  15DE  086B               	movf	adc_test@pot,w
  5206  15DF  00C7               	movwf	?_UART_Printf+4
  5207  15E0  086A               	movf	adc_test@light+1,w
  5208  15E1  00CA               	movwf	?_UART_Printf+7
  5209  15E2  0869               	movf	adc_test@light,w
  5210  15E3  00C9               	movwf	?_UART_Printf+6
  5211  15E4  120A  118A  25C9  160A  118A  	fcall	_UART_Printf
  5212  15E9  2DA9               	goto	l720
  5213  15EA                     __end_of_adc_test:	
  5214                           
  5215                           	psect	text25
  5216  1294                     __ptext25:	
  5217 ;; *************** function _ADC_Init *****************
  5218 ;; Defined at:
  5219 ;;		line 54 in file "../00-libfiles/adc.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5233 ;;      Params:         0       0       0       0       0
  5234 ;;      Locals:         0       0       0       0       0
  5235 ;;      Temps:          0       0       0       0       0
  5236 ;;      Totals:         0       0       0       0       0
  5237 ;;Total ram usage:        0 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_adc_test
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _ADC_Init
  5248  1294                     _ADC_Init:	
  5249                           
  5250                           ;adc.c: 56: ADCON0=0x00;
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _ADC_Init: [wreg+status,2]
  5254  1294  1283               	bcf	3,5	;RP0=0, select bank0
  5255  1295  1303               	bcf	3,6	;RP1=0, select bank0
  5256  1296  019F               	clrf	31	;volatile
  5257                           
  5258                           ;adc.c: 57: ADCON1=0x80;
  5259  1297  3080               	movlw	128
  5260  1298  1683               	bsf	3,5	;RP0=1, select bank1
  5261  1299  1303               	bcf	3,6	;RP1=0, select bank1
  5262  129A  009F               	movwf	31	;volatile
  5263  129B  0008               	return
  5264  129C                     __end_of_ADC_Init:	
  5265                           
  5266                           	psect	text26
  5267  13CB                     __ptext26:	
  5268 ;; *************** function _ADC_GetAdcValue *****************
  5269 ;; Defined at:
  5270 ;;		line 76 in file "../00-libfiles/adc.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  var_adcChann    1    wreg     unsigned char 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  var_adcChann    1    5[COMMON] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  2    2[COMMON] unsigned int 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5284 ;;      Params:         2       0       0       0       0
  5285 ;;      Locals:         1       0       0       0       0
  5286 ;;      Temps:          1       0       0       0       0
  5287 ;;      Totals:         4       0       0       0       0
  5288 ;;Total ram usage:        4 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    1
  5291 ;; This function calls:
  5292 ;;		_DELAY_us
  5293 ;; This function is called by:
  5294 ;;		_adc_test
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _ADC_GetAdcValue
  5300  13CB                     _ADC_GetAdcValue:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _ADC_GetAdcValue: [wreg+status,2+status,0+pclath+cstack]
  5304                           ;ADC_GetAdcValue@var_adcChannel_u8 stored from wreg
  5305  13CB  00F5               	movwf	ADC_GetAdcValue@var_adcChannel_u8
  5306                           
  5307                           ;adc.c: 79: ADCON0= (var_adcChannel_u8<<3);
  5308  13CC  0875               	movf	ADC_GetAdcValue@var_adcChannel_u8,w
  5309  13CD  00F4               	movwf	??_ADC_GetAdcValue
  5310  13CE  3002               	movlw	2
  5311  13CF                     u3255:	
  5312  13CF  1003               	clrc
  5313  13D0  0DF4               	rlf	??_ADC_GetAdcValue,f
  5314  13D1  3EFF               	addlw	-1
  5315  13D2  1D03               	skipz
  5316  13D3  2BCF               	goto	u3255
  5317  13D4  1003               	clrc
  5318  13D5  0D74               	rlf	??_ADC_GetAdcValue,w
  5319  13D6  1283               	bcf	3,5	;RP0=0, select bank0
  5320  13D7  1303               	bcf	3,6	;RP1=0, select bank0
  5321  13D8  009F               	movwf	31	;volatile
  5322                           
  5323                           ;adc.c: 80: ADON = 1;
  5324  13D9  141F               	bsf	31,0	;volatile
  5325                           
  5326                           ;adc.c: 81: DELAY_us(10);
  5327  13DA  300A               	movlw	10
  5328  13DB  00F0               	movwf	DELAY_us@us_count
  5329  13DC  3000               	movlw	0
  5330  13DD  00F1               	movwf	DELAY_us@us_count+1
  5331  13DE  160A  118A  22BE  160A  118A  	fcall	_DELAY_us
  5332                           
  5333                           ;adc.c: 83: GO=1;
  5334  13E3  1283               	bcf	3,5	;RP0=0, select bank0
  5335  13E4  1303               	bcf	3,6	;RP1=0, select bank0
  5336  13E5  151F               	bsf	31,2	;volatile
  5337  13E6                     l22:	
  5338                           ;adc.c: 84: while(GO_DONE==1);
  5339                           
  5340  13E6  191F               	btfsc	31,2	;volatile
  5341  13E7  2BE6               	goto	l22
  5342                           
  5343                           ;adc.c: 87: return((ADRESH<<8) + ADRESL);
  5344  13E8  081E               	movf	30,w	;volatile
  5345  13E9  00F3               	movwf	?_ADC_GetAdcValue+1
  5346  13EA  1683               	bsf	3,5	;RP0=1, select bank1
  5347  13EB  1303               	bcf	3,6	;RP1=0, select bank1
  5348  13EC  081E               	movf	30,w	;volatile
  5349  13ED  00F2               	movwf	?_ADC_GetAdcValue
  5350  13EE  0008               	return
  5351  13EF                     __end_of_ADC_GetAdcValue:	
  5352                           
  5353                           	psect	text27
  5354  0B6C                     __ptext27:	
  5355 ;; *************** function _UART_Init *****************
  5356 ;; Defined at:
  5357 ;;		line 66 in file "../00-libfiles/uart.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  v_baudRate_u    4   10[BANK0 ] unsigned long 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      void 
  5364 ;; Registers used:
  5365 ;;		wreg, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5371 ;;      Params:         0       4       0       0       0
  5372 ;;      Locals:         0       0       0       0       0
  5373 ;;      Temps:          0       0       0       0       0
  5374 ;;      Totals:         0       4       0       0       0
  5375 ;;Total ram usage:        4 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    2
  5378 ;; This function calls:
  5379 ;;		_UART_SetBaudRate
  5380 ;; This function is called by:
  5381 ;;		_main
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           
  5386                           ;psect for function _UART_Init
  5387  0B6C                     _UART_Init:	
  5388                           
  5389                           ;uart.c: 68: TRISC=0x80;
  5390                           
  5391                           ;incstack = 0
  5392                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  5393  0B6C  3080               	movlw	128
  5394  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
  5395  0B6E  1303               	bcf	3,6	;RP1=0, select bank1
  5396  0B6F  0087               	movwf	7	;volatile
  5397                           
  5398                           ;uart.c: 69: TXSTA=0x20;
  5399  0B70  3020               	movlw	32
  5400  0B71  0098               	movwf	24	;volatile
  5401                           
  5402                           ;uart.c: 70: RCSTA=0x90;
  5403  0B72  3090               	movlw	144
  5404  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  5405  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  5406  0B75  0098               	movwf	24	;volatile
  5407                           
  5408                           ;uart.c: 71: UART_SetBaudRate(v_baudRate_u32);
  5409  0B76  082D               	movf	UART_Init@v_baudRate_u32+3,w
  5410  0B77  00A3               	movwf	UART_SetBaudRate@v_baudRate_u32+3
  5411  0B78  082C               	movf	UART_Init@v_baudRate_u32+2,w
  5412  0B79  00A2               	movwf	UART_SetBaudRate@v_baudRate_u32+2
  5413  0B7A  082B               	movf	UART_Init@v_baudRate_u32+1,w
  5414  0B7B  00A1               	movwf	UART_SetBaudRate@v_baudRate_u32+1
  5415  0B7C  082A               	movf	UART_Init@v_baudRate_u32,w
  5416  0B7D  00A0               	movwf	UART_SetBaudRate@v_baudRate_u32
  5417  0B7E  160A  118A  2639   	fcall	_UART_SetBaudRate
  5418  0B81  0008               	return
  5419  0B82                     __end_of_UART_Init:	
  5420                           
  5421                           	psect	text28
  5422  1639                     __ptext28:	
  5423 ;; *************** function _UART_SetBaudRate *****************
  5424 ;; Defined at:
  5425 ;;		line 91 in file "../00-libfiles/uart.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  v_baudRate_u    4    0[BANK0 ] unsigned long 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  RegValue        1    9[BANK0 ] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0, pclath, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5439 ;;      Params:         0       4       0       0       0
  5440 ;;      Locals:         0       1       0       0       0
  5441 ;;      Temps:          0       5       0       0       0
  5442 ;;      Totals:         0      10       0       0       0
  5443 ;;Total ram usage:       10 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    1
  5446 ;; This function calls:
  5447 ;;		___lldiv
  5448 ;; This function is called by:
  5449 ;;		_UART_Init
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _UART_SetBaudRate
  5455  1639                     _UART_SetBaudRate:	
  5456                           
  5457                           ;uart.c: 93: uint8_t RegValue;
  5458                           ;uart.c: 95: if((v_baudRate_u32 >= 2400) && (v_baudRate_u32<=115200UL))
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _UART_SetBaudRate: [wreg+status,2+status,0+pclath+cstack]
  5462  1639  1283               	bcf	3,5	;RP0=0, select bank0
  5463  163A  1303               	bcf	3,6	;RP1=0, select bank0
  5464  163B  0823               	movf	UART_SetBaudRate@v_baudRate_u32+3,w
  5465  163C  1D03               	btfss	3,2
  5466  163D  2E4B               	goto	l3030
  5467  163E  0822               	movf	UART_SetBaudRate@v_baudRate_u32+2,w
  5468  163F  1D03               	btfss	3,2
  5469  1640  2E4B               	goto	l3030
  5470  1641  3009               	movlw	9
  5471  1642  0221               	subwf	UART_SetBaudRate@v_baudRate_u32+1,w
  5472  1643  1D03               	skipz
  5473  1644  2E49               	goto	u3513
  5474  1645  3060               	movlw	96
  5475  1646  0220               	subwf	UART_SetBaudRate@v_baudRate_u32,w
  5476  1647  1D03               	skipz
  5477  1648  2E49               	goto	u3513
  5478  1649                     u3513:	
  5479  1649  1C03               	btfss	3,0
  5480  164A  2E89               	goto	l3034
  5481  164B                     l3030:	
  5482  164B  0823               	movf	UART_SetBaudRate@v_baudRate_u32+3,w
  5483  164C  1D03               	btfss	3,2
  5484  164D  2E89               	goto	l3034
  5485  164E  3001               	movlw	1
  5486  164F  0222               	subwf	UART_SetBaudRate@v_baudRate_u32+2,w
  5487  1650  1D03               	skipz
  5488  1651  2E5A               	goto	u3523
  5489  1652  30C2               	movlw	194
  5490  1653  0221               	subwf	UART_SetBaudRate@v_baudRate_u32+1,w
  5491  1654  1D03               	skipz
  5492  1655  2E5A               	goto	u3523
  5493  1656  3001               	movlw	1
  5494  1657  0220               	subwf	UART_SetBaudRate@v_baudRate_u32,w
  5495  1658  1D03               	skipz
  5496  1659  2E5A               	goto	u3523
  5497  165A                     u3523:	
  5498  165A  1803               	btfsc	3,0
  5499  165B  2E89               	goto	l3034
  5500                           
  5501                           ;uart.c: 96: {
  5502                           ;uart.c: 99: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)v_baudRate_u32))
      +                           - 1);
  5503  165C  0820               	movf	UART_SetBaudRate@v_baudRate_u32,w
  5504  165D  00A4               	movwf	??_UART_SetBaudRate
  5505  165E  0821               	movf	UART_SetBaudRate@v_baudRate_u32+1,w
  5506  165F  00A5               	movwf	??_UART_SetBaudRate+1
  5507  1660  0822               	movf	UART_SetBaudRate@v_baudRate_u32+2,w
  5508  1661  00A6               	movwf	??_UART_SetBaudRate+2
  5509  1662  0823               	movf	UART_SetBaudRate@v_baudRate_u32+3,w
  5510  1663  00A7               	movwf	??_UART_SetBaudRate+3
  5511  1664  3006               	movlw	6
  5512  1665                     u3535:	
  5513  1665  1003               	clrc
  5514  1666  0DA4               	rlf	??_UART_SetBaudRate,f
  5515  1667  0DA5               	rlf	??_UART_SetBaudRate+1,f
  5516  1668  0DA6               	rlf	??_UART_SetBaudRate+2,f
  5517  1669  0DA7               	rlf	??_UART_SetBaudRate+3,f
  5518  166A  3EFF               	addlw	-1
  5519  166B  1D03               	skipz
  5520  166C  2E65               	goto	u3535
  5521  166D  0827               	movf	??_UART_SetBaudRate+3,w
  5522  166E  00F3               	movwf	___lldiv@divisor+3
  5523  166F  0826               	movf	??_UART_SetBaudRate+2,w
  5524  1670  00F2               	movwf	___lldiv@divisor+2
  5525  1671  0825               	movf	??_UART_SetBaudRate+1,w
  5526  1672  00F1               	movwf	___lldiv@divisor+1
  5527  1673  0824               	movf	??_UART_SetBaudRate,w
  5528  1674  00F0               	movwf	___lldiv@divisor
  5529  1675  3001               	movlw	1
  5530  1676  00F7               	movwf	___lldiv@dividend+3
  5531  1677  3031               	movlw	49
  5532  1678  00F6               	movwf	___lldiv@dividend+2
  5533  1679  302D               	movlw	45
  5534  167A  00F5               	movwf	___lldiv@dividend+1
  5535  167B  3000               	movlw	0
  5536  167C  00F4               	movwf	___lldiv@dividend
  5537  167D  160A  118A  27A2  160A  118A  	fcall	___lldiv
  5538  1682  0870               	movf	?___lldiv,w
  5539  1683  3EFF               	addlw	255
  5540  1684  1283               	bcf	3,5	;RP0=0, select bank0
  5541  1685  1303               	bcf	3,6	;RP1=0, select bank0
  5542  1686  00A8               	movwf	??_UART_SetBaudRate+4
  5543  1687  0828               	movf	??_UART_SetBaudRate+4,w
  5544  1688  2E8C               	goto	L4
  5545  1689                     l3034:	
  5546                           ;uart.c: 100: }
  5547                           
  5548                           
  5549                           ;uart.c: 101: else
  5550                           ;uart.c: 102: {
  5551                           ;uart.c: 104: RegValue = (uint8_t)(uint32_t)((20000000UL / (64*(uint32_t)9600)) - 1);
  5552  1689  301F               	movlw	31
  5553  168A  00A4               	movwf	??_UART_SetBaudRate
  5554  168B  0824               	movf	??_UART_SetBaudRate,w
  5555  168C                     L4:	
  5556  168C  00A9               	movwf	UART_SetBaudRate@RegValue
  5557                           
  5558                           ;uart.c: 105: }
  5559                           ;uart.c: 107: SPBRG = RegValue;
  5560  168D  0829               	movf	UART_SetBaudRate@RegValue,w
  5561  168E  1683               	bsf	3,5	;RP0=1, select bank1
  5562  168F  1303               	bcf	3,6	;RP1=0, select bank1
  5563  1690  0099               	movwf	25	;volatile
  5564  1691  0008               	return
  5565  1692                     __end_of_UART_SetBaudRate:	
  5566                           
  5567                           	psect	text29
  5568  0E03                     __ptext29:	
  5569 ;; *************** function _LCD_8bit_test *****************
  5570 ;; Defined at:
  5571 ;;		line 175 in file "main.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5585 ;;      Params:         0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0
  5587 ;;      Temps:          0      10       0       0       0
  5588 ;;      Totals:         0      10       0       0       0
  5589 ;;Total ram usage:       10 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    7
  5592 ;; This function calls:
  5593 ;;		_DELAY_ms
  5594 ;;		_LCD_DisplayString
  5595 ;;		_LCD_Init
  5596 ;;		_LCD_SetUp
  5597 ;;		_UART_Printf
  5598 ;;		_UART_RxChar
  5599 ;;		_UART_TxString
  5600 ;; This function is called by:
  5601 ;;		_main
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _LCD_8bit_test
  5607  0E03                     _LCD_8bit_test:	
  5608                           
  5609                           ;main.c: 177: UART_TxString("\n\r LCD DataBus: PD Control: RS-PB.0 RW-PB.1 EN-PB.2 ");
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _LCD_8bit_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5613  0E03  303D               	movlw	low (STR_5| (0+32768))
  5614  0E04  00F1               	movwf	UART_TxString@ptr_string
  5615  0E05  3089               	movlw	high (STR_5| (0+32768))
  5616  0E06  00F2               	movwf	UART_TxString@ptr_string+1
  5617  0E07  160A  118A  2414  120A  158A  	fcall	_UART_TxString
  5618                           
  5619                           ;main.c: 178: UART_Printf("\n\r Make connections and hit 'k' to test ");
  5620  0E0C  30F4               	movlw	low (STR_6| (0+32768))
  5621  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  5622  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  5623  0E0F  00C3               	movwf	UART_Printf@argList
  5624  0E10  3089               	movlw	high (STR_6| (0+32768))
  5625  0E11  00C4               	movwf	UART_Printf@argList+1
  5626  0E12  120A  118A  25C9  120A  158A  	fcall	_UART_Printf
  5627  0E17                     l3232:	
  5628                           ;main.c: 179: while(UART_RxChar()!='k');
  5629                           
  5630  0E17  160A  118A  227F  120A  158A  	fcall	_UART_RxChar
  5631  0E1C  3A6B               	xorlw	107
  5632  0E1D  1D03               	skipz
  5633  0E1E  2E17               	goto	l3232
  5634                           
  5635                           ;main.c: 180: LCD_SetUp(PB_0,PB_1,PB_2,PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7);
  5636  0E1F  3009               	movlw	9
  5637  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  5638  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  5639  0E22  00E5               	movwf	??_LCD_8bit_test
  5640  0E23  0865               	movf	??_LCD_8bit_test,w
  5641  0E24  00A0               	movwf	LCD_SetUp@RW
  5642  0E25  300A               	movlw	10
  5643  0E26  00E6               	movwf	??_LCD_8bit_test+1
  5644  0E27  0866               	movf	??_LCD_8bit_test+1,w
  5645  0E28  00A1               	movwf	LCD_SetUp@EN
  5646  0E29  3018               	movlw	24
  5647  0E2A  00E7               	movwf	??_LCD_8bit_test+2
  5648  0E2B  0867               	movf	??_LCD_8bit_test+2,w
  5649  0E2C  00A2               	movwf	LCD_SetUp@D0
  5650  0E2D  3019               	movlw	25
  5651  0E2E  00E8               	movwf	??_LCD_8bit_test+3
  5652  0E2F  0868               	movf	??_LCD_8bit_test+3,w
  5653  0E30  00A3               	movwf	LCD_SetUp@D1
  5654  0E31  301A               	movlw	26
  5655  0E32  00E9               	movwf	??_LCD_8bit_test+4
  5656  0E33  0869               	movf	??_LCD_8bit_test+4,w
  5657  0E34  00A4               	movwf	LCD_SetUp@D2
  5658  0E35  301B               	movlw	27
  5659  0E36  00EA               	movwf	??_LCD_8bit_test+5
  5660  0E37  086A               	movf	??_LCD_8bit_test+5,w
  5661  0E38  00A5               	movwf	LCD_SetUp@D3
  5662  0E39  301C               	movlw	28
  5663  0E3A  00EB               	movwf	??_LCD_8bit_test+6
  5664  0E3B  086B               	movf	??_LCD_8bit_test+6,w
  5665  0E3C  00A6               	movwf	LCD_SetUp@D4
  5666  0E3D  301D               	movlw	29
  5667  0E3E  00EC               	movwf	??_LCD_8bit_test+7
  5668  0E3F  086C               	movf	??_LCD_8bit_test+7,w
  5669  0E40  00A7               	movwf	LCD_SetUp@D5
  5670  0E41  301E               	movlw	30
  5671  0E42  00ED               	movwf	??_LCD_8bit_test+8
  5672  0E43  086D               	movf	??_LCD_8bit_test+8,w
  5673  0E44  00A8               	movwf	LCD_SetUp@D6
  5674  0E45  301F               	movlw	31
  5675  0E46  00EE               	movwf	??_LCD_8bit_test+9
  5676  0E47  086E               	movf	??_LCD_8bit_test+9,w
  5677  0E48  00A9               	movwf	LCD_SetUp@D7
  5678  0E49  3008               	movlw	8
  5679  0E4A  120A  118A  2254  120A  158A  	fcall	_LCD_SetUp
  5680                           
  5681                           ;main.c: 181: LCD_Init(2,16);
  5682  0E4F  3010               	movlw	16
  5683  0E50  1283               	bcf	3,5	;RP0=0, select bank0
  5684  0E51  1303               	bcf	3,6	;RP1=0, select bank0
  5685  0E52  00E5               	movwf	??_LCD_8bit_test
  5686  0E53  0865               	movf	??_LCD_8bit_test,w
  5687  0E54  00FC               	movwf	LCD_Init@v_MaxCharsPerLine_u8
  5688  0E55  3002               	movlw	2
  5689  0E56  120A  118A  2009  120A  158A  	fcall	_LCD_Init
  5690                           
  5691                           ;main.c: 182: DELAY_ms(100);
  5692  0E5B  3064               	movlw	100
  5693  0E5C  00F2               	movwf	DELAY_ms@ms_count
  5694  0E5D  3000               	movlw	0
  5695  0E5E  00F3               	movwf	DELAY_ms@ms_count+1
  5696  0E5F  160A  118A  232F  120A  158A  	fcall	_DELAY_ms
  5697                           
  5698                           ;main.c: 183: LCD_DisplayString("Explore Embedded");
  5699  0E64  3023               	movlw	low (STR_7| (0+32768))
  5700  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  5701  0E66  1303               	bcf	3,6	;RP1=0, select bank0
  5702  0E67  00A0               	movwf	LCD_DisplayString@ptr_stringPointer_u8
  5703  0E68  308B               	movlw	high (STR_7| (0+32768))
  5704  0E69  00A1               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1
  5705  0E6A  160A  118A  23EF  120A  158A  	fcall	_LCD_DisplayString
  5706                           
  5707                           ;main.c: 184: LCD_DisplayString("Lcd 8-bit Mode");
  5708  0E6F  3053               	movlw	low (STR_8| (0+32768))
  5709  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  5710  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  5711  0E72  00A0               	movwf	LCD_DisplayString@ptr_stringPointer_u8
  5712  0E73  308B               	movlw	high (STR_8| (0+32768))
  5713  0E74  00A1               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1
  5714  0E75  160A  118A  23EF  120A  158A  	fcall	_LCD_DisplayString
  5715  0E7A                     l677:	
  5716                           ;main.c: 185: while(1);
  5717                           
  5718  0E7A  2E7A               	goto	l677
  5719  0E7B                     __end_of_LCD_8bit_test:	
  5720                           
  5721                           	psect	text30
  5722  0D8B                     __ptext30:	
  5723 ;; *************** function _LCD_4bit_test *****************
  5724 ;; Defined at:
  5725 ;;		line 190 in file "main.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5739 ;;      Params:         0       0       0       0       0
  5740 ;;      Locals:         0       0       0       0       0
  5741 ;;      Temps:          0      10       0       0       0
  5742 ;;      Totals:         0      10       0       0       0
  5743 ;;Total ram usage:       10 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    7
  5746 ;; This function calls:
  5747 ;;		_DELAY_ms
  5748 ;;		_LCD_DisplayString
  5749 ;;		_LCD_Init
  5750 ;;		_LCD_SetUp
  5751 ;;		_UART_Printf
  5752 ;;		_UART_RxChar
  5753 ;;		_UART_TxString
  5754 ;; This function is called by:
  5755 ;;		_main
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _LCD_4bit_test
  5761  0D8B                     _LCD_4bit_test:	
  5762                           
  5763                           ;main.c: 192: UART_TxString("\n\r LCD DataBus: PD Msb bits(PD4-PD7) Control: RS-PB.0 RW-
      +                          PB.1 EN-PB.2 ");
  5764                           
  5765                           ;incstack = 0
  5766                           ; Regs used in _LCD_4bit_test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5767  0D8B  30F6               	movlw	low (STR_9| (0+32768))
  5768  0D8C  00F1               	movwf	UART_TxString@ptr_string
  5769  0D8D  3088               	movlw	high (STR_9| (0+32768))
  5770  0D8E  00F2               	movwf	UART_TxString@ptr_string+1
  5771  0D8F  160A  118A  2414  120A  158A  	fcall	_UART_TxString
  5772                           
  5773                           ;main.c: 193: UART_Printf("\n\r Make connections and hit 'k' to test ");
  5774  0D94  30F4               	movlw	low (STR_6| (0+32768))
  5775  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5776  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5777  0D97  00C3               	movwf	UART_Printf@argList
  5778  0D98  3089               	movlw	high (STR_6| (0+32768))
  5779  0D99  00C4               	movwf	UART_Printf@argList+1
  5780  0D9A  120A  118A  25C9  120A  158A  	fcall	_UART_Printf
  5781  0D9F                     l3244:	
  5782                           ;main.c: 194: while(UART_RxChar()!='k');
  5783                           
  5784  0D9F  160A  118A  227F  120A  158A  	fcall	_UART_RxChar
  5785  0DA4  3A6B               	xorlw	107
  5786  0DA5  1D03               	skipz
  5787  0DA6  2D9F               	goto	l3244
  5788                           
  5789                           ;main.c: 195: LCD_SetUp(PB_0,PB_1,PB_2,P_NC,P_NC,P_NC,P_NC,PD_4,PD_5,PD_6,PD_7);
  5790  0DA7  3009               	movlw	9
  5791  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  5792  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  5793  0DAA  00E5               	movwf	??_LCD_4bit_test
  5794  0DAB  0865               	movf	??_LCD_4bit_test,w
  5795  0DAC  00A0               	movwf	LCD_SetUp@RW
  5796  0DAD  300A               	movlw	10
  5797  0DAE  00E6               	movwf	??_LCD_4bit_test+1
  5798  0DAF  0866               	movf	??_LCD_4bit_test+1,w
  5799  0DB0  00A1               	movwf	LCD_SetUp@EN
  5800  0DB1  30FF               	movlw	255
  5801  0DB2  00E7               	movwf	??_LCD_4bit_test+2
  5802  0DB3  0867               	movf	??_LCD_4bit_test+2,w
  5803  0DB4  00A2               	movwf	LCD_SetUp@D0
  5804  0DB5  30FF               	movlw	255
  5805  0DB6  00E8               	movwf	??_LCD_4bit_test+3
  5806  0DB7  0868               	movf	??_LCD_4bit_test+3,w
  5807  0DB8  00A3               	movwf	LCD_SetUp@D1
  5808  0DB9  30FF               	movlw	255
  5809  0DBA  00E9               	movwf	??_LCD_4bit_test+4
  5810  0DBB  0869               	movf	??_LCD_4bit_test+4,w
  5811  0DBC  00A4               	movwf	LCD_SetUp@D2
  5812  0DBD  30FF               	movlw	255
  5813  0DBE  00EA               	movwf	??_LCD_4bit_test+5
  5814  0DBF  086A               	movf	??_LCD_4bit_test+5,w
  5815  0DC0  00A5               	movwf	LCD_SetUp@D3
  5816  0DC1  301C               	movlw	28
  5817  0DC2  00EB               	movwf	??_LCD_4bit_test+6
  5818  0DC3  086B               	movf	??_LCD_4bit_test+6,w
  5819  0DC4  00A6               	movwf	LCD_SetUp@D4
  5820  0DC5  301D               	movlw	29
  5821  0DC6  00EC               	movwf	??_LCD_4bit_test+7
  5822  0DC7  086C               	movf	??_LCD_4bit_test+7,w
  5823  0DC8  00A7               	movwf	LCD_SetUp@D5
  5824  0DC9  301E               	movlw	30
  5825  0DCA  00ED               	movwf	??_LCD_4bit_test+8
  5826  0DCB  086D               	movf	??_LCD_4bit_test+8,w
  5827  0DCC  00A8               	movwf	LCD_SetUp@D6
  5828  0DCD  301F               	movlw	31
  5829  0DCE  00EE               	movwf	??_LCD_4bit_test+9
  5830  0DCF  086E               	movf	??_LCD_4bit_test+9,w
  5831  0DD0  00A9               	movwf	LCD_SetUp@D7
  5832  0DD1  3008               	movlw	8
  5833  0DD2  120A  118A  2254  120A  158A  	fcall	_LCD_SetUp
  5834                           
  5835                           ;main.c: 196: LCD_Init(2,16);
  5836  0DD7  3010               	movlw	16
  5837  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  5838  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  5839  0DDA  00E5               	movwf	??_LCD_4bit_test
  5840  0DDB  0865               	movf	??_LCD_4bit_test,w
  5841  0DDC  00FC               	movwf	LCD_Init@v_MaxCharsPerLine_u8
  5842  0DDD  3002               	movlw	2
  5843  0DDE  120A  118A  2009  120A  158A  	fcall	_LCD_Init
  5844                           
  5845                           ;main.c: 197: DELAY_ms(100);
  5846  0DE3  3064               	movlw	100
  5847  0DE4  00F2               	movwf	DELAY_ms@ms_count
  5848  0DE5  3000               	movlw	0
  5849  0DE6  00F3               	movwf	DELAY_ms@ms_count+1
  5850  0DE7  160A  118A  232F  120A  158A  	fcall	_DELAY_ms
  5851                           
  5852                           ;main.c: 198: LCD_DisplayString("Explore Embedded");
  5853  0DEC  3023               	movlw	low (STR_7| (0+32768))
  5854  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  5855  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  5856  0DEF  00A0               	movwf	LCD_DisplayString@ptr_stringPointer_u8
  5857  0DF0  308B               	movlw	high (STR_7| (0+32768))
  5858  0DF1  00A1               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1
  5859  0DF2  160A  118A  23EF  120A  158A  	fcall	_LCD_DisplayString
  5860                           
  5861                           ;main.c: 199: LCD_DisplayString("Lcd 4-bit Mode");
  5862  0DF7  3044               	movlw	low (STR_12| (0+32768))
  5863  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  5864  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  5865  0DFA  00A0               	movwf	LCD_DisplayString@ptr_stringPointer_u8
  5866  0DFB  308B               	movlw	high (STR_12| (0+32768))
  5867  0DFC  00A1               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1
  5868  0DFD  160A  118A  23EF  120A  158A  	fcall	_LCD_DisplayString
  5869  0E02                     l686:	
  5870                           ;main.c: 200: while(1);
  5871                           
  5872  0E02  2E02               	goto	l686
  5873  0E03                     __end_of_LCD_4bit_test:	
  5874                           
  5875                           	psect	text31
  5876  127F                     __ptext31:	
  5877 ;; *************** function _UART_RxChar *****************
  5878 ;; Defined at:
  5879 ;;		line 123 in file "../00-libfiles/uart.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      unsigned char 
  5886 ;; Registers used:
  5887 ;;		wreg
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         0       0       0       0       0
  5894 ;;      Locals:         0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0
  5896 ;;      Totals:         0       0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_main
  5903 ;;		_gpio_test
  5904 ;;		_LCD_8bit_test
  5905 ;;		_LCD_4bit_test
  5906 ;;		_seg_test
  5907 ;;		_rtc_test
  5908 ;;		_keypad_test
  5909 ;;		_UART_RxString
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           
  5914                           ;psect for function _UART_RxChar
  5915  127F                     _UART_RxChar:	
  5916  127F                     l470:	
  5917                           ;uart.c: 125: while(RCIF==0);
  5918                           
  5919                           ;incstack = 0
  5920                           ; Regs used in _UART_RxChar: [wreg]
  5921                           
  5922  127F  1283               	bcf	3,5	;RP0=0, select bank0
  5923  1280  1303               	bcf	3,6	;RP1=0, select bank0
  5924  1281  1E8C               	btfss	12,5	;volatile
  5925  1282  2A7F               	goto	l470
  5926                           
  5927                           ;uart.c: 126: RCIF=0;
  5928  1283  128C               	bcf	12,5	;volatile
  5929                           
  5930                           ;uart.c: 127: return(RCREG);
  5931  1284  081A               	movf	26,w	;volatile
  5932  1285  0008               	return
  5933  1286                     __end_of_UART_RxChar:	
  5934                           
  5935                           	psect	text32
  5936  05C9                     __ptext32:	
  5937 ;; *************** function _UART_Printf *****************
  5938 ;; Defined at:
  5939 ;;		line 413 in file "../00-libfiles/uart.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  argList         2   35[BANK0 ] PTR const unsigned char 
  5942 ;;		 -> STR_23(10), STR_22(40), STR_21(21), STR_20(29), 
  5943 ;;		 -> STR_19(16), STR_18(23), STR_17(38), STR_16(42), 
  5944 ;;		 -> STR_15(34), STR_14(41), STR_10(41), STR_6(41), 
  5945 ;;		 -> STR_4(40), STR_3(47), 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  v_num_u32       4   58[BANK0 ] unsigned long 
  5948 ;;  v_num_s32       4   52[BANK0 ] long 
  5949 ;;  ptr             2   64[BANK0 ] PTR const unsigned char 
  5950 ;;		 -> STR_23(10), STR_22(40), STR_21(21), STR_20(29), 
  5951 ;;		 -> STR_19(16), STR_18(23), STR_17(38), STR_16(42), 
  5952 ;;		 -> STR_15(34), STR_14(41), STR_10(41), STR_6(41), 
  5953 ;;		 -> STR_4(40), STR_3(47), 
  5954 ;;  v_num_u16       2   62[BANK0 ] unsigned int 
  5955 ;;  v_num_s16       2   56[BANK0 ] int 
  5956 ;;  argp            1   68[BANK0 ] PTR void [1]
  5957 ;;		 -> ?_UART_Printf(1), 
  5958 ;;  v_numOfDigit    1   67[BANK0 ] unsigned char 
  5959 ;;  ch              1   66[BANK0 ] unsigned char 
  5960 ;;  str             1   51[BANK0 ] PTR unsigned char 
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      void 
  5963 ;; Registers used:
  5964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5970 ;;      Params:         0      14       0       0       0
  5971 ;;      Locals:         0      18       0       0       0
  5972 ;;      Temps:          0       2       0       0       0
  5973 ;;      Totals:         0      34       0       0       0
  5974 ;;Total ram usage:       34 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    2
  5977 ;; This function calls:
  5978 ;;		_UART_TxChar
  5979 ;;		_UART_TxNumber
  5980 ;;		_UART_TxString
  5981 ;;		___bmul
  5982 ;; This function is called by:
  5983 ;;		_gpio_test
  5984 ;;		_LCD_8bit_test
  5985 ;;		_LCD_4bit_test
  5986 ;;		_seg_test
  5987 ;;		_rtc_test
  5988 ;;		_eeprom_test
  5989 ;;		_adc_test
  5990 ;;		_keypad_test
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           
  5995                           ;psect for function _UART_Printf
  5996  05C9                     _UART_Printf:	
  5997                           
  5998                           ;uart.c: 415: const char *ptr;
  5999                           ;uart.c: 416: va_list argp;
  6000                           ;uart.c: 417: sint16_t v_num_s16;
  6001                           ;uart.c: 418: sint32_t v_num_s32;
  6002                           ;uart.c: 419: uint16_t v_num_u16;
  6003                           ;uart.c: 420: uint32_t v_num_u32;
  6004                           ;uart.c: 421: char *str;
  6005                           ;uart.c: 422: char ch;
  6006                           ;uart.c: 423: uint8_t v_numOfDigitsToTransmit_u8;
  6007                           ;uart.c: 429: *argp = __va_start();
  6008                           
  6009                           ;incstack = 0
  6010                           ; Regs used in _UART_Printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6011  05C9  3045               	movlw	(low ((?_UART_Printf| 0+2)))& (0+255)
  6012  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  6013  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  6014  05CC  00D1               	movwf	??_UART_Printf
  6015  05CD  0851               	movf	??_UART_Printf,w
  6016  05CE  00E4               	movwf	UART_Printf@argp
  6017                           
  6018                           ;uart.c: 432: for(ptr = argList; *ptr != '\0'; ptr++)
  6019  05CF  0843               	movf	UART_Printf@argList,w
  6020  05D0  00E0               	movwf	UART_Printf@ptr
  6021  05D1  0844               	movf	UART_Printf@argList+1,w
  6022  05D2  00E1               	movwf	UART_Printf@ptr+1
  6023  05D3                     l3162:	
  6024  05D3  0861               	movf	UART_Printf@ptr+1,w
  6025  05D4  00FF               	movwf	127
  6026  05D5  0860               	movf	UART_Printf@ptr,w
  6027  05D6  0084               	movwf	4
  6028  05D7  120A  158A  2000  120A  118A  	fcall	stringtab
  6029  05DC  3A00               	xorlw	0
  6030  05DD  1903               	btfsc	3,2
  6031  05DE  0008               	return
  6032                           
  6033                           ;uart.c: 433: {
  6034                           ;uart.c: 435: ch= *ptr;
  6035  05DF  0861               	movf	UART_Printf@ptr+1,w
  6036  05E0  00FF               	movwf	127
  6037  05E1  0860               	movf	UART_Printf@ptr,w
  6038  05E2  0084               	movwf	4
  6039  05E3  120A  158A  2000  120A  118A  	fcall	stringtab
  6040  05E8  00D1               	movwf	??_UART_Printf
  6041  05E9  0851               	movf	??_UART_Printf,w
  6042  05EA  00E2               	movwf	UART_Printf@ch
  6043                           
  6044                           ;uart.c: 436: if(ch == '%')
  6045  05EB  3025               	movlw	37
  6046  05EC  0662               	xorwf	UART_Printf@ch,w
  6047  05ED  1D03               	btfss	3,2
  6048  05EE  2FDB               	goto	l3158
  6049                           
  6050                           ;uart.c: 437: {
  6051                           ;uart.c: 438: ptr++;
  6052  05EF  3001               	movlw	1
  6053  05F0  07E0               	addwf	UART_Printf@ptr,f
  6054  05F1  1803               	skipnc
  6055  05F2  0AE1               	incf	UART_Printf@ptr+1,f
  6056                           
  6057                           ;uart.c: 439: ch = *ptr;
  6058  05F3  0861               	movf	UART_Printf@ptr+1,w
  6059  05F4  00FF               	movwf	127
  6060  05F5  0860               	movf	UART_Printf@ptr,w
  6061  05F6  0084               	movwf	4
  6062  05F7  120A  158A  2000  120A  118A  	fcall	stringtab
  6063  05FC  00D1               	movwf	??_UART_Printf
  6064  05FD  0851               	movf	??_UART_Printf,w
  6065  05FE  00E2               	movwf	UART_Printf@ch
  6066                           
  6067                           ;uart.c: 440: if((ch>=0x30) && (ch<=0x39))
  6068  05FF  3030               	movlw	48
  6069  0600  0262               	subwf	UART_Printf@ch,w
  6070  0601  1C03               	skipc
  6071  0602  2E32               	goto	l3070
  6072  0603  303A               	movlw	58
  6073  0604  0262               	subwf	UART_Printf@ch,w
  6074  0605  1803               	skipnc
  6075  0606  2E32               	goto	l3070
  6076                           
  6077                           ;uart.c: 441: {
  6078                           ;uart.c: 442: v_numOfDigitsToTransmit_u8 = 0;
  6079  0607  01E3               	clrf	UART_Printf@v_numOfDigitsToTransmit_u8
  6080  0608                     l3066:	
  6081                           ;uart.c: 443: while((ch>=0x30) && (ch<=0x39))
  6082                           
  6083  0608  3030               	movlw	48
  6084  0609  0262               	subwf	UART_Printf@ch,w
  6085  060A  1C03               	skipc
  6086  060B  2FA9               	goto	l3156
  6087  060C  303A               	movlw	58
  6088  060D  0262               	subwf	UART_Printf@ch,w
  6089  060E  1803               	btfsc	3,0
  6090  060F  2FA9               	goto	l3156
  6091                           
  6092                           ;uart.c: 444: {
  6093                           ;uart.c: 445: v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30)
      +                          ;
  6094  0610  300A               	movlw	10
  6095  0611  00D1               	movwf	??_UART_Printf
  6096  0612  0851               	movf	??_UART_Printf,w
  6097  0613  00A0               	movwf	___bmul@multiplicand
  6098  0614  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6099  0615  160A  118A  231C  120A  118A  	fcall	___bmul
  6100  061A  1283               	bcf	3,5	;RP0=0, select bank0
  6101  061B  1303               	bcf	3,6	;RP1=0, select bank0
  6102  061C  0762               	addwf	UART_Printf@ch,w
  6103  061D  3ED0               	addlw	208
  6104  061E  00D2               	movwf	??_UART_Printf+1
  6105  061F  0852               	movf	??_UART_Printf+1,w
  6106  0620  00E3               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  6107                           
  6108                           ;uart.c: 446: ptr++;
  6109  0621  3001               	movlw	1
  6110  0622  07E0               	addwf	UART_Printf@ptr,f
  6111  0623  1803               	skipnc
  6112  0624  0AE1               	incf	UART_Printf@ptr+1,f
  6113                           
  6114                           ;uart.c: 447: ch = *ptr;
  6115  0625  0861               	movf	UART_Printf@ptr+1,w
  6116  0626  00FF               	movwf	127
  6117  0627  0860               	movf	UART_Printf@ptr,w
  6118  0628  0084               	movwf	4
  6119  0629  120A  158A  2000  120A  118A  	fcall	stringtab
  6120  062E  00D1               	movwf	??_UART_Printf
  6121  062F  0851               	movf	??_UART_Printf,w
  6122  0630  00E2               	movwf	UART_Printf@ch
  6123  0631  2E08               	goto	l3066
  6124  0632                     l3070:	
  6125                           ;uart.c: 448: }
  6126                           ;uart.c: 449: }
  6127                           
  6128                           
  6129                           ;uart.c: 450: else
  6130                           ;uart.c: 451: {
  6131                           ;uart.c: 452: v_numOfDigitsToTransmit_u8 = 0xffu;
  6132  0632  30FF               	movlw	255
  6133  0633  00D1               	movwf	??_UART_Printf
  6134  0634  0851               	movf	??_UART_Printf,w
  6135  0635  00E3               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  6136                           
  6137                           ;uart.c: 453: }
  6138                           ;uart.c: 456: switch(ch)
  6139  0636  2FA9               	goto	l3156
  6140  0637                     l3072:	
  6141                           ;uart.c: 457: {
  6142                           ;uart.c: 458: case 'C':
  6143                           
  6144                           
  6145                           ;uart.c: 459: case 'c':
  6146                           ;uart.c: 460: ch = (*(uint8_t *)__va_arg((*(uint8_t **)argp), (uint8_t)0));
  6147  0637  0864               	movf	UART_Printf@argp,w
  6148  0638  0084               	movwf	4
  6149  0639  1383               	bcf	3,7	;select IRP bank0
  6150  063A  0800               	movf	0,w
  6151  063B  00D1               	movwf	??_UART_Printf
  6152  063C  0851               	movf	??_UART_Printf,w
  6153  063D  00E2               	movwf	UART_Printf@ch
  6154  063E  3002               	movlw	2
  6155  063F  00D1               	movwf	??_UART_Printf
  6156  0640  0851               	movf	??_UART_Printf,w
  6157  0641  07E4               	addwf	UART_Printf@argp,f
  6158  0642  2FDB               	goto	l3158
  6159  0643                     l3078:	
  6160                           ;uart.c: 464: case 'd':
  6161                           
  6162                           ;uart.c: 462: break;
  6163                           
  6164                           ;uart.c: 461: UART_TxChar(ch);
  6165                           
  6166                           
  6167                           ;uart.c: 465: v_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
  6168  0643  1283               	bcf	3,5	;RP0=0, select bank0
  6169  0644  1303               	bcf	3,6	;RP1=0, select bank0
  6170  0645  0864               	movf	UART_Printf@argp,w
  6171  0646  0084               	movwf	4
  6172  0647  1383               	bcf	3,7	;select IRP bank0
  6173  0648  0800               	movf	0,w
  6174  0649  00D8               	movwf	UART_Printf@v_num_s16
  6175  064A  0A84               	incf	4,f
  6176  064B  0800               	movf	0,w
  6177  064C  00D9               	movwf	UART_Printf@v_num_s16+1
  6178  064D  3002               	movlw	2
  6179  064E  00D1               	movwf	??_UART_Printf
  6180  064F  0851               	movf	??_UART_Printf,w
  6181  0650  07E4               	addwf	UART_Printf@argp,f
  6182                           
  6183                           ;uart.c: 466: if(v_num_s16<0)
  6184  0651  1FD9               	btfss	UART_Printf@v_num_s16+1,7
  6185  0652  2E5E               	goto	l3088
  6186                           
  6187                           ;uart.c: 467: {
  6188                           ;uart.c: 468: v_num_s16 = -v_num_s16;
  6189  0653  09D8               	comf	UART_Printf@v_num_s16,f
  6190  0654  09D9               	comf	UART_Printf@v_num_s16+1,f
  6191  0655  0AD8               	incf	UART_Printf@v_num_s16,f
  6192  0656  1903               	skipnz
  6193  0657  0AD9               	incf	UART_Printf@v_num_s16+1,f
  6194                           
  6195                           ;uart.c: 469: UART_TxChar('-');
  6196  0658  302D               	movlw	45
  6197  0659  160A  118A  22AC  120A  118A  	fcall	_UART_TxChar
  6198  065E                     l3088:	
  6199                           
  6200                           ;uart.c: 470: }
  6201                           ;uart.c: 471: UART_TxNumber(10u,v_num_s16,v_numOfDigitsToTransmit_u8);
  6202  065E  1283               	bcf	3,5	;RP0=0, select bank0
  6203  065F  1303               	bcf	3,6	;RP1=0, select bank0
  6204  0660  0858               	movf	UART_Printf@v_num_s16,w
  6205  0661  00A4               	movwf	UART_TxNumber@v_number_u32
  6206  0662  0859               	movf	UART_Printf@v_num_s16+1,w
  6207  0663  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6208  0664  3000               	movlw	0
  6209  0665  1BA5               	btfsc	UART_TxNumber@v_number_u32+1,7
  6210  0666  30FF               	movlw	255
  6211  0667  00A6               	movwf	UART_TxNumber@v_number_u32+2
  6212  0668  00A7               	movwf	UART_TxNumber@v_number_u32+3
  6213  0669  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6214  066A  00D1               	movwf	??_UART_Printf
  6215  066B  0851               	movf	??_UART_Printf,w
  6216  066C  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6217  066D  300A               	movlw	10
  6218  066E  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6219                           
  6220                           ;uart.c: 472: break;
  6221  0673  2FE1               	goto	l3160
  6222  0674                     l3090:	
  6223                           ;uart.c: 474: case 'D':
  6224                           
  6225                           
  6226                           ;uart.c: 475: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  6227  0674  1283               	bcf	3,5	;RP0=0, select bank0
  6228  0675  1303               	bcf	3,6	;RP1=0, select bank0
  6229  0676  0864               	movf	UART_Printf@argp,w
  6230  0677  0084               	movwf	4
  6231  0678  1383               	bcf	3,7	;select IRP bank0
  6232  0679  0800               	movf	0,w
  6233  067A  00D4               	movwf	UART_Printf@v_num_s32
  6234  067B  0A84               	incf	4,f
  6235  067C  0800               	movf	0,w
  6236  067D  00D5               	movwf	UART_Printf@v_num_s32+1
  6237  067E  0A84               	incf	4,f
  6238  067F  0800               	movf	0,w
  6239  0680  00D6               	movwf	UART_Printf@v_num_s32+2
  6240  0681  0A84               	incf	4,f
  6241  0682  0800               	movf	0,w
  6242  0683  00D7               	movwf	UART_Printf@v_num_s32+3
  6243  0684  3004               	movlw	4
  6244  0685  00D1               	movwf	??_UART_Printf
  6245  0686  0851               	movf	??_UART_Printf,w
  6246  0687  07E4               	addwf	UART_Printf@argp,f
  6247                           
  6248                           ;uart.c: 476: if(v_num_s32<0)
  6249  0688  1FD7               	btfss	UART_Printf@v_num_s32+3,7
  6250  0689  2E9B               	goto	l3100
  6251                           
  6252                           ;uart.c: 477: {
  6253                           ;uart.c: 478: v_num_s32 = -v_num_s32;
  6254  068A  09D4               	comf	UART_Printf@v_num_s32,f
  6255  068B  09D5               	comf	UART_Printf@v_num_s32+1,f
  6256  068C  09D6               	comf	UART_Printf@v_num_s32+2,f
  6257  068D  09D7               	comf	UART_Printf@v_num_s32+3,f
  6258  068E  0AD4               	incf	UART_Printf@v_num_s32,f
  6259  068F  1903               	skipnz
  6260  0690  0AD5               	incf	UART_Printf@v_num_s32+1,f
  6261  0691  1903               	skipnz
  6262  0692  0AD6               	incf	UART_Printf@v_num_s32+2,f
  6263  0693  1903               	skipnz
  6264  0694  0AD7               	incf	UART_Printf@v_num_s32+3,f
  6265                           
  6266                           ;uart.c: 479: UART_TxChar('-');
  6267  0695  302D               	movlw	45
  6268  0696  160A  118A  22AC  120A  118A  	fcall	_UART_TxChar
  6269  069B                     l3100:	
  6270                           
  6271                           ;uart.c: 480: }
  6272                           ;uart.c: 481: UART_TxNumber(10u,v_num_s32,v_numOfDigitsToTransmit_u8);
  6273  069B  1283               	bcf	3,5	;RP0=0, select bank0
  6274  069C  1303               	bcf	3,6	;RP1=0, select bank0
  6275  069D  0857               	movf	UART_Printf@v_num_s32+3,w
  6276  069E  00A7               	movwf	UART_TxNumber@v_number_u32+3
  6277  069F  0856               	movf	UART_Printf@v_num_s32+2,w
  6278  06A0  00A6               	movwf	UART_TxNumber@v_number_u32+2
  6279  06A1  0855               	movf	UART_Printf@v_num_s32+1,w
  6280  06A2  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6281  06A3  0854               	movf	UART_Printf@v_num_s32,w
  6282  06A4  00A4               	movwf	UART_TxNumber@v_number_u32
  6283  06A5  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6284  06A6  00D1               	movwf	??_UART_Printf
  6285  06A7  0851               	movf	??_UART_Printf,w
  6286  06A8  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6287  06A9  300A               	movlw	10
  6288  06AA  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6289                           
  6290                           ;uart.c: 482: break;
  6291  06AF  2FE1               	goto	l3160
  6292  06B0                     l3102:	
  6293                           ;uart.c: 484: case 'u':
  6294                           
  6295                           
  6296                           ;uart.c: 485: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  6297  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  6298  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  6299  06B2  0864               	movf	UART_Printf@argp,w
  6300  06B3  0084               	movwf	4
  6301  06B4  1383               	bcf	3,7	;select IRP bank0
  6302  06B5  0800               	movf	0,w
  6303  06B6  00DE               	movwf	UART_Printf@v_num_u16
  6304  06B7  0A84               	incf	4,f
  6305  06B8  0800               	movf	0,w
  6306  06B9  00DF               	movwf	UART_Printf@v_num_u16+1
  6307  06BA  3002               	movlw	2
  6308  06BB  00D1               	movwf	??_UART_Printf
  6309  06BC  0851               	movf	??_UART_Printf,w
  6310  06BD  07E4               	addwf	UART_Printf@argp,f
  6311                           
  6312                           ;uart.c: 486: UART_TxNumber(10u,v_num_u16,v_numOfDigitsToTransmit_u8);
  6313  06BE  085E               	movf	UART_Printf@v_num_u16,w
  6314  06BF  00A4               	movwf	UART_TxNumber@v_number_u32
  6315  06C0  085F               	movf	UART_Printf@v_num_u16+1,w
  6316  06C1  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6317  06C2  01A6               	clrf	UART_TxNumber@v_number_u32+2
  6318  06C3  01A7               	clrf	UART_TxNumber@v_number_u32+3
  6319  06C4  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6320  06C5  00D1               	movwf	??_UART_Printf
  6321  06C6  0851               	movf	??_UART_Printf,w
  6322  06C7  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6323  06C8  300A               	movlw	10
  6324  06C9  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6325                           
  6326                           ;uart.c: 487: break;
  6327  06CE  2FE1               	goto	l3160
  6328  06CF                     l3108:	
  6329                           ;uart.c: 489: case 'U':
  6330                           
  6331                           
  6332                           ;uart.c: 490: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  6333  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  6334  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  6335  06D1  0864               	movf	UART_Printf@argp,w
  6336  06D2  0084               	movwf	4
  6337  06D3  1383               	bcf	3,7	;select IRP bank0
  6338  06D4  0800               	movf	0,w
  6339  06D5  00DA               	movwf	UART_Printf@v_num_u32
  6340  06D6  0A84               	incf	4,f
  6341  06D7  0800               	movf	0,w
  6342  06D8  00DB               	movwf	UART_Printf@v_num_u32+1
  6343  06D9  0A84               	incf	4,f
  6344  06DA  0800               	movf	0,w
  6345  06DB  00DC               	movwf	UART_Printf@v_num_u32+2
  6346  06DC  0A84               	incf	4,f
  6347  06DD  0800               	movf	0,w
  6348  06DE  00DD               	movwf	UART_Printf@v_num_u32+3
  6349  06DF  3004               	movlw	4
  6350  06E0  00D1               	movwf	??_UART_Printf
  6351  06E1  0851               	movf	??_UART_Printf,w
  6352  06E2  07E4               	addwf	UART_Printf@argp,f
  6353                           
  6354                           ;uart.c: 491: UART_TxNumber(10u,v_num_u32,v_numOfDigitsToTransmit_u8);
  6355  06E3  085D               	movf	UART_Printf@v_num_u32+3,w
  6356  06E4  00A7               	movwf	UART_TxNumber@v_number_u32+3
  6357  06E5  085C               	movf	UART_Printf@v_num_u32+2,w
  6358  06E6  00A6               	movwf	UART_TxNumber@v_number_u32+2
  6359  06E7  085B               	movf	UART_Printf@v_num_u32+1,w
  6360  06E8  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6361  06E9  085A               	movf	UART_Printf@v_num_u32,w
  6362  06EA  00A4               	movwf	UART_TxNumber@v_number_u32
  6363  06EB  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6364  06EC  00D1               	movwf	??_UART_Printf
  6365  06ED  0851               	movf	??_UART_Printf,w
  6366  06EE  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6367  06EF  300A               	movlw	10
  6368  06F0  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6369                           
  6370                           ;uart.c: 492: break;
  6371  06F5  2FE1               	goto	l3160
  6372  06F6                     l3114:	
  6373                           ;uart.c: 494: case 'x':
  6374                           
  6375                           
  6376                           ;uart.c: 495: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  6377  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  6378  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  6379  06F8  0864               	movf	UART_Printf@argp,w
  6380  06F9  0084               	movwf	4
  6381  06FA  1383               	bcf	3,7	;select IRP bank0
  6382  06FB  0800               	movf	0,w
  6383  06FC  00DE               	movwf	UART_Printf@v_num_u16
  6384  06FD  0A84               	incf	4,f
  6385  06FE  0800               	movf	0,w
  6386  06FF  00DF               	movwf	UART_Printf@v_num_u16+1
  6387  0700  3002               	movlw	2
  6388  0701  00D1               	movwf	??_UART_Printf
  6389  0702  0851               	movf	??_UART_Printf,w
  6390  0703  07E4               	addwf	UART_Printf@argp,f
  6391                           
  6392                           ;uart.c: 496: UART_TxNumber(16u,v_num_u16,v_numOfDigitsToTransmit_u8);
  6393  0704  085E               	movf	UART_Printf@v_num_u16,w
  6394  0705  00A4               	movwf	UART_TxNumber@v_number_u32
  6395  0706  085F               	movf	UART_Printf@v_num_u16+1,w
  6396  0707  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6397  0708  01A6               	clrf	UART_TxNumber@v_number_u32+2
  6398  0709  01A7               	clrf	UART_TxNumber@v_number_u32+3
  6399  070A  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6400  070B  00D1               	movwf	??_UART_Printf
  6401  070C  0851               	movf	??_UART_Printf,w
  6402  070D  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6403  070E  3010               	movlw	16
  6404  070F  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6405                           
  6406                           ;uart.c: 497: break;
  6407  0714  2FE1               	goto	l3160
  6408  0715                     l3120:	
  6409                           ;uart.c: 499: case 'X':
  6410                           
  6411                           
  6412                           ;uart.c: 500: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  6413  0715  1283               	bcf	3,5	;RP0=0, select bank0
  6414  0716  1303               	bcf	3,6	;RP1=0, select bank0
  6415  0717  0864               	movf	UART_Printf@argp,w
  6416  0718  0084               	movwf	4
  6417  0719  1383               	bcf	3,7	;select IRP bank0
  6418  071A  0800               	movf	0,w
  6419  071B  00DA               	movwf	UART_Printf@v_num_u32
  6420  071C  0A84               	incf	4,f
  6421  071D  0800               	movf	0,w
  6422  071E  00DB               	movwf	UART_Printf@v_num_u32+1
  6423  071F  0A84               	incf	4,f
  6424  0720  0800               	movf	0,w
  6425  0721  00DC               	movwf	UART_Printf@v_num_u32+2
  6426  0722  0A84               	incf	4,f
  6427  0723  0800               	movf	0,w
  6428  0724  00DD               	movwf	UART_Printf@v_num_u32+3
  6429  0725  3004               	movlw	4
  6430  0726  00D1               	movwf	??_UART_Printf
  6431  0727  0851               	movf	??_UART_Printf,w
  6432  0728  07E4               	addwf	UART_Printf@argp,f
  6433                           
  6434                           ;uart.c: 501: UART_TxNumber(16u,v_num_u32,v_numOfDigitsToTransmit_u8);
  6435  0729  085D               	movf	UART_Printf@v_num_u32+3,w
  6436  072A  00A7               	movwf	UART_TxNumber@v_number_u32+3
  6437  072B  085C               	movf	UART_Printf@v_num_u32+2,w
  6438  072C  00A6               	movwf	UART_TxNumber@v_number_u32+2
  6439  072D  085B               	movf	UART_Printf@v_num_u32+1,w
  6440  072E  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6441  072F  085A               	movf	UART_Printf@v_num_u32,w
  6442  0730  00A4               	movwf	UART_TxNumber@v_number_u32
  6443  0731  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6444  0732  00D1               	movwf	??_UART_Printf
  6445  0733  0851               	movf	??_UART_Printf,w
  6446  0734  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6447  0735  3010               	movlw	16
  6448  0736  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6449                           
  6450                           ;uart.c: 502: break;
  6451  073B  2FE1               	goto	l3160
  6452  073C                     l3126:	
  6453                           ;uart.c: 505: case 'b':
  6454                           
  6455                           
  6456                           ;uart.c: 506: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  6457  073C  1283               	bcf	3,5	;RP0=0, select bank0
  6458  073D  1303               	bcf	3,6	;RP1=0, select bank0
  6459  073E  0864               	movf	UART_Printf@argp,w
  6460  073F  0084               	movwf	4
  6461  0740  1383               	bcf	3,7	;select IRP bank0
  6462  0741  0800               	movf	0,w
  6463  0742  00DE               	movwf	UART_Printf@v_num_u16
  6464  0743  0A84               	incf	4,f
  6465  0744  0800               	movf	0,w
  6466  0745  00DF               	movwf	UART_Printf@v_num_u16+1
  6467  0746  3002               	movlw	2
  6468  0747  00D1               	movwf	??_UART_Printf
  6469  0748  0851               	movf	??_UART_Printf,w
  6470  0749  07E4               	addwf	UART_Printf@argp,f
  6471                           
  6472                           ;uart.c: 508: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  6473  074A  0A63               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6474  074B  1D03               	btfss	3,2
  6475  074C  2F51               	goto	l3134
  6476                           
  6477                           ;uart.c: 509: v_numOfDigitsToTransmit_u8 = 16;
  6478  074D  3010               	movlw	16
  6479  074E  00D1               	movwf	??_UART_Printf
  6480  074F  0851               	movf	??_UART_Printf,w
  6481  0750  00E3               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  6482  0751                     l3134:	
  6483                           
  6484                           ;uart.c: 511: UART_TxNumber(2u,v_num_u16,v_numOfDigitsToTransmit_u8);
  6485  0751  085E               	movf	UART_Printf@v_num_u16,w
  6486  0752  00A4               	movwf	UART_TxNumber@v_number_u32
  6487  0753  085F               	movf	UART_Printf@v_num_u16+1,w
  6488  0754  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6489  0755  01A6               	clrf	UART_TxNumber@v_number_u32+2
  6490  0756  01A7               	clrf	UART_TxNumber@v_number_u32+3
  6491  0757  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6492  0758  00D1               	movwf	??_UART_Printf
  6493  0759  0851               	movf	??_UART_Printf,w
  6494  075A  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6495  075B  3002               	movlw	2
  6496  075C  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6497                           
  6498                           ;uart.c: 512: break;
  6499  0761  2FE1               	goto	l3160
  6500  0762                     l3136:	
  6501                           ;uart.c: 514: case 'B':
  6502                           
  6503                           
  6504                           ;uart.c: 515: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  6505  0762  1283               	bcf	3,5	;RP0=0, select bank0
  6506  0763  1303               	bcf	3,6	;RP1=0, select bank0
  6507  0764  0864               	movf	UART_Printf@argp,w
  6508  0765  0084               	movwf	4
  6509  0766  1383               	bcf	3,7	;select IRP bank0
  6510  0767  0800               	movf	0,w
  6511  0768  00DA               	movwf	UART_Printf@v_num_u32
  6512  0769  0A84               	incf	4,f
  6513  076A  0800               	movf	0,w
  6514  076B  00DB               	movwf	UART_Printf@v_num_u32+1
  6515  076C  0A84               	incf	4,f
  6516  076D  0800               	movf	0,w
  6517  076E  00DC               	movwf	UART_Printf@v_num_u32+2
  6518  076F  0A84               	incf	4,f
  6519  0770  0800               	movf	0,w
  6520  0771  00DD               	movwf	UART_Printf@v_num_u32+3
  6521  0772  3004               	movlw	4
  6522  0773  00D1               	movwf	??_UART_Printf
  6523  0774  0851               	movf	??_UART_Printf,w
  6524  0775  07E4               	addwf	UART_Printf@argp,f
  6525                           
  6526                           ;uart.c: 517: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  6527  0776  0A63               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6528  0777  1D03               	btfss	3,2
  6529  0778  2F7D               	goto	l3144
  6530                           
  6531                           ;uart.c: 518: v_numOfDigitsToTransmit_u8 = 32;
  6532  0779  3020               	movlw	32
  6533  077A  00D1               	movwf	??_UART_Printf
  6534  077B  0851               	movf	??_UART_Printf,w
  6535  077C  00E3               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  6536  077D                     l3144:	
  6537                           
  6538                           ;uart.c: 520: UART_TxNumber(2u,v_num_u32,v_numOfDigitsToTransmit_u8);
  6539  077D  085D               	movf	UART_Printf@v_num_u32+3,w
  6540  077E  00A7               	movwf	UART_TxNumber@v_number_u32+3
  6541  077F  085C               	movf	UART_Printf@v_num_u32+2,w
  6542  0780  00A6               	movwf	UART_TxNumber@v_number_u32+2
  6543  0781  085B               	movf	UART_Printf@v_num_u32+1,w
  6544  0782  00A5               	movwf	UART_TxNumber@v_number_u32+1
  6545  0783  085A               	movf	UART_Printf@v_num_u32,w
  6546  0784  00A4               	movwf	UART_TxNumber@v_number_u32
  6547  0785  0863               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  6548  0786  00D1               	movwf	??_UART_Printf
  6549  0787  0851               	movf	??_UART_Printf,w
  6550  0788  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  6551  0789  3002               	movlw	2
  6552  078A  120A  118A  24D7  120A  118A  	fcall	_UART_TxNumber
  6553                           
  6554                           ;uart.c: 525: case 'f':
  6555                           ;uart.c: 530: break;
  6556                           
  6557                           ;uart.c: 524: case 'F':
  6558                           
  6559                           ;uart.c: 521: break;
  6560  078F  2FE1               	goto	l3160
  6561  0790                     l3146:	
  6562                           ;uart.c: 533: case 'S':
  6563                           
  6564                           
  6565                           ;uart.c: 534: case 's':
  6566                           ;uart.c: 535: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  6567  0790  1283               	bcf	3,5	;RP0=0, select bank0
  6568  0791  1303               	bcf	3,6	;RP1=0, select bank0
  6569  0792  0864               	movf	UART_Printf@argp,w
  6570  0793  0084               	movwf	4
  6571  0794  1383               	bcf	3,7	;select IRP bank0
  6572  0795  0800               	movf	0,w
  6573  0796  00D1               	movwf	??_UART_Printf
  6574  0797  0851               	movf	??_UART_Printf,w
  6575  0798  00D3               	movwf	UART_Printf@str
  6576  0799  3001               	movlw	1
  6577  079A  00D1               	movwf	??_UART_Printf
  6578  079B  0851               	movf	??_UART_Printf,w
  6579  079C  07E4               	addwf	UART_Printf@argp,f
  6580                           
  6581                           ;uart.c: 536: UART_TxString(str);
  6582  079D  0853               	movf	UART_Printf@str,w
  6583  079E  00F1               	movwf	UART_TxString@ptr_string
  6584  079F  3000               	movlw	0
  6585  07A0  00F2               	movwf	UART_TxString@ptr_string+1
  6586  07A1  160A  118A  2414  120A  118A  	fcall	_UART_TxString
  6587                           
  6588                           ;uart.c: 537: break;
  6589  07A6  2FE1               	goto	l3160
  6590  07A7                     l3152:	
  6591                           ;uart.c: 539: case '%':
  6592                           
  6593                           
  6594                           ;uart.c: 540: UART_TxChar('%');
  6595  07A7  3025               	movlw	37
  6596  07A8  2FDC               	goto	L5
  6597  07A9                     l3156:	
  6598                           ;uart.c: 542: }
  6599                           
  6600                           ;uart.c: 541: break;
  6601                           
  6602  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  6603  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  6604  07AB  0862               	movf	UART_Printf@ch,w
  6605                           
  6606                           ; Switch size 1, requested type "space"
  6607                           ; Number of cases is 15, Range of values is 37 to 120
  6608                           ; switch strategies available:
  6609                           ; Name         Instructions Cycles
  6610                           ; simple_byte           46    24 (average)
  6611                           ; direct_byte          263    11 (fixed)
  6612                           ; jumptable            263     9 (fixed)
  6613                           ;	Chosen strategy is simple_byte
  6614  07AC  3A25               	xorlw	37	; case 37
  6615  07AD  1903               	skipnz
  6616  07AE  2FA7               	goto	l3152
  6617  07AF  3A67               	xorlw	103	; case 66
  6618  07B0  1903               	skipnz
  6619  07B1  2F62               	goto	l3136
  6620  07B2  3A01               	xorlw	1	; case 67
  6621  07B3  1903               	skipnz
  6622  07B4  2E37               	goto	l3072
  6623  07B5  3A07               	xorlw	7	; case 68
  6624  07B6  1903               	skipnz
  6625  07B7  2E74               	goto	l3090
  6626  07B8  3A02               	xorlw	2	; case 70
  6627  07B9  1903               	skipnz
  6628  07BA  2FE1               	goto	l3160
  6629  07BB  3A15               	xorlw	21	; case 83
  6630  07BC  1903               	skipnz
  6631  07BD  2F90               	goto	l3146
  6632  07BE  3A06               	xorlw	6	; case 85
  6633  07BF  1903               	skipnz
  6634  07C0  2ECF               	goto	l3108
  6635  07C1  3A0D               	xorlw	13	; case 88
  6636  07C2  1903               	skipnz
  6637  07C3  2F15               	goto	l3120
  6638  07C4  3A3A               	xorlw	58	; case 98
  6639  07C5  1903               	skipnz
  6640  07C6  2F3C               	goto	l3126
  6641  07C7  3A01               	xorlw	1	; case 99
  6642  07C8  1903               	skipnz
  6643  07C9  2E37               	goto	l3072
  6644  07CA  3A07               	xorlw	7	; case 100
  6645  07CB  1903               	skipnz
  6646  07CC  2E43               	goto	l3078
  6647  07CD  3A02               	xorlw	2	; case 102
  6648  07CE  1903               	skipnz
  6649  07CF  2FE1               	goto	l3160
  6650  07D0  3A15               	xorlw	21	; case 115
  6651  07D1  1903               	skipnz
  6652  07D2  2F90               	goto	l3146
  6653  07D3  3A06               	xorlw	6	; case 117
  6654  07D4  1903               	skipnz
  6655  07D5  2EB0               	goto	l3102
  6656  07D6  3A0D               	xorlw	13	; case 120
  6657  07D7  1903               	skipnz
  6658  07D8  2EF6               	goto	l3114
  6659  07D9  2FE1               	goto	l3160
  6660                           
  6661                           ;uart.c: 543: }
  6662  07DA  2FE1               	goto	l3160
  6663  07DB                     l3158:	
  6664                           
  6665                           ;uart.c: 544: else
  6666                           ;uart.c: 545: {
  6667                           ;uart.c: 547: UART_TxChar(ch);
  6668  07DB  0862               	movf	UART_Printf@ch,w
  6669  07DC                     L5:	
  6670  07DC  160A  118A  22AC  120A  118A  	fcall	_UART_TxChar
  6671  07E1                     l3160:	
  6672  07E1  3001               	movlw	1
  6673  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  6674  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  6675  07E4  07E0               	addwf	UART_Printf@ptr,f
  6676  07E5  1803               	skipnc
  6677  07E6  0AE1               	incf	UART_Printf@ptr+1,f
  6678  07E7  2DD3               	goto	l3162
  6679  07E8                     __end_of_UART_Printf:	
  6680                           
  6681                           	psect	text33
  6682  1414                     __ptext33:	
  6683 ;; *************** function _UART_TxString *****************
  6684 ;; Defined at:
  6685 ;;		line 169 in file "../00-libfiles/uart.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  ptr_string      2    1[COMMON] PTR const unsigned char 
  6688 ;;		 -> STR_13(73), STR_9(71), STR_5(53), STR_2(37), 
  6689 ;;		 -> STR_1(139), 
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;		None
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  1    wreg      void 
  6694 ;; Registers used:
  6695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6701 ;;      Params:         2       0       0       0       0
  6702 ;;      Locals:         0       0       0       0       0
  6703 ;;      Temps:          0       0       0       0       0
  6704 ;;      Totals:         2       0       0       0       0
  6705 ;;Total ram usage:        2 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; Hardware stack levels required when called:    1
  6708 ;; This function calls:
  6709 ;;		_UART_TxChar
  6710 ;; This function is called by:
  6711 ;;		_UART_Printf
  6712 ;;		_main
  6713 ;;		_LCD_8bit_test
  6714 ;;		_LCD_4bit_test
  6715 ;;		_seg_test
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           
  6720                           ;psect for function _UART_TxString
  6721  1414                     _UART_TxString:	
  6722  1414                     l2752:	
  6723                           ;uart.c: 171: while(*ptr_string)
  6724                           
  6725                           ;incstack = 0
  6726                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6727                           
  6728  1414  0872               	movf	UART_TxString@ptr_string+1,w
  6729  1415  1283               	bcf	3,5	;RP0=0, select bank0
  6730  1416  1303               	bcf	3,6	;RP1=0, select bank0
  6731  1417  00FF               	movwf	127
  6732  1418  0871               	movf	UART_TxString@ptr_string,w
  6733  1419  0084               	movwf	4
  6734  141A  120A  158A  2000  160A  118A  	fcall	stringtab
  6735  141F  3A00               	xorlw	0
  6736  1420  1903               	btfsc	3,2
  6737  1421  0008               	return
  6738                           
  6739                           ;uart.c: 172: UART_TxChar(*ptr_string++);
  6740  1422  0872               	movf	UART_TxString@ptr_string+1,w
  6741  1423  1283               	bcf	3,5	;RP0=0, select bank0
  6742  1424  1303               	bcf	3,6	;RP1=0, select bank0
  6743  1425  00FF               	movwf	127
  6744  1426  0871               	movf	UART_TxString@ptr_string,w
  6745  1427  0084               	movwf	4
  6746  1428  120A  158A  2000  160A  118A  	fcall	stringtab
  6747  142D  160A  118A  22AC  160A  118A  	fcall	_UART_TxChar
  6748  1432  3001               	movlw	1
  6749  1433  07F1               	addwf	UART_TxString@ptr_string,f
  6750  1434  1803               	skipnc
  6751  1435  0AF2               	incf	UART_TxString@ptr_string+1,f
  6752  1436  3000               	movlw	0
  6753  1437  07F2               	addwf	UART_TxString@ptr_string+1,f
  6754  1438  2C14               	goto	l2752
  6755  1439                     __end_of_UART_TxString:	
  6756                           
  6757                           	psect	text34
  6758  04D7                     __ptext34:	
  6759 ;; *************** function _UART_TxNumber *****************
  6760 ;; Defined at:
  6761 ;;		line 260 in file "../00-libfiles/uart.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  v_numericSys    1    wreg     unsigned char 
  6764 ;;  v_number_u32    4    4[BANK0 ] unsigned long 
  6765 ;;  v_numOfDigit    1    8[BANK0 ] unsigned char 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  v_numericSys    1   33[BANK0 ] unsigned char 
  6768 ;;  a              10   21[BANK0 ] unsigned char [10]
  6769 ;;  i               1   34[BANK0 ] unsigned char 
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6779 ;;      Params:         0       5       0       0       0
  6780 ;;      Locals:         0      14       0       0       0
  6781 ;;      Temps:          0      12       0       0       0
  6782 ;;      Totals:         0      31       0       0       0
  6783 ;;Total ram usage:       31 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    1
  6786 ;; This function calls:
  6787 ;;		_UART_TxChar
  6788 ;;		___bmul
  6789 ;;		___lldiv
  6790 ;; This function is called by:
  6791 ;;		_UART_Printf
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _UART_TxNumber
  6797  04D7                     _UART_TxNumber:	
  6798                           
  6799                           ;incstack = 0
  6800                           ; Regs used in _UART_TxNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6801                           ;UART_TxNumber@v_numericSystem_u8 stored from wreg
  6802  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  6803  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  6804  04D9  00C1               	movwf	UART_TxNumber@v_numericSystem_u8
  6805                           
  6806                           ;uart.c: 262: uint8_t i=0,a[10];
  6807  04DA  01C2               	clrf	UART_TxNumber@i
  6808                           
  6809                           ;uart.c: 264: if(2u == v_numericSystem_u8)
  6810  04DB  3002               	movlw	2
  6811  04DC  0641               	xorwf	UART_TxNumber@v_numericSystem_u8,w
  6812  04DD  1903               	btfsc	3,2
  6813  04DE  2D1E               	goto	l2766
  6814  04DF  2D22               	goto	l2768
  6815  04E0                     l2760:	
  6816                           ;uart.c: 265: {
  6817                           ;uart.c: 266: while(v_numOfDigitsToTransmit_u8!=0)
  6818                           
  6819                           
  6820                           ;uart.c: 267: {
  6821                           ;uart.c: 270: i = (((v_number_u32)&((1<<((v_numOfDigitsToTransmit_u8-1)))))!=0u);
  6822  04E0  0824               	movf	UART_TxNumber@v_number_u32,w
  6823  04E1  00A9               	movwf	??_UART_TxNumber
  6824  04E2  0825               	movf	UART_TxNumber@v_number_u32+1,w
  6825  04E3  00AA               	movwf	??_UART_TxNumber+1
  6826  04E4  0826               	movf	UART_TxNumber@v_number_u32+2,w
  6827  04E5  00AB               	movwf	??_UART_TxNumber+2
  6828  04E6  0827               	movf	UART_TxNumber@v_number_u32+3,w
  6829  04E7  00AC               	movwf	??_UART_TxNumber+3
  6830  04E8  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  6831  04E9  3EFF               	addlw	-1
  6832  04EA  00AD               	movwf	??_UART_TxNumber+4
  6833  04EB  0AAD               	incf	??_UART_TxNumber+4,f
  6834  04EC  3001               	movlw	1
  6835  04ED  00AE               	movwf	??_UART_TxNumber+5
  6836  04EE  3000               	movlw	0
  6837  04EF  00AF               	movwf	??_UART_TxNumber+6
  6838  04F0  2CF4               	goto	u3144
  6839  04F1                     u3145:	
  6840  04F1  1003               	clrc
  6841  04F2  0DAE               	rlf	??_UART_TxNumber+5,f
  6842  04F3  0DAF               	rlf	??_UART_TxNumber+6,f
  6843  04F4                     u3144:	
  6844  04F4  0BAD               	decfsz	??_UART_TxNumber+4,f
  6845  04F5  2CF1               	goto	u3145
  6846  04F6  082E               	movf	??_UART_TxNumber+5,w
  6847  04F7  00B0               	movwf	??_UART_TxNumber+7
  6848  04F8  082F               	movf	??_UART_TxNumber+6,w
  6849  04F9  00B1               	movwf	??_UART_TxNumber+8
  6850  04FA  3000               	movlw	0
  6851  04FB  1BB1               	btfsc	??_UART_TxNumber+8,7
  6852  04FC  30FF               	movlw	255
  6853  04FD  00B2               	movwf	??_UART_TxNumber+9
  6854  04FE  00B3               	movwf	??_UART_TxNumber+10
  6855  04FF  0830               	movf	??_UART_TxNumber+7,w
  6856  0500  05A9               	andwf	??_UART_TxNumber,f
  6857  0501  0831               	movf	??_UART_TxNumber+8,w
  6858  0502  05AA               	andwf	??_UART_TxNumber+1,f
  6859  0503  0832               	movf	??_UART_TxNumber+9,w
  6860  0504  05AB               	andwf	??_UART_TxNumber+2,f
  6861  0505  0833               	movf	??_UART_TxNumber+10,w
  6862  0506  05AC               	andwf	??_UART_TxNumber+3,f
  6863  0507  082C               	movf	??_UART_TxNumber+3,w
  6864  0508  042B               	iorwf	??_UART_TxNumber+2,w
  6865  0509  042A               	iorwf	??_UART_TxNumber+1,w
  6866  050A  0429               	iorwf	??_UART_TxNumber,w
  6867  050B  1903               	btfsc	3,2
  6868  050C  2D0F               	goto	u3150
  6869  050D  3001               	movlw	1
  6870  050E  2D10               	goto	u3160
  6871  050F                     u3150:	
  6872  050F  3000               	movlw	0
  6873  0510                     u3160:	
  6874  0510  00B4               	movwf	??_UART_TxNumber+11
  6875  0511  0834               	movf	??_UART_TxNumber+11,w
  6876  0512  00C2               	movwf	UART_TxNumber@i
  6877                           
  6878                           ;uart.c: 271: UART_TxChar(((i)+0x30));
  6879  0513  0842               	movf	UART_TxNumber@i,w
  6880  0514  3E30               	addlw	48
  6881  0515  160A  118A  22AC  120A  118A  	fcall	_UART_TxChar
  6882                           
  6883                           ;uart.c: 272: v_numOfDigitsToTransmit_u8--;
  6884  051A  3001               	movlw	1
  6885  051B  1283               	bcf	3,5	;RP0=0, select bank0
  6886  051C  1303               	bcf	3,6	;RP1=0, select bank0
  6887  051D  02A8               	subwf	UART_TxNumber@v_numOfDigitsToTransmit_u8,f
  6888  051E                     l2766:	
  6889  051E  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  6890  051F  1903               	btfsc	3,2
  6891  0520  0008               	return
  6892  0521  2CE0               	goto	l2760
  6893  0522                     l2768:	
  6894                           ;uart.c: 273: }
  6895                           ;uart.c: 274: }
  6896                           
  6897                           
  6898                           ;uart.c: 275: else if(v_number_u32==0)
  6899  0522  0827               	movf	UART_TxNumber@v_number_u32+3,w
  6900  0523  0426               	iorwf	UART_TxNumber@v_number_u32+2,w
  6901  0524  0425               	iorwf	UART_TxNumber@v_number_u32+1,w
  6902  0525  0424               	iorwf	UART_TxNumber@v_number_u32,w
  6903  0526  1D03               	skipz
  6904  0527  2D2D               	goto	l2772
  6905                           
  6906                           ;uart.c: 276: {
  6907                           ;uart.c: 280: UART_TxChar('0');
  6908  0528  3030               	movlw	48
  6909  0529  160A  118A  22AC   	fcall	_UART_TxChar
  6910                           
  6911                           ;uart.c: 281: }
  6912  052C  0008               	return
  6913  052D                     l2772:	
  6914                           
  6915                           ;uart.c: 282: else
  6916                           ;uart.c: 283: {
  6917                           ;uart.c: 284: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
  6918  052D  1283               	bcf	3,5	;RP0=0, select bank0
  6919  052E  1303               	bcf	3,6	;RP1=0, select bank0
  6920  052F  01C2               	clrf	UART_TxNumber@i
  6921  0530                     l2790:	
  6922  0530  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  6923  0531  0242               	subwf	UART_TxNumber@i,w
  6924  0532  1803               	btfsc	3,0
  6925  0533  2DC5               	goto	l2802
  6926                           
  6927                           ;uart.c: 285: {
  6928                           ;uart.c: 288: if(v_number_u32!=0)
  6929  0534  0827               	movf	UART_TxNumber@v_number_u32+3,w
  6930  0535  0426               	iorwf	UART_TxNumber@v_number_u32+2,w
  6931  0536  0425               	iorwf	UART_TxNumber@v_number_u32+1,w
  6932  0537  0424               	iorwf	UART_TxNumber@v_number_u32,w
  6933  0538  1903               	skipnz
  6934  0539  2D8F               	goto	l2780
  6935                           
  6936                           ;uart.c: 289: {
  6937                           ;uart.c: 296: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u
      +                          32/v_numericSystem_u8)));
  6938  053A  0841               	movf	UART_TxNumber@v_numericSystem_u8,w
  6939  053B  00A9               	movwf	??_UART_TxNumber
  6940  053C  0829               	movf	??_UART_TxNumber,w
  6941  053D  00A0               	movwf	___bmul@multiplicand
  6942  053E  0827               	movf	UART_TxNumber@v_number_u32+3,w
  6943  053F  00F7               	movwf	___lldiv@dividend+3
  6944  0540  0826               	movf	UART_TxNumber@v_number_u32+2,w
  6945  0541  00F6               	movwf	___lldiv@dividend+2
  6946  0542  0825               	movf	UART_TxNumber@v_number_u32+1,w
  6947  0543  00F5               	movwf	___lldiv@dividend+1
  6948  0544  0824               	movf	UART_TxNumber@v_number_u32,w
  6949  0545  00F4               	movwf	___lldiv@dividend
  6950  0546  0841               	movf	UART_TxNumber@v_numericSystem_u8,w
  6951  0547  00AA               	movwf	??_UART_TxNumber+1
  6952  0548  01AB               	clrf	??_UART_TxNumber+2
  6953  0549  01AC               	clrf	??_UART_TxNumber+3
  6954  054A  01AD               	clrf	??_UART_TxNumber+4
  6955  054B  082D               	movf	??_UART_TxNumber+4,w
  6956  054C  00F3               	movwf	___lldiv@divisor+3
  6957  054D  082C               	movf	??_UART_TxNumber+3,w
  6958  054E  00F2               	movwf	___lldiv@divisor+2
  6959  054F  082B               	movf	??_UART_TxNumber+2,w
  6960  0550  00F1               	movwf	___lldiv@divisor+1
  6961  0551  082A               	movf	??_UART_TxNumber+1,w
  6962  0552  00F0               	movwf	___lldiv@divisor
  6963  0553  160A  118A  27A2  120A  118A  	fcall	___lldiv
  6964  0558  0870               	movf	?___lldiv,w
  6965  0559  160A  118A  231C  120A  118A  	fcall	___bmul
  6966  055E  3AFF               	xorlw	255
  6967  055F  3E01               	addlw	1
  6968  0560  1283               	bcf	3,5	;RP0=0, select bank0
  6969  0561  1303               	bcf	3,6	;RP1=0, select bank0
  6970  0562  0724               	addwf	UART_TxNumber@v_number_u32,w
  6971  0563  00AE               	movwf	??_UART_TxNumber+5
  6972  0564  0842               	movf	UART_TxNumber@i,w
  6973  0565  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  6974  0566  0084               	movwf	4
  6975  0567  082E               	movf	??_UART_TxNumber+5,w
  6976  0568  1383               	bcf	3,7	;select IRP bank0
  6977  0569  0080               	movwf	0
  6978                           
  6979                           ;uart.c: 297: v_number_u32=v_number_u32/v_numericSystem_u8;
  6980  056A  0841               	movf	UART_TxNumber@v_numericSystem_u8,w
  6981  056B  00A9               	movwf	??_UART_TxNumber
  6982  056C  01AA               	clrf	??_UART_TxNumber+1
  6983  056D  01AB               	clrf	??_UART_TxNumber+2
  6984  056E  01AC               	clrf	??_UART_TxNumber+3
  6985  056F  082C               	movf	??_UART_TxNumber+3,w
  6986  0570  00F3               	movwf	___lldiv@divisor+3
  6987  0571  082B               	movf	??_UART_TxNumber+2,w
  6988  0572  00F2               	movwf	___lldiv@divisor+2
  6989  0573  082A               	movf	??_UART_TxNumber+1,w
  6990  0574  00F1               	movwf	___lldiv@divisor+1
  6991  0575  0829               	movf	??_UART_TxNumber,w
  6992  0576  00F0               	movwf	___lldiv@divisor
  6993  0577  0827               	movf	UART_TxNumber@v_number_u32+3,w
  6994  0578  00F7               	movwf	___lldiv@dividend+3
  6995  0579  0826               	movf	UART_TxNumber@v_number_u32+2,w
  6996  057A  00F6               	movwf	___lldiv@dividend+2
  6997  057B  0825               	movf	UART_TxNumber@v_number_u32+1,w
  6998  057C  00F5               	movwf	___lldiv@dividend+1
  6999  057D  0824               	movf	UART_TxNumber@v_number_u32,w
  7000  057E  00F4               	movwf	___lldiv@dividend
  7001  057F  160A  118A  27A2  120A  118A  	fcall	___lldiv
  7002  0584  0873               	movf	?___lldiv+3,w
  7003  0585  1283               	bcf	3,5	;RP0=0, select bank0
  7004  0586  1303               	bcf	3,6	;RP1=0, select bank0
  7005  0587  00A7               	movwf	UART_TxNumber@v_number_u32+3
  7006  0588  0872               	movf	?___lldiv+2,w
  7007  0589  00A6               	movwf	UART_TxNumber@v_number_u32+2
  7008  058A  0871               	movf	?___lldiv+1,w
  7009  058B  00A5               	movwf	UART_TxNumber@v_number_u32+1
  7010  058C  0870               	movf	?___lldiv,w
  7011  058D  00A4               	movwf	UART_TxNumber@v_number_u32
  7012                           
  7013                           ;uart.c: 298: }
  7014  058E  2D9B               	goto	l2788
  7015  058F                     l2780:	
  7016                           
  7017                           ;uart.c: 299: else if( (v_numOfDigitsToTransmit_u8 == 0xffu) ||
  7018                           ;uart.c: 300: (v_numOfDigitsToTransmit_u8 > 10u))
  7019  058F  0A28               	incf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  7020  0590  1903               	btfsc	3,2
  7021  0591  2DC5               	goto	l2802
  7022  0592  300B               	movlw	11
  7023  0593  0228               	subwf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  7024  0594  1803               	btfsc	3,0
  7025  0595  2DC5               	goto	l2802
  7026                           
  7027                           ;uart.c: 306: else
  7028                           ;uart.c: 307: {
  7029                           ;uart.c: 311: a[i]=0;
  7030                           
  7031                           ;uart.c: 305: }
  7032                           
  7033                           ;uart.c: 301: {
  7034                           ;uart.c: 304: break;
  7035  0596  0842               	movf	UART_TxNumber@i,w
  7036  0597  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  7037  0598  0084               	movwf	4
  7038  0599  1383               	bcf	3,7	;select IRP bank0
  7039  059A  0180               	clrf	0
  7040  059B                     l2788:	
  7041  059B  3001               	movlw	1
  7042  059C  00A9               	movwf	??_UART_TxNumber
  7043  059D  0829               	movf	??_UART_TxNumber,w
  7044  059E  07C2               	addwf	UART_TxNumber@i,f
  7045  059F  2D30               	goto	l2790
  7046  05A0                     l2792:	
  7047                           ;uart.c: 312: }
  7048                           ;uart.c: 313: }
  7049                           ;uart.c: 315: while(i)
  7050                           
  7051                           
  7052                           ;uart.c: 316: {
  7053                           ;uart.c: 318: UART_TxChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  7054  05A0  0842               	movf	UART_TxNumber@i,w
  7055  05A1  3EFF               	addlw	255
  7056  05A2  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  7057  05A3  0084               	movwf	4
  7058  05A4  300A               	movlw	10
  7059  05A5  1383               	bcf	3,7	;select IRP bank0
  7060  05A6  0200               	subwf	0,w
  7061  05A7  1803               	skipnc
  7062  05A8  2DB0               	goto	l2796
  7063  05A9  0842               	movf	UART_TxNumber@i,w
  7064  05AA  3EFF               	addlw	255
  7065  05AB  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  7066  05AC  0084               	movwf	4
  7067  05AD  0800               	movf	0,w
  7068  05AE  3E30               	addlw	48
  7069  05AF  2DB6               	goto	L6
  7070  05B0                     l2796:	
  7071  05B0  0842               	movf	UART_TxNumber@i,w
  7072  05B1  3EFF               	addlw	255
  7073  05B2  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  7074  05B3  0084               	movwf	4
  7075  05B4  0800               	movf	0,w
  7076  05B5  3E37               	addlw	55
  7077  05B6                     L6:	
  7078  05B6  00BF               	movwf	_UART_TxNumber$486
  7079  05B7  3000               	movlw	0
  7080  05B8  1803               	skipnc
  7081  05B9  3001               	movlw	1
  7082  05BA  00C0               	movwf	_UART_TxNumber$486+1
  7083  05BB  083F               	movf	_UART_TxNumber$486,w
  7084  05BC  160A  118A  22AC  120A  118A  	fcall	_UART_TxChar
  7085                           
  7086                           ;uart.c: 319: i--;
  7087  05C1  3001               	movlw	1
  7088  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  7089  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  7090  05C4  02C2               	subwf	UART_TxNumber@i,f
  7091  05C5                     l2802:	
  7092  05C5  0842               	movf	UART_TxNumber@i,w
  7093  05C6  1903               	btfsc	3,2
  7094  05C7  0008               	return
  7095  05C8  2DA0               	goto	l2792
  7096  05C9                     __end_of_UART_TxNumber:	
  7097                           
  7098                           	psect	text35
  7099  17A2                     __ptext35:	
  7100 ;; *************** function ___lldiv *****************
  7101 ;; Defined at:
  7102 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\lldiv.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  divisor         4    0[COMMON] unsigned long 
  7105 ;;  dividend        4    4[COMMON] unsigned long 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  quotient        4    9[COMMON] unsigned long 
  7108 ;;  counter         1   13[COMMON] unsigned char 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  4    0[COMMON] unsigned long 
  7111 ;; Registers used:
  7112 ;;		wreg, status,2, status,0
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7118 ;;      Params:         8       0       0       0       0
  7119 ;;      Locals:         5       0       0       0       0
  7120 ;;      Temps:          1       0       0       0       0
  7121 ;;      Totals:        14       0       0       0       0
  7122 ;;Total ram usage:       14 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		_UART_SetBaudRate
  7128 ;;		_UART_TxNumber
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           
  7133                           ;psect for function ___lldiv
  7134  17A2                     ___lldiv:	
  7135                           
  7136                           ;incstack = 0
  7137                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7138  17A2  3000               	movlw	0
  7139  17A3  00FC               	movwf	___lldiv@quotient+3
  7140  17A4  3000               	movlw	0
  7141  17A5  00FB               	movwf	___lldiv@quotient+2
  7142  17A6  3000               	movlw	0
  7143  17A7  00FA               	movwf	___lldiv@quotient+1
  7144  17A8  3000               	movlw	0
  7145  17A9  00F9               	movwf	___lldiv@quotient
  7146  17AA  0873               	movf	___lldiv@divisor+3,w
  7147  17AB  0472               	iorwf	___lldiv@divisor+2,w
  7148  17AC  0471               	iorwf	___lldiv@divisor+1,w
  7149  17AD  0470               	iorwf	___lldiv@divisor,w
  7150  17AE  1903               	skipnz
  7151  17AF  2FF7               	goto	l2572
  7152  17B0  01FD               	clrf	___lldiv@counter
  7153  17B1  0AFD               	incf	___lldiv@counter,f
  7154  17B2                     l2558:	
  7155  17B2  1BF3               	btfsc	___lldiv@divisor+3,7
  7156  17B3  2FC2               	goto	l2560
  7157  17B4  3001               	movlw	1
  7158  17B5  00F8               	movwf	??___lldiv
  7159  17B6                     u2795:	
  7160  17B6  1003               	clrc
  7161  17B7  0DF0               	rlf	___lldiv@divisor,f
  7162  17B8  0DF1               	rlf	___lldiv@divisor+1,f
  7163  17B9  0DF2               	rlf	___lldiv@divisor+2,f
  7164  17BA  0DF3               	rlf	___lldiv@divisor+3,f
  7165  17BB  0BF8               	decfsz	??___lldiv,f
  7166  17BC  2FB6               	goto	u2795
  7167  17BD  3001               	movlw	1
  7168  17BE  00F8               	movwf	??___lldiv
  7169  17BF  0878               	movf	??___lldiv,w
  7170  17C0  07FD               	addwf	___lldiv@counter,f
  7171  17C1  2FB2               	goto	l2558
  7172  17C2                     l2560:	
  7173  17C2  3001               	movlw	1
  7174  17C3  00F8               	movwf	??___lldiv
  7175  17C4                     u2815:	
  7176  17C4  1003               	clrc
  7177  17C5  0DF9               	rlf	___lldiv@quotient,f
  7178  17C6  0DFA               	rlf	___lldiv@quotient+1,f
  7179  17C7  0DFB               	rlf	___lldiv@quotient+2,f
  7180  17C8  0DFC               	rlf	___lldiv@quotient+3,f
  7181  17C9  0BF8               	decfsz	??___lldiv,f
  7182  17CA  2FC4               	goto	u2815
  7183  17CB  0873               	movf	___lldiv@divisor+3,w
  7184  17CC  0277               	subwf	___lldiv@dividend+3,w
  7185  17CD  1D03               	skipz
  7186  17CE  2FD9               	goto	u2825
  7187  17CF  0872               	movf	___lldiv@divisor+2,w
  7188  17D0  0276               	subwf	___lldiv@dividend+2,w
  7189  17D1  1D03               	skipz
  7190  17D2  2FD9               	goto	u2825
  7191  17D3  0871               	movf	___lldiv@divisor+1,w
  7192  17D4  0275               	subwf	___lldiv@dividend+1,w
  7193  17D5  1D03               	skipz
  7194  17D6  2FD9               	goto	u2825
  7195  17D7  0870               	movf	___lldiv@divisor,w
  7196  17D8  0274               	subwf	___lldiv@dividend,w
  7197  17D9                     u2825:	
  7198  17D9  1C03               	skipc
  7199  17DA  2FEA               	goto	l2568
  7200  17DB  0870               	movf	___lldiv@divisor,w
  7201  17DC  02F4               	subwf	___lldiv@dividend,f
  7202  17DD  0871               	movf	___lldiv@divisor+1,w
  7203  17DE  1C03               	skipc
  7204  17DF  0F71               	incfsz	___lldiv@divisor+1,w
  7205  17E0  02F5               	subwf	___lldiv@dividend+1,f
  7206  17E1  0872               	movf	___lldiv@divisor+2,w
  7207  17E2  1C03               	skipc
  7208  17E3  0F72               	incfsz	___lldiv@divisor+2,w
  7209  17E4  02F6               	subwf	___lldiv@dividend+2,f
  7210  17E5  0873               	movf	___lldiv@divisor+3,w
  7211  17E6  1C03               	skipc
  7212  17E7  0F73               	incfsz	___lldiv@divisor+3,w
  7213  17E8  02F7               	subwf	___lldiv@dividend+3,f
  7214  17E9  1479               	bsf	___lldiv@quotient,0
  7215  17EA                     l2568:	
  7216  17EA  3001               	movlw	1
  7217  17EB                     u2835:	
  7218  17EB  1003               	clrc
  7219  17EC  0CF3               	rrf	___lldiv@divisor+3,f
  7220  17ED  0CF2               	rrf	___lldiv@divisor+2,f
  7221  17EE  0CF1               	rrf	___lldiv@divisor+1,f
  7222  17EF  0CF0               	rrf	___lldiv@divisor,f
  7223  17F0  3EFF               	addlw	-1
  7224  17F1  1D03               	skipz
  7225  17F2  2FEB               	goto	u2835
  7226  17F3  3001               	movlw	1
  7227  17F4  02FD               	subwf	___lldiv@counter,f
  7228  17F5  1D03               	btfss	3,2
  7229  17F6  2FC2               	goto	l2560
  7230  17F7                     l2572:	
  7231  17F7  087C               	movf	___lldiv@quotient+3,w
  7232  17F8  00F3               	movwf	?___lldiv+3
  7233  17F9  087B               	movf	___lldiv@quotient+2,w
  7234  17FA  00F2               	movwf	?___lldiv+2
  7235  17FB  087A               	movf	___lldiv@quotient+1,w
  7236  17FC  00F1               	movwf	?___lldiv+1
  7237  17FD  0879               	movf	___lldiv@quotient,w
  7238  17FE  00F0               	movwf	?___lldiv
  7239  17FF  0008               	return
  7240  1800                     __end_of___lldiv:	
  7241                           
  7242                           	psect	text36
  7243  131C                     __ptext36:	
  7244 ;; *************** function ___bmul *****************
  7245 ;; Defined at:
  7246 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\Umul8.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  multiplier      1    wreg     unsigned char 
  7249 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7252 ;;  product         1    2[BANK0 ] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      unsigned char 
  7255 ;; Registers used:
  7256 ;;		wreg, status,2, status,0
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7262 ;;      Params:         0       1       0       0       0
  7263 ;;      Locals:         0       2       0       0       0
  7264 ;;      Temps:          0       1       0       0       0
  7265 ;;      Totals:         0       4       0       0       0
  7266 ;;Total ram usage:        4 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_UART_TxNumber
  7272 ;;		_UART_Printf
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function ___bmul
  7278  131C                     ___bmul:	
  7279                           
  7280                           ;incstack = 0
  7281                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7282                           ;___bmul@multiplier stored from wreg
  7283  131C  1283               	bcf	3,5	;RP0=0, select bank0
  7284  131D  1303               	bcf	3,6	;RP1=0, select bank0
  7285  131E  00A3               	movwf	___bmul@multiplier
  7286  131F  01A2               	clrf	___bmul@product
  7287  1320                     l2540:	
  7288  1320  1C23               	btfss	___bmul@multiplier,0
  7289  1321  2B26               	goto	l2544
  7290  1322  0820               	movf	___bmul@multiplicand,w
  7291  1323  00A1               	movwf	??___bmul
  7292  1324  0821               	movf	??___bmul,w
  7293  1325  07A2               	addwf	___bmul@product,f
  7294  1326                     l2544:	
  7295  1326  1003               	clrc
  7296  1327  0DA0               	rlf	___bmul@multiplicand,f
  7297  1328  1003               	clrc
  7298  1329  0CA3               	rrf	___bmul@multiplier,f
  7299  132A  0823               	movf	___bmul@multiplier,w
  7300  132B  1D03               	btfss	3,2
  7301  132C  2B20               	goto	l2540
  7302  132D  0822               	movf	___bmul@product,w
  7303  132E  0008               	return
  7304  132F                     __end_of___bmul:	
  7305                           
  7306                           	psect	text37
  7307  12AC                     __ptext37:	
  7308 ;; *************** function _UART_TxChar *****************
  7309 ;; Defined at:
  7310 ;;		line 145 in file "../00-libfiles/uart.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  v_uartData_u    1    wreg     unsigned char 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  v_uartData_u    1    0[COMMON] unsigned char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7324 ;;      Params:         0       0       0       0       0
  7325 ;;      Locals:         1       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0
  7327 ;;      Totals:         1       0       0       0       0
  7328 ;;Total ram usage:        1 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; This function calls:
  7331 ;;		Nothing
  7332 ;; This function is called by:
  7333 ;;		_UART_TxString
  7334 ;;		_UART_TxNumber
  7335 ;;		_UART_Printf
  7336 ;;		_UART_RxString
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _UART_TxChar
  7342  12AC                     _UART_TxChar:	
  7343                           
  7344                           ;incstack = 0
  7345                           ; Regs used in _UART_TxChar: [wreg]
  7346                           ;UART_TxChar@v_uartData_u8 stored from wreg
  7347  12AC  00F0               	movwf	UART_TxChar@v_uartData_u8
  7348  12AD                     l476:	
  7349                           ;uart.c: 147: while(TXIF==0);
  7350                           
  7351  12AD  1283               	bcf	3,5	;RP0=0, select bank0
  7352  12AE  1303               	bcf	3,6	;RP1=0, select bank0
  7353  12AF  1E0C               	btfss	12,4	;volatile
  7354  12B0  2AAD               	goto	l476
  7355                           
  7356                           ;uart.c: 148: TXIF=0;
  7357  12B1  120C               	bcf	12,4	;volatile
  7358                           
  7359                           ;uart.c: 149: TXREG=v_uartData_u8;
  7360  12B2  0870               	movf	UART_TxChar@v_uartData_u8,w
  7361  12B3  0099               	movwf	25	;volatile
  7362  12B4  0008               	return
  7363  12B5                     __end_of_UART_TxChar:	
  7364                           
  7365                           	psect	text38
  7366  0254                     __ptext38:	
  7367 ;; *************** function _LCD_SetUp *****************
  7368 ;; Defined at:
  7369 ;;		line 135 in file "../00-libfiles/lcd.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  RS              1    wreg     enum E33
  7372 ;;  RW              1    0[BANK0 ] enum E33
  7373 ;;  EN              1    1[BANK0 ] enum E33
  7374 ;;  D0              1    2[BANK0 ] enum E33
  7375 ;;  D1              1    3[BANK0 ] enum E33
  7376 ;;  D2              1    4[BANK0 ] enum E33
  7377 ;;  D3              1    5[BANK0 ] enum E33
  7378 ;;  D4              1    6[BANK0 ] enum E33
  7379 ;;  D5              1    7[BANK0 ] enum E33
  7380 ;;  D6              1    8[BANK0 ] enum E33
  7381 ;;  D7              1    9[BANK0 ] enum E33
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  RS              1    6[COMMON] enum E33
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      void 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7393 ;;      Params:         0      10       0       0       0
  7394 ;;      Locals:         1       0       0       0       0
  7395 ;;      Temps:          1       0       0       0       0
  7396 ;;      Totals:         2      10       0       0       0
  7397 ;;Total ram usage:       12 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    1
  7400 ;; This function calls:
  7401 ;;		_GPIO_PinDirection
  7402 ;; This function is called by:
  7403 ;;		_LCD_8bit_test
  7404 ;;		_LCD_4bit_test
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           
  7409                           ;psect for function _LCD_SetUp
  7410  0254                     _LCD_SetUp:	
  7411                           
  7412                           ;incstack = 0
  7413                           ; Regs used in _LCD_SetUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7414                           ;LCD_SetUp@RS stored from wreg
  7415  0254  00F6               	movwf	LCD_SetUp@RS
  7416                           
  7417                           ;lcd.c: 148: LCDConfig.RS = RS;
  7418  0255  0876               	movf	LCD_SetUp@RS,w
  7419  0256  00F5               	movwf	??_LCD_SetUp
  7420  0257  0875               	movf	??_LCD_SetUp,w
  7421  0258  1683               	bsf	3,5	;RP0=1, select bank1
  7422  0259  1303               	bcf	3,6	;RP1=0, select bank1
  7423  025A  00A3               	movwf	(_LCDConfig^(0+128)+3)
  7424                           
  7425                           ;lcd.c: 149: LCDConfig.RW = RW;
  7426  025B  1283               	bcf	3,5	;RP0=0, select bank0
  7427  025C  1303               	bcf	3,6	;RP1=0, select bank0
  7428  025D  0820               	movf	LCD_SetUp@RW,w
  7429  025E  00F5               	movwf	??_LCD_SetUp
  7430  025F  0875               	movf	??_LCD_SetUp,w
  7431  0260  1683               	bsf	3,5	;RP0=1, select bank1
  7432  0261  1303               	bcf	3,6	;RP1=0, select bank1
  7433  0262  00A4               	movwf	(_LCDConfig^(0+128)+4)
  7434                           
  7435                           ;lcd.c: 150: LCDConfig.EN = EN;
  7436  0263  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0264  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0265  0821               	movf	LCD_SetUp@EN,w
  7439  0266  00F5               	movwf	??_LCD_SetUp
  7440  0267  0875               	movf	??_LCD_SetUp,w
  7441  0268  1683               	bsf	3,5	;RP0=1, select bank1
  7442  0269  1303               	bcf	3,6	;RP1=0, select bank1
  7443  026A  00A5               	movwf	(_LCDConfig^(0+128)+5)
  7444                           
  7445                           ;lcd.c: 152: LCDConfig.D0 = D0;
  7446  026B  1283               	bcf	3,5	;RP0=0, select bank0
  7447  026C  1303               	bcf	3,6	;RP1=0, select bank0
  7448  026D  0822               	movf	LCD_SetUp@D0,w
  7449  026E  00F5               	movwf	??_LCD_SetUp
  7450  026F  0875               	movf	??_LCD_SetUp,w
  7451  0270  1683               	bsf	3,5	;RP0=1, select bank1
  7452  0271  1303               	bcf	3,6	;RP1=0, select bank1
  7453  0272  00A6               	movwf	(_LCDConfig^(0+128)+6)
  7454                           
  7455                           ;lcd.c: 153: LCDConfig.D1 = D1;
  7456  0273  1283               	bcf	3,5	;RP0=0, select bank0
  7457  0274  1303               	bcf	3,6	;RP1=0, select bank0
  7458  0275  0823               	movf	LCD_SetUp@D1,w
  7459  0276  00F5               	movwf	??_LCD_SetUp
  7460  0277  0875               	movf	??_LCD_SetUp,w
  7461  0278  1683               	bsf	3,5	;RP0=1, select bank1
  7462  0279  1303               	bcf	3,6	;RP1=0, select bank1
  7463  027A  00A7               	movwf	(_LCDConfig^(0+128)+7)
  7464                           
  7465                           ;lcd.c: 154: LCDConfig.D2 = D2;
  7466  027B  1283               	bcf	3,5	;RP0=0, select bank0
  7467  027C  1303               	bcf	3,6	;RP1=0, select bank0
  7468  027D  0824               	movf	LCD_SetUp@D2,w
  7469  027E  00F5               	movwf	??_LCD_SetUp
  7470  027F  0875               	movf	??_LCD_SetUp,w
  7471  0280  1683               	bsf	3,5	;RP0=1, select bank1
  7472  0281  1303               	bcf	3,6	;RP1=0, select bank1
  7473  0282  00A8               	movwf	(_LCDConfig^(0+128)+8)
  7474                           
  7475                           ;lcd.c: 155: LCDConfig.D3 = D3;
  7476  0283  1283               	bcf	3,5	;RP0=0, select bank0
  7477  0284  1303               	bcf	3,6	;RP1=0, select bank0
  7478  0285  0825               	movf	LCD_SetUp@D3,w
  7479  0286  00F5               	movwf	??_LCD_SetUp
  7480  0287  0875               	movf	??_LCD_SetUp,w
  7481  0288  1683               	bsf	3,5	;RP0=1, select bank1
  7482  0289  1303               	bcf	3,6	;RP1=0, select bank1
  7483  028A  00A9               	movwf	(_LCDConfig^(0+128)+9)
  7484                           
  7485                           ;lcd.c: 156: LCDConfig.D4 = D4;
  7486  028B  1283               	bcf	3,5	;RP0=0, select bank0
  7487  028C  1303               	bcf	3,6	;RP1=0, select bank0
  7488  028D  0826               	movf	LCD_SetUp@D4,w
  7489  028E  00F5               	movwf	??_LCD_SetUp
  7490  028F  0875               	movf	??_LCD_SetUp,w
  7491  0290  1683               	bsf	3,5	;RP0=1, select bank1
  7492  0291  1303               	bcf	3,6	;RP1=0, select bank1
  7493  0292  00AA               	movwf	(_LCDConfig^(0+128)+10)
  7494                           
  7495                           ;lcd.c: 157: LCDConfig.D5 = D5;
  7496  0293  1283               	bcf	3,5	;RP0=0, select bank0
  7497  0294  1303               	bcf	3,6	;RP1=0, select bank0
  7498  0295  0827               	movf	LCD_SetUp@D5,w
  7499  0296  00F5               	movwf	??_LCD_SetUp
  7500  0297  0875               	movf	??_LCD_SetUp,w
  7501  0298  1683               	bsf	3,5	;RP0=1, select bank1
  7502  0299  1303               	bcf	3,6	;RP1=0, select bank1
  7503  029A  00AB               	movwf	(_LCDConfig^(0+128)+11)
  7504                           
  7505                           ;lcd.c: 158: LCDConfig.D6 = D6;
  7506  029B  1283               	bcf	3,5	;RP0=0, select bank0
  7507  029C  1303               	bcf	3,6	;RP1=0, select bank0
  7508  029D  0828               	movf	LCD_SetUp@D6,w
  7509  029E  00F5               	movwf	??_LCD_SetUp
  7510  029F  0875               	movf	??_LCD_SetUp,w
  7511  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  7512  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  7513  02A2  00AC               	movwf	(_LCDConfig^(0+128)+12)
  7514                           
  7515                           ;lcd.c: 159: LCDConfig.D7 = D7;
  7516  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  7517  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  7518  02A5  0829               	movf	LCD_SetUp@D7,w
  7519  02A6  00F5               	movwf	??_LCD_SetUp
  7520  02A7  0875               	movf	??_LCD_SetUp,w
  7521  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  7522  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  7523  02AA  00AD               	movwf	(_LCDConfig^(0+128)+13)
  7524                           
  7525                           ;lcd.c: 162: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
  7526  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  7527  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  7528  02AD  0A22               	incf	LCD_SetUp@D0,w
  7529  02AE  1903               	btfsc	3,2
  7530  02AF  2AB8               	goto	l2924
  7531  02B0  0A23               	incf	LCD_SetUp@D1,w
  7532  02B1  1903               	btfsc	3,2
  7533  02B2  2AB8               	goto	l2924
  7534  02B3  0A24               	incf	LCD_SetUp@D2,w
  7535  02B4  1D03               	btfss	3,2
  7536  02B5  0A25               	incf	LCD_SetUp@D3,w
  7537  02B6  1D03               	btfss	3,2
  7538  02B7  2ABF               	goto	l2926
  7539  02B8                     l2924:	
  7540                           
  7541                           ;lcd.c: 163: {
  7542                           ;lcd.c: 164: LCDConfig.v_LcdMode_U8 = 4;
  7543  02B8  3004               	movlw	4
  7544  02B9  00F5               	movwf	??_LCD_SetUp
  7545  02BA  0875               	movf	??_LCD_SetUp,w
  7546  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  7547  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  7548  02BD  00A2               	movwf	(_LCDConfig^(0+128)+2)
  7549                           
  7550                           ;lcd.c: 165: }
  7551  02BE  2AE9               	goto	l2936
  7552  02BF                     l2926:	
  7553                           
  7554                           ;lcd.c: 166: else
  7555                           ;lcd.c: 167: {
  7556                           ;lcd.c: 168: LCDConfig.v_LcdMode_U8 = 8;
  7557  02BF  3008               	movlw	8
  7558  02C0  00F5               	movwf	??_LCD_SetUp
  7559  02C1  0875               	movf	??_LCD_SetUp,w
  7560  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  7561  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  7562  02C4  00A2               	movwf	(_LCDConfig^(0+128)+2)
  7563                           
  7564                           ;lcd.c: 169: GPIO_PinDirection(D0,0x00u);
  7565  02C5  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7566  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  7567  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  7568  02C8  0822               	movf	LCD_SetUp@D0,w
  7569  02C9  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7570                           
  7571                           ;lcd.c: 170: GPIO_PinDirection(D1,0x00u);
  7572  02CE  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7573  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  7574  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  7575  02D1  0823               	movf	LCD_SetUp@D1,w
  7576  02D2  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7577                           
  7578                           ;lcd.c: 171: GPIO_PinDirection(D2,0x00u);
  7579  02D7  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7580  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  7581  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  7582  02DA  0824               	movf	LCD_SetUp@D2,w
  7583  02DB  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7584                           
  7585                           ;lcd.c: 172: GPIO_PinDirection(D3,0x00u);
  7586  02E0  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7587  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  7588  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  7589  02E3  0825               	movf	LCD_SetUp@D3,w
  7590  02E4  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7591  02E9                     l2936:	
  7592                           
  7593                           ;lcd.c: 173: }
  7594                           ;lcd.c: 176: GPIO_PinDirection(RS,0x00u);
  7595  02E9  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7596  02EA  0876               	movf	LCD_SetUp@RS,w
  7597  02EB  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7598                           
  7599                           ;lcd.c: 177: GPIO_PinDirection(RW,0x00u);
  7600  02F0  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7601  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  7602  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  7603  02F3  0820               	movf	LCD_SetUp@RW,w
  7604  02F4  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7605                           
  7606                           ;lcd.c: 178: GPIO_PinDirection(EN,0x00u);
  7607  02F9  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7608  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  7609  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  7610  02FC  0821               	movf	LCD_SetUp@EN,w
  7611  02FD  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7612                           
  7613                           ;lcd.c: 180: GPIO_PinDirection(D4,0x00u);
  7614  0302  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7615  0303  1283               	bcf	3,5	;RP0=0, select bank0
  7616  0304  1303               	bcf	3,6	;RP1=0, select bank0
  7617  0305  0826               	movf	LCD_SetUp@D4,w
  7618  0306  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7619                           
  7620                           ;lcd.c: 181: GPIO_PinDirection(D5,0x00u);
  7621  030B  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7622  030C  1283               	bcf	3,5	;RP0=0, select bank0
  7623  030D  1303               	bcf	3,6	;RP1=0, select bank0
  7624  030E  0827               	movf	LCD_SetUp@D5,w
  7625  030F  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7626                           
  7627                           ;lcd.c: 182: GPIO_PinDirection(D6,0x00u);
  7628  0314  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7629  0315  1283               	bcf	3,5	;RP0=0, select bank0
  7630  0316  1303               	bcf	3,6	;RP1=0, select bank0
  7631  0317  0828               	movf	LCD_SetUp@D6,w
  7632  0318  120A  118A  2325  120A  118A  	fcall	_GPIO_PinDirection
  7633                           
  7634                           ;lcd.c: 183: GPIO_PinDirection(D7,0x00u);
  7635  031D  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  7636  031E  1283               	bcf	3,5	;RP0=0, select bank0
  7637  031F  1303               	bcf	3,6	;RP1=0, select bank0
  7638  0320  0829               	movf	LCD_SetUp@D7,w
  7639  0321  120A  118A  2325   	fcall	_GPIO_PinDirection
  7640  0324  0008               	return
  7641  0325                     __end_of_LCD_SetUp:	
  7642                           
  7643                           	psect	text39
  7644  0009                     __ptext39:	
  7645 ;; *************** function _LCD_Init *****************
  7646 ;; Defined at:
  7647 ;;		line 198 in file "../00-libfiles/lcd.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  7650 ;;  v_MaxCharsPe    1   12[COMMON] unsigned char 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;  v_lcdNoOfLin    1    0[BANK0 ] unsigned char 
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  1    wreg      void 
  7655 ;; Registers used:
  7656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7662 ;;      Params:         1       0       0       0       0
  7663 ;;      Locals:         0       1       0       0       0
  7664 ;;      Temps:          1       0       0       0       0
  7665 ;;      Totals:         2       1       0       0       0
  7666 ;;Total ram usage:        3 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    6
  7669 ;; This function calls:
  7670 ;;		_DELAY_ms
  7671 ;;		_LCD_Clear
  7672 ;;		_LCD_CmdWrite
  7673 ;;		_lcd_Reset
  7674 ;; This function is called by:
  7675 ;;		_LCD_8bit_test
  7676 ;;		_LCD_4bit_test
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           
  7681                           ;psect for function _LCD_Init
  7682  0009                     _LCD_Init:	
  7683                           
  7684                           ;incstack = 0
  7685                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7686                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  7687  0009  1283               	bcf	3,5	;RP0=0, select bank0
  7688  000A  1303               	bcf	3,6	;RP1=0, select bank0
  7689  000B  00A0               	movwf	LCD_Init@v_lcdNoOfLines_u8
  7690                           
  7691                           ;lcd.c: 202: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  7692  000C  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  7693  000D  00FD               	movwf	??_LCD_Init
  7694  000E  087D               	movf	??_LCD_Init,w
  7695  000F  1683               	bsf	3,5	;RP0=1, select bank1
  7696  0010  1303               	bcf	3,6	;RP1=0, select bank1
  7697  0011  00A1               	movwf	(_LCDConfig^(0+128)+1)
  7698                           
  7699                           ;lcd.c: 203: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  7700  0012  1283               	bcf	3,5	;RP0=0, select bank0
  7701  0013  1303               	bcf	3,6	;RP1=0, select bank0
  7702  0014  0820               	movf	LCD_Init@v_lcdNoOfLines_u8,w
  7703  0015  00FD               	movwf	??_LCD_Init
  7704  0016  087D               	movf	??_LCD_Init,w
  7705  0017  1683               	bsf	3,5	;RP0=1, select bank1
  7706  0018  1303               	bcf	3,6	;RP1=0, select bank1
  7707  0019  00A0               	movwf	_LCDConfig^(0+128)
  7708                           
  7709                           ;lcd.c: 204: if(v_lcdNoOfLines_u8 > 0x02)
  7710  001A  3003               	movlw	3
  7711  001B  1283               	bcf	3,5	;RP0=0, select bank0
  7712  001C  1303               	bcf	3,6	;RP1=0, select bank0
  7713  001D  0220               	subwf	LCD_Init@v_lcdNoOfLines_u8,w
  7714  001E  1C03               	skipc
  7715  001F  282E               	goto	l2954
  7716                           
  7717                           ;lcd.c: 205: {
  7718                           ;lcd.c: 206: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  7719  0020  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  7720  0021  390F               	andlw	15
  7721  0022  3E90               	addlw	144
  7722  0023  00FD               	movwf	??_LCD_Init
  7723  0024  087D               	movf	??_LCD_Init,w
  7724  0025  1683               	bsf	3,5	;RP0=1, select bank1
  7725  0026  1303               	bcf	3,6	;RP1=0, select bank1
  7726  0027  00C7               	movwf	(_ARR_LcdLineNumAddress_U8^(0+128)+2)
  7727                           
  7728                           ;lcd.c: 207: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  7729  0028  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  7730  0029  390F               	andlw	15
  7731  002A  3ED0               	addlw	208
  7732  002B  00FD               	movwf	??_LCD_Init
  7733  002C  087D               	movf	??_LCD_Init,w
  7734  002D  00C8               	movwf	(_ARR_LcdLineNumAddress_U8^(0+128)+3)
  7735  002E                     l2954:	
  7736                           
  7737                           ;lcd.c: 208: }
  7738                           ;lcd.c: 210: DELAY_ms(100);
  7739  002E  3064               	movlw	100
  7740  002F  00F2               	movwf	DELAY_ms@ms_count
  7741  0030  3000               	movlw	0
  7742  0031  00F3               	movwf	DELAY_ms@ms_count+1
  7743  0032  160A  118A  232F  120A  118A  	fcall	_DELAY_ms
  7744                           
  7745                           ;lcd.c: 212: if(LCDConfig.v_LcdMode_U8 == 8u)
  7746  0037  3008               	movlw	8
  7747  0038  1683               	bsf	3,5	;RP0=1, select bank1
  7748  0039  1303               	bcf	3,6	;RP1=0, select bank1
  7749  003A  0622               	xorwf	(_LCDConfig^(0+128)+2),w
  7750  003B  1D03               	btfss	3,2
  7751  003C  283F               	goto	l2960
  7752                           
  7753                           ;lcd.c: 213: {
  7754                           ;lcd.c: 214: LCD_CmdWrite(0x38u);
  7755  003D  3038               	movlw	56
  7756  003E  284B               	goto	L7
  7757  003F                     l2960:	
  7758                           ;lcd.c: 215: }
  7759                           
  7760                           
  7761                           ;lcd.c: 216: else if(LCDConfig.v_LcdMode_U8 == 4u)
  7762  003F  3004               	movlw	4
  7763  0040  1683               	bsf	3,5	;RP0=1, select bank1
  7764  0041  1303               	bcf	3,6	;RP1=0, select bank1
  7765  0042  0622               	xorwf	(_LCDConfig^(0+128)+2),w
  7766  0043  1D03               	btfss	3,2
  7767  0044  2850               	goto	l359
  7768                           
  7769                           ;lcd.c: 217: {
  7770                           ;lcd.c: 218: lcd_Reset();
  7771  0045  160A  118A  25EA  120A  118A  	fcall	_lcd_Reset
  7772                           
  7773                           ;lcd.c: 219: LCD_CmdWrite(0x28u);
  7774  004A  3028               	movlw	40
  7775  004B                     L7:	
  7776  004B  160A  118A  24BA  120A  118A  	fcall	_LCD_CmdWrite
  7777  0050                     l359:	
  7778                           
  7779                           ;lcd.c: 220: }
  7780                           ;lcd.c: 222: LCD_CmdWrite(0x0Eu);
  7781  0050  300E               	movlw	14
  7782  0051  160A  118A  24BA  120A  118A  	fcall	_LCD_CmdWrite
  7783                           
  7784                           ;lcd.c: 223: LCD_Clear();
  7785  0056  160A  118A  22C9   	fcall	_LCD_Clear
  7786  0059  0008               	return
  7787  005A                     __end_of_LCD_Init:	
  7788                           
  7789                           	psect	text40
  7790  15EA                     __ptext40:	
  7791 ;; *************** function _lcd_Reset *****************
  7792 ;; Defined at:
  7793 ;;		line 913 in file "../00-libfiles/lcd.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;		None
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;		None
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  1    wreg      void 
  7800 ;; Registers used:
  7801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7807 ;;      Params:         0       0       0       0       0
  7808 ;;      Locals:         0       0       0       0       0
  7809 ;;      Temps:          0       0       0       0       0
  7810 ;;      Totals:         0       0       0       0       0
  7811 ;;Total ram usage:        0 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    2
  7814 ;; This function calls:
  7815 ;;		_DELAY_ms
  7816 ;;		_DELAY_us
  7817 ;;		_lcd_SendCmdSignals
  7818 ;;		_lcd_SendHigherNibble
  7819 ;; This function is called by:
  7820 ;;		_LCD_Init
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           
  7825                           ;psect for function _lcd_Reset
  7826  15EA                     _lcd_Reset:	
  7827                           
  7828                           ;lcd.c: 916: lcd_SendHigherNibble(0x30);
  7829                           
  7830                           ;incstack = 0
  7831                           ; Regs used in _lcd_Reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7832  15EA  3030               	movlw	48
  7833  15EB  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  7834                           
  7835                           ;lcd.c: 917: lcd_SendCmdSignals();
  7836  15F0  160A  118A  245F  160A  118A  	fcall	_lcd_SendCmdSignals
  7837                           
  7838                           ;lcd.c: 918: DELAY_ms(100);
  7839  15F5  3064               	movlw	100
  7840  15F6  00F2               	movwf	DELAY_ms@ms_count
  7841  15F7  3000               	movlw	0
  7842  15F8  00F3               	movwf	DELAY_ms@ms_count+1
  7843  15F9  160A  118A  232F  160A  118A  	fcall	_DELAY_ms
  7844                           
  7845                           ;lcd.c: 919: lcd_SendHigherNibble(0x30);
  7846  15FE  3030               	movlw	48
  7847  15FF  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  7848                           
  7849                           ;lcd.c: 920: lcd_SendCmdSignals();
  7850  1604  160A  118A  245F  160A  118A  	fcall	_lcd_SendCmdSignals
  7851                           
  7852                           ;lcd.c: 921: DELAY_us(200);
  7853  1609  30C8               	movlw	200
  7854  160A  00F0               	movwf	DELAY_us@us_count
  7855  160B  3000               	movlw	0
  7856  160C  00F1               	movwf	DELAY_us@us_count+1
  7857  160D  160A  118A  22BE  160A  118A  	fcall	_DELAY_us
  7858                           
  7859                           ;lcd.c: 922: lcd_SendHigherNibble(0x30);
  7860  1612  3030               	movlw	48
  7861  1613  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  7862                           
  7863                           ;lcd.c: 923: lcd_SendCmdSignals();
  7864  1618  160A  118A  245F  160A  118A  	fcall	_lcd_SendCmdSignals
  7865                           
  7866                           ;lcd.c: 924: DELAY_us(200);
  7867  161D  30C8               	movlw	200
  7868  161E  00F0               	movwf	DELAY_us@us_count
  7869  161F  3000               	movlw	0
  7870  1620  00F1               	movwf	DELAY_us@us_count+1
  7871  1621  160A  118A  22BE  160A  118A  	fcall	_DELAY_us
  7872                           
  7873                           ;lcd.c: 925: lcd_SendHigherNibble(0x20);
  7874  1626  3020               	movlw	32
  7875  1627  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  7876                           
  7877                           ;lcd.c: 926: lcd_SendCmdSignals();
  7878  162C  160A  118A  245F  160A  118A  	fcall	_lcd_SendCmdSignals
  7879                           
  7880                           ;lcd.c: 927: DELAY_us(200);
  7881  1631  30C8               	movlw	200
  7882  1632  00F0               	movwf	DELAY_us@us_count
  7883  1633  3000               	movlw	0
  7884  1634  00F1               	movwf	DELAY_us@us_count+1
  7885  1635  160A  118A  22BE   	fcall	_DELAY_us
  7886  1638  0008               	return
  7887  1639                     __end_of_lcd_Reset:	
  7888                           
  7889                           	psect	text41
  7890  12C9                     __ptext41:	
  7891 ;; *************** function _LCD_Clear *****************
  7892 ;; Defined at:
  7893 ;;		line 237 in file "../00-libfiles/lcd.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7907 ;;      Params:         0       0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0
  7910 ;;      Totals:         0       0       0       0       0
  7911 ;;Total ram usage:        0 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    5
  7914 ;; This function calls:
  7915 ;;		_LCD_CmdWrite
  7916 ;;		_LCD_GoToLine
  7917 ;; This function is called by:
  7918 ;;		_LCD_Init
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function _LCD_Clear
  7924  12C9                     _LCD_Clear:	
  7925                           
  7926                           ;lcd.c: 239: LCD_CmdWrite(0x01u);
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7930  12C9  3001               	movlw	1
  7931  12CA  160A  118A  24BA  160A  118A  	fcall	_LCD_CmdWrite
  7932                           
  7933                           ;lcd.c: 240: LCD_GoToLine(0x00);
  7934  12CF  3000               	movlw	0
  7935  12D0  160A  118A  2357   	fcall	_LCD_GoToLine
  7936  12D3  0008               	return
  7937  12D4                     __end_of_LCD_Clear:	
  7938                           
  7939                           	psect	text42
  7940  1357                     __ptext42:	
  7941 ;; *************** function _LCD_GoToLine *****************
  7942 ;; Defined at:
  7943 ;;		line 265 in file "../00-libfiles/lcd.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  v_lineNumber    1    wreg     unsigned char 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  v_lineNumber    1   11[COMMON] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7957 ;;      Params:         0       0       0       0       0
  7958 ;;      Locals:         1       0       0       0       0
  7959 ;;      Temps:          1       0       0       0       0
  7960 ;;      Totals:         2       0       0       0       0
  7961 ;;Total ram usage:        2 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    4
  7964 ;; This function calls:
  7965 ;;		_LCD_CmdWrite
  7966 ;; This function is called by:
  7967 ;;		_LCD_Clear
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           
  7972                           ;psect for function _LCD_GoToLine
  7973  1357                     _LCD_GoToLine:	
  7974                           
  7975                           ;incstack = 0
  7976                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7977                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  7978  1357  00FB               	movwf	LCD_GoToLine@v_lineNumber_u8
  7979                           
  7980                           ;lcd.c: 267: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  7981  1358  1683               	bsf	3,5	;RP0=1, select bank1
  7982  1359  1303               	bcf	3,6	;RP1=0, select bank1
  7983  135A  0820               	movf	_LCDConfig^(0+128),w
  7984  135B  027B               	subwf	LCD_GoToLine@v_lineNumber_u8,w
  7985  135C  1803               	skipnc
  7986  135D  0008               	return
  7987                           
  7988                           ;lcd.c: 268: {
  7989                           ;lcd.c: 271: v_LcdTrackCursorPos_U8 = 0x00;
  7990  135E  01B7               	clrf	_v_LcdTrackCursorPos_U8^(0+128)
  7991                           
  7992                           ;lcd.c: 272: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  7993  135F  087B               	movf	LCD_GoToLine@v_lineNumber_u8,w
  7994  1360  00FA               	movwf	??_LCD_GoToLine
  7995  1361  087A               	movf	??_LCD_GoToLine,w
  7996  1362  00B8               	movwf	_v_LcdTrackLineNum_U8^(0+128)
  7997                           
  7998                           ;lcd.c: 273: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  7999  1363  087B               	movf	LCD_GoToLine@v_lineNumber_u8,w
  8000  1364  3EC5               	addlw	(low (_ARR_LcdLineNumAddress_U8| 0))& (0+255)
  8001  1365  0084               	movwf	4
  8002  1366  1383               	bcf	3,7	;select IRP bank1
  8003  1367  0800               	movf	0,w
  8004  1368  160A  118A  24BA   	fcall	_LCD_CmdWrite
  8005  136B  0008               	return
  8006  136C                     __end_of_LCD_GoToLine:	
  8007                           
  8008                           	psect	text43
  8009  13EF                     __ptext43:	
  8010 ;; *************** function _LCD_DisplayString *****************
  8011 ;; Defined at:
  8012 ;;		line 427 in file "../00-libfiles/lcd.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  ptr_stringPo    2    0[BANK0 ] PTR const unsigned char 
  8015 ;;		 -> STR_12(15), STR_11(17), STR_8(15), STR_7(17), 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;		None
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      void 
  8020 ;; Registers used:
  8021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8027 ;;      Params:         0       2       0       0       0
  8028 ;;      Locals:         0       0       0       0       0
  8029 ;;      Temps:          0       0       0       0       0
  8030 ;;      Totals:         0       2       0       0       0
  8031 ;;Total ram usage:        2 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    6
  8034 ;; This function calls:
  8035 ;;		_LCD_DisplayChar
  8036 ;; This function is called by:
  8037 ;;		_LCD_8bit_test
  8038 ;;		_LCD_4bit_test
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _LCD_DisplayString
  8044  13EF                     _LCD_DisplayString:	
  8045  13EF                     l2970:	
  8046                           ;lcd.c: 429: while((*ptr_stringPointer_u8)!=0)
  8047                           
  8048                           ;incstack = 0
  8049 ;; using string table level
  8050                           ; Regs used in _LCD_DisplayString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8051                           
  8052  13EF  1283               	bcf	3,5	;RP0=0, select bank0
  8053  13F0  1303               	bcf	3,6	;RP1=0, select bank0
  8054  13F1  0821               	movf	LCD_DisplayString@ptr_stringPointer_u8+1,w
  8055  13F2  00FF               	movwf	127
  8056  13F3  0820               	movf	LCD_DisplayString@ptr_stringPointer_u8,w
  8057  13F4  0084               	movwf	4
  8058  13F5  120A  158A  2000  160A  118A  	fcall	stringtab
  8059  13FA  3A00               	xorlw	0
  8060  13FB  1903               	btfsc	3,2
  8061  13FC  0008               	return
  8062                           
  8063                           ;lcd.c: 430: LCD_DisplayChar(*ptr_stringPointer_u8++);
  8064  13FD  1283               	bcf	3,5	;RP0=0, select bank0
  8065  13FE  1303               	bcf	3,6	;RP1=0, select bank0
  8066  13FF  0821               	movf	LCD_DisplayString@ptr_stringPointer_u8+1,w
  8067  1400  00FF               	movwf	127
  8068  1401  0820               	movf	LCD_DisplayString@ptr_stringPointer_u8,w
  8069  1402  0084               	movwf	4
  8070  1403  120A  158A  2000  160A  118A  	fcall	stringtab
  8071  1408  160A  118A  236C  160A  118A  	fcall	_LCD_DisplayChar
  8072  140D  3001               	movlw	1
  8073  140E  1283               	bcf	3,5	;RP0=0, select bank0
  8074  140F  1303               	bcf	3,6	;RP1=0, select bank0
  8075  1410  07A0               	addwf	LCD_DisplayString@ptr_stringPointer_u8,f
  8076  1411  1803               	skipnc
  8077  1412  0AA1               	incf	LCD_DisplayString@ptr_stringPointer_u8+1,f
  8078  1413  2BEF               	goto	l2970
  8079  1414                     __end_of_LCD_DisplayString:	
  8080                           
  8081                           	psect	text44
  8082  136C                     __ptext44:	
  8083 ;; *************** function _LCD_DisplayChar *****************
  8084 ;; Defined at:
  8085 ;;		line 392 in file "../00-libfiles/lcd.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  v_lcdData_u8    1    wreg     unsigned char 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  v_lcdData_u8    1   12[COMMON] unsigned char 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      void 
  8092 ;; Registers used:
  8093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8099 ;;      Params:         0       0       0       0       0
  8100 ;;      Locals:         1       0       0       0       0
  8101 ;;      Temps:          1       0       0       0       0
  8102 ;;      Totals:         2       0       0       0       0
  8103 ;;Total ram usage:        2 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    5
  8106 ;; This function calls:
  8107 ;;		_LCD_GoToNextLine
  8108 ;;		_lcd_DataWrite
  8109 ;; This function is called by:
  8110 ;;		_LCD_DisplayString
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function _LCD_DisplayChar
  8116  136C                     _LCD_DisplayChar:	
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8120                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  8121  136C  00FC               	movwf	LCD_DisplayChar@v_lcdData_u8
  8122                           
  8123                           ;lcd.c: 394: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  8124  136D  1683               	bsf	3,5	;RP0=1, select bank1
  8125  136E  1303               	bcf	3,6	;RP1=0, select bank1
  8126  136F  0821               	movf	(_LCDConfig^(0+128)+1),w
  8127  1370  0237               	subwf	_v_LcdTrackCursorPos_U8^(0+128),w
  8128  1371  1803               	skipnc
  8129  1372  2B77               	goto	l2738
  8130  1373  300A               	movlw	10
  8131  1374  067C               	xorwf	LCD_DisplayChar@v_lcdData_u8,w
  8132  1375  1D03               	btfss	3,2
  8133  1376  2B7C               	goto	l2740
  8134  1377                     l2738:	
  8135                           
  8136                           ;lcd.c: 395: {
  8137                           ;lcd.c: 398: LCD_GoToNextLine();
  8138  1377  160A  118A  2343  160A  118A  	fcall	_LCD_GoToNextLine
  8139  137C                     l2740:	
  8140                           
  8141                           ;lcd.c: 399: }
  8142                           ;lcd.c: 400: if(v_lcdData_u8!='\n')
  8143  137C  300A               	movlw	10
  8144  137D  067C               	xorwf	LCD_DisplayChar@v_lcdData_u8,w
  8145  137E  1903               	btfsc	3,2
  8146  137F  0008               	return
  8147                           
  8148                           ;lcd.c: 401: {
  8149                           ;lcd.c: 403: lcd_DataWrite(v_lcdData_u8);
  8150  1380  087C               	movf	LCD_DisplayChar@v_lcdData_u8,w
  8151  1381  160A  118A  24EF   	fcall	_lcd_DataWrite
  8152                           
  8153                           ;lcd.c: 404: v_LcdTrackCursorPos_U8++;
  8154  1384  3001               	movlw	1
  8155  1385  00FB               	movwf	??_LCD_DisplayChar
  8156  1386  087B               	movf	??_LCD_DisplayChar,w
  8157  1387  1683               	bsf	3,5	;RP0=1, select bank1
  8158  1388  1303               	bcf	3,6	;RP1=0, select bank1
  8159  1389  07B7               	addwf	_v_LcdTrackCursorPos_U8^(0+128),f
  8160  138A  0008               	return
  8161  138B                     __end_of_LCD_DisplayChar:	
  8162                           
  8163                           	psect	text45
  8164  14EF                     __ptext45:	
  8165 ;; *************** function _lcd_DataWrite *****************
  8166 ;; Defined at:
  8167 ;;		line 826 in file "../00-libfiles/lcd.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  dataByte        1    wreg     unsigned char 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  dataByte        1    9[COMMON] unsigned char 
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1    wreg      void 
  8174 ;; Registers used:
  8175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8181 ;;      Params:         0       0       0       0       0
  8182 ;;      Locals:         1       0       0       0       0
  8183 ;;      Temps:          2       0       0       0       0
  8184 ;;      Totals:         3       0       0       0       0
  8185 ;;Total ram usage:        3 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    3
  8188 ;; This function calls:
  8189 ;;		_lcd_BusyCheck
  8190 ;;		_lcd_SendDataSignals
  8191 ;;		_lcd_SendHigherNibble
  8192 ;;		_lcd_SendLowerNibble
  8193 ;; This function is called by:
  8194 ;;		_LCD_DisplayChar
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _lcd_DataWrite
  8200  14EF                     _lcd_DataWrite:	
  8201                           
  8202                           ;incstack = 0
  8203                           ; Regs used in _lcd_DataWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8204                           ;lcd_DataWrite@dataByte stored from wreg
  8205  14EF  00F9               	movwf	lcd_DataWrite@dataByte
  8206                           
  8207                           ;lcd.c: 828: lcd_BusyCheck();
  8208  14F0  120A  158A  2774  160A  118A  	fcall	_lcd_BusyCheck
  8209                           
  8210                           ;lcd.c: 829: if(LCDConfig.v_LcdMode_U8 == 8u)
  8211  14F5  3008               	movlw	8
  8212  14F6  1683               	bsf	3,5	;RP0=1, select bank1
  8213  14F7  1303               	bcf	3,6	;RP1=0, select bank1
  8214  14F8  0622               	xorwf	(_LCDConfig^(0+128)+2),w
  8215  14F9  1D03               	btfss	3,2
  8216  14FA  2D02               	goto	l2526
  8217                           
  8218                           ;lcd.c: 830: {
  8219                           ;lcd.c: 831: lcd_SendLowerNibble(dataByte);
  8220  14FB  0879               	movf	lcd_DataWrite@dataByte,w
  8221  14FC  160A  118A  2564  160A  118A  	fcall	_lcd_SendLowerNibble
  8222                           
  8223                           ;lcd.c: 832: }
  8224  1501  2D1A               	goto	l2530
  8225  1502                     l2526:	
  8226                           
  8227                           ;lcd.c: 833: else
  8228                           ;lcd.c: 834: {
  8229                           ;lcd.c: 835: lcd_SendHigherNibble(dataByte);
  8230  1502  0879               	movf	lcd_DataWrite@dataByte,w
  8231  1503  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  8232                           
  8233                           ;lcd.c: 836: lcd_SendDataSignals();
  8234  1508  160A  118A  248C  160A  118A  	fcall	_lcd_SendDataSignals
  8235                           
  8236                           ;lcd.c: 837: dataByte = dataByte << 4;
  8237  150D  0879               	movf	lcd_DataWrite@dataByte,w
  8238  150E  00F7               	movwf	??_lcd_DataWrite
  8239  150F  3003               	movlw	3
  8240  1510                     u2745:	
  8241  1510  1003               	clrc
  8242  1511  0DF7               	rlf	??_lcd_DataWrite,f
  8243  1512  3EFF               	addlw	-1
  8244  1513  1D03               	skipz
  8245  1514  2D10               	goto	u2745
  8246  1515  1003               	clrc
  8247  1516  0D77               	rlf	??_lcd_DataWrite,w
  8248  1517  00F8               	movwf	??_lcd_DataWrite+1
  8249  1518  0878               	movf	??_lcd_DataWrite+1,w
  8250  1519  00F9               	movwf	lcd_DataWrite@dataByte
  8251  151A                     l2530:	
  8252                           
  8253                           ;lcd.c: 838: }
  8254                           ;lcd.c: 840: lcd_SendHigherNibble(dataByte);
  8255  151A  0879               	movf	lcd_DataWrite@dataByte,w
  8256  151B  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  8257                           
  8258                           ;lcd.c: 841: lcd_SendDataSignals();
  8259  1520  160A  118A  248C   	fcall	_lcd_SendDataSignals
  8260  1523  0008               	return
  8261  1524                     __end_of_lcd_DataWrite:	
  8262                           
  8263                           	psect	text46
  8264  148C                     __ptext46:	
  8265 ;; *************** function _lcd_SendDataSignals *****************
  8266 ;; Defined at:
  8267 ;;		line 1002 in file "../00-libfiles/lcd.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;		None
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;		None
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  1    wreg      void 
  8274 ;; Registers used:
  8275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8281 ;;      Params:         0       0       0       0       0
  8282 ;;      Locals:         0       0       0       0       0
  8283 ;;      Temps:          0       0       0       0       0
  8284 ;;      Totals:         0       0       0       0       0
  8285 ;;Total ram usage:        0 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    1
  8288 ;; This function calls:
  8289 ;;		_DELAY_us
  8290 ;;		_GPIO_PinWrite
  8291 ;; This function is called by:
  8292 ;;		_lcd_DataWrite
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _lcd_SendDataSignals
  8298  148C                     _lcd_SendDataSignals:	
  8299                           
  8300                           ;lcd.c: 1004: GPIO_PinWrite(LCDConfig.RS,1);
  8301                           
  8302                           ;incstack = 0
  8303                           ; Regs used in _lcd_SendDataSignals: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8304  148C  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8305  148D  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  8306  148E  1683               	bsf	3,5	;RP0=1, select bank1
  8307  148F  1303               	bcf	3,6	;RP1=0, select bank1
  8308  1490  0823               	movf	(_LCDConfig^(0+128)+3),w
  8309  1491  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8310                           
  8311                           ;lcd.c: 1005: GPIO_PinWrite(LCDConfig.RW,0);
  8312  1496  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8313  1497  1683               	bsf	3,5	;RP0=1, select bank1
  8314  1498  1303               	bcf	3,6	;RP1=0, select bank1
  8315  1499  0824               	movf	(_LCDConfig^(0+128)+4),w
  8316  149A  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8317                           
  8318                           ;lcd.c: 1006: GPIO_PinWrite(LCDConfig.EN,1);
  8319  149F  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8320  14A0  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  8321  14A1  1683               	bsf	3,5	;RP0=1, select bank1
  8322  14A2  1303               	bcf	3,6	;RP1=0, select bank1
  8323  14A3  0825               	movf	(_LCDConfig^(0+128)+5),w
  8324  14A4  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8325                           
  8326                           ;lcd.c: 1007: DELAY_us(10);
  8327  14A9  300A               	movlw	10
  8328  14AA  00F0               	movwf	DELAY_us@us_count
  8329  14AB  3000               	movlw	0
  8330  14AC  00F1               	movwf	DELAY_us@us_count+1
  8331  14AD  160A  118A  22BE  160A  118A  	fcall	_DELAY_us
  8332                           
  8333                           ;lcd.c: 1008: GPIO_PinWrite(LCDConfig.EN,0);
  8334  14B2  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8335  14B3  1683               	bsf	3,5	;RP0=1, select bank1
  8336  14B4  1303               	bcf	3,6	;RP1=0, select bank1
  8337  14B5  0825               	movf	(_LCDConfig^(0+128)+5),w
  8338  14B6  120A  118A  23FE   	fcall	_GPIO_PinWrite
  8339  14B9  0008               	return
  8340  14BA                     __end_of_lcd_SendDataSignals:	
  8341                           
  8342                           	psect	text47
  8343  1343                     __ptext47:	
  8344 ;; *************** function _LCD_GoToNextLine *****************
  8345 ;; Defined at:
  8346 ;;		line 292 in file "../00-libfiles/lcd.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;		None
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;		None
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  1    wreg      void 
  8353 ;; Registers used:
  8354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8360 ;;      Params:         0       0       0       0       0
  8361 ;;      Locals:         0       0       0       0       0
  8362 ;;      Temps:          1       0       0       0       0
  8363 ;;      Totals:         1       0       0       0       0
  8364 ;;Total ram usage:        1 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    4
  8367 ;; This function calls:
  8368 ;;		_LCD_CmdWrite
  8369 ;; This function is called by:
  8370 ;;		_LCD_DisplayChar
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function _LCD_GoToNextLine
  8376  1343                     _LCD_GoToNextLine:	
  8377                           
  8378                           ;lcd.c: 296: v_LcdTrackLineNum_U8++;
  8379                           
  8380                           ;incstack = 0
  8381                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8382  1343  3001               	movlw	1
  8383  1344  00FA               	movwf	??_LCD_GoToNextLine
  8384  1345  087A               	movf	??_LCD_GoToNextLine,w
  8385  1346  1683               	bsf	3,5	;RP0=1, select bank1
  8386  1347  1303               	bcf	3,6	;RP1=0, select bank1
  8387  1348  07B8               	addwf	_v_LcdTrackLineNum_U8^(0+128),f
  8388                           
  8389                           ;lcd.c: 297: v_LcdTrackCursorPos_U8 = 0x00;
  8390  1349  01B7               	clrf	_v_LcdTrackCursorPos_U8^(0+128)
  8391                           
  8392                           ;lcd.c: 298: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  8393  134A  0820               	movf	_LCDConfig^(0+128),w
  8394  134B  0238               	subwf	_v_LcdTrackLineNum_U8^(0+128),w
  8395  134C  1803               	btfsc	3,0
  8396                           
  8397                           ;lcd.c: 299: v_LcdTrackLineNum_U8 = 0x00;
  8398  134D  01B8               	clrf	_v_LcdTrackLineNum_U8^(0+128)
  8399                           
  8400                           ;lcd.c: 300: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  8401  134E  0838               	movf	_v_LcdTrackLineNum_U8^(0+128),w
  8402  134F  3EC5               	addlw	(low (_ARR_LcdLineNumAddress_U8| 0))& (0+255)
  8403  1350  0084               	movwf	4
  8404  1351  1383               	bcf	3,7	;select IRP bank1
  8405  1352  0800               	movf	0,w
  8406  1353  160A  118A  24BA   	fcall	_LCD_CmdWrite
  8407  1356  0008               	return
  8408  1357                     __end_of_LCD_GoToNextLine:	
  8409                           
  8410                           	psect	text48
  8411  14BA                     __ptext48:	
  8412 ;; *************** function _LCD_CmdWrite *****************
  8413 ;; Defined at:
  8414 ;;		line 358 in file "../00-libfiles/lcd.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;  v_lcdCmd_u8     1    9[COMMON] unsigned char 
  8419 ;; Return value:  Size  Location     Type
  8420 ;;                  1    wreg      void 
  8421 ;; Registers used:
  8422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8423 ;; Tracked objects:
  8424 ;;		On entry : 0/0
  8425 ;;		On exit  : 0/0
  8426 ;;		Unchanged: 0/0
  8427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8428 ;;      Params:         0       0       0       0       0
  8429 ;;      Locals:         1       0       0       0       0
  8430 ;;      Temps:          2       0       0       0       0
  8431 ;;      Totals:         3       0       0       0       0
  8432 ;;Total ram usage:        3 bytes
  8433 ;; Hardware stack levels used:    1
  8434 ;; Hardware stack levels required when called:    3
  8435 ;; This function calls:
  8436 ;;		_lcd_BusyCheck
  8437 ;;		_lcd_SendCmdSignals
  8438 ;;		_lcd_SendHigherNibble
  8439 ;;		_lcd_SendLowerNibble
  8440 ;; This function is called by:
  8441 ;;		_LCD_Init
  8442 ;;		_LCD_Clear
  8443 ;;		_LCD_GoToLine
  8444 ;;		_LCD_GoToNextLine
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           
  8449                           ;psect for function _LCD_CmdWrite
  8450  14BA                     _LCD_CmdWrite:	
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in _LCD_CmdWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8454                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  8455  14BA  00F9               	movwf	LCD_CmdWrite@v_lcdCmd_u8
  8456                           
  8457                           ;lcd.c: 360: lcd_BusyCheck();
  8458  14BB  120A  158A  2774  160A  118A  	fcall	_lcd_BusyCheck
  8459                           
  8460                           ;lcd.c: 361: if(LCDConfig.v_LcdMode_U8 == 8u)
  8461  14C0  3008               	movlw	8
  8462  14C1  1683               	bsf	3,5	;RP0=1, select bank1
  8463  14C2  1303               	bcf	3,6	;RP1=0, select bank1
  8464  14C3  0622               	xorwf	(_LCDConfig^(0+128)+2),w
  8465  14C4  1D03               	btfss	3,2
  8466  14C5  2CCD               	goto	l2474
  8467                           
  8468                           ;lcd.c: 362: {
  8469                           ;lcd.c: 363: lcd_SendLowerNibble(v_lcdCmd_u8);
  8470  14C6  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  8471  14C7  160A  118A  2564  160A  118A  	fcall	_lcd_SendLowerNibble
  8472                           
  8473                           ;lcd.c: 364: }
  8474  14CC  2CE5               	goto	l2478
  8475  14CD                     l2474:	
  8476                           
  8477                           ;lcd.c: 365: else
  8478                           ;lcd.c: 366: {
  8479                           ;lcd.c: 367: lcd_SendHigherNibble(v_lcdCmd_u8);
  8480  14CD  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  8481  14CE  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  8482                           
  8483                           ;lcd.c: 368: lcd_SendCmdSignals();
  8484  14D3  160A  118A  245F  160A  118A  	fcall	_lcd_SendCmdSignals
  8485                           
  8486                           ;lcd.c: 369: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  8487  14D8  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  8488  14D9  00F7               	movwf	??_LCD_CmdWrite
  8489  14DA  3003               	movlw	3
  8490  14DB                     u2635:	
  8491  14DB  1003               	clrc
  8492  14DC  0DF7               	rlf	??_LCD_CmdWrite,f
  8493  14DD  3EFF               	addlw	-1
  8494  14DE  1D03               	skipz
  8495  14DF  2CDB               	goto	u2635
  8496  14E0  1003               	clrc
  8497  14E1  0D77               	rlf	??_LCD_CmdWrite,w
  8498  14E2  00F8               	movwf	??_LCD_CmdWrite+1
  8499  14E3  0878               	movf	??_LCD_CmdWrite+1,w
  8500  14E4  00F9               	movwf	LCD_CmdWrite@v_lcdCmd_u8
  8501  14E5                     l2478:	
  8502                           
  8503                           ;lcd.c: 370: }
  8504                           ;lcd.c: 372: lcd_SendHigherNibble(v_lcdCmd_u8);
  8505  14E5  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  8506  14E6  160A  118A  2524  160A  118A  	fcall	_lcd_SendHigherNibble
  8507                           
  8508                           ;lcd.c: 373: lcd_SendCmdSignals();
  8509  14EB  160A  118A  245F   	fcall	_lcd_SendCmdSignals
  8510  14EE  0008               	return
  8511  14EF                     __end_of_LCD_CmdWrite:	
  8512                           
  8513                           	psect	text49
  8514  1564                     __ptext49:	
  8515 ;; *************** function _lcd_SendLowerNibble *****************
  8516 ;; Defined at:
  8517 ;;		line 962 in file "../00-libfiles/lcd.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  dataByte        1    wreg     unsigned char 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  dataByte        1    6[COMMON] unsigned char 
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8531 ;;      Params:         0       0       0       0       0
  8532 ;;      Locals:         1       0       0       0       0
  8533 ;;      Temps:          1       0       0       0       0
  8534 ;;      Totals:         2       0       0       0       0
  8535 ;;Total ram usage:        2 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    1
  8538 ;; This function calls:
  8539 ;;		_GPIO_PinWrite
  8540 ;; This function is called by:
  8541 ;;		_LCD_CmdWrite
  8542 ;;		_lcd_DataWrite
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function _lcd_SendLowerNibble
  8548  1564                     _lcd_SendLowerNibble:	
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in _lcd_SendLowerNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8552                           ;lcd_SendLowerNibble@dataByte stored from wreg
  8553  1564  00F6               	movwf	lcd_SendLowerNibble@dataByte
  8554                           
  8555                           ;lcd.c: 964: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&((1<<(0))))!=0u));
  8556  1565  1C76               	btfss	lcd_SendLowerNibble@dataByte,0
  8557  1566  2D69               	goto	u2460
  8558  1567  3001               	movlw	1
  8559  1568  2D6A               	goto	u2470
  8560  1569                     u2460:	
  8561  1569  3000               	movlw	0
  8562  156A                     u2470:	
  8563  156A  00F5               	movwf	??_lcd_SendLowerNibble
  8564  156B  0875               	movf	??_lcd_SendLowerNibble,w
  8565  156C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8566  156D  1683               	bsf	3,5	;RP0=1, select bank1
  8567  156E  1303               	bcf	3,6	;RP1=0, select bank1
  8568  156F  0826               	movf	(_LCDConfig^(0+128)+6),w
  8569  1570  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8570                           
  8571                           ;lcd.c: 965: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&((1<<(1))))!=0u));
  8572  1575  1CF6               	btfss	lcd_SendLowerNibble@dataByte,1
  8573  1576  2D79               	goto	u2480
  8574  1577  3001               	movlw	1
  8575  1578  2D7A               	goto	u2490
  8576  1579                     u2480:	
  8577  1579  3000               	movlw	0
  8578  157A                     u2490:	
  8579  157A  00F5               	movwf	??_lcd_SendLowerNibble
  8580  157B  0875               	movf	??_lcd_SendLowerNibble,w
  8581  157C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8582  157D  1683               	bsf	3,5	;RP0=1, select bank1
  8583  157E  1303               	bcf	3,6	;RP1=0, select bank1
  8584  157F  0827               	movf	(_LCDConfig^(0+128)+7),w
  8585  1580  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8586                           
  8587                           ;lcd.c: 966: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&((1<<(2))))!=0u));
  8588  1585  1D76               	btfss	lcd_SendLowerNibble@dataByte,2
  8589  1586  2D89               	goto	u2500
  8590  1587  3001               	movlw	1
  8591  1588  2D8A               	goto	u2510
  8592  1589                     u2500:	
  8593  1589  3000               	movlw	0
  8594  158A                     u2510:	
  8595  158A  00F5               	movwf	??_lcd_SendLowerNibble
  8596  158B  0875               	movf	??_lcd_SendLowerNibble,w
  8597  158C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8598  158D  1683               	bsf	3,5	;RP0=1, select bank1
  8599  158E  1303               	bcf	3,6	;RP1=0, select bank1
  8600  158F  0828               	movf	(_LCDConfig^(0+128)+8),w
  8601  1590  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8602                           
  8603                           ;lcd.c: 967: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&((1<<(3))))!=0u));
  8604  1595  1DF6               	btfss	lcd_SendLowerNibble@dataByte,3
  8605  1596  2D99               	goto	u2520
  8606  1597  3001               	movlw	1
  8607  1598  2D9A               	goto	u2530
  8608  1599                     u2520:	
  8609  1599  3000               	movlw	0
  8610  159A                     u2530:	
  8611  159A  00F5               	movwf	??_lcd_SendLowerNibble
  8612  159B  0875               	movf	??_lcd_SendLowerNibble,w
  8613  159C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8614  159D  1683               	bsf	3,5	;RP0=1, select bank1
  8615  159E  1303               	bcf	3,6	;RP1=0, select bank1
  8616  159F  0829               	movf	(_LCDConfig^(0+128)+9),w
  8617  15A0  120A  118A  23FE   	fcall	_GPIO_PinWrite
  8618  15A3  0008               	return
  8619  15A4                     __end_of_lcd_SendLowerNibble:	
  8620                           
  8621                           	psect	text50
  8622  1524                     __ptext50:	
  8623 ;; *************** function _lcd_SendHigherNibble *****************
  8624 ;; Defined at:
  8625 ;;		line 943 in file "../00-libfiles/lcd.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  dataByte        1    wreg     unsigned char 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  dataByte        1    6[COMMON] unsigned char 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      void 
  8632 ;; Registers used:
  8633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8639 ;;      Params:         0       0       0       0       0
  8640 ;;      Locals:         1       0       0       0       0
  8641 ;;      Temps:          1       0       0       0       0
  8642 ;;      Totals:         2       0       0       0       0
  8643 ;;Total ram usage:        2 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    1
  8646 ;; This function calls:
  8647 ;;		_GPIO_PinWrite
  8648 ;; This function is called by:
  8649 ;;		_LCD_CmdWrite
  8650 ;;		_lcd_DataWrite
  8651 ;;		_lcd_Reset
  8652 ;; This function uses a non-reentrant model
  8653 ;;
  8654                           
  8655                           
  8656                           ;psect for function _lcd_SendHigherNibble
  8657  1524                     _lcd_SendHigherNibble:	
  8658                           
  8659                           ;incstack = 0
  8660                           ; Regs used in _lcd_SendHigherNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8661                           ;lcd_SendHigherNibble@dataByte stored from wreg
  8662  1524  00F6               	movwf	lcd_SendHigherNibble@dataByte
  8663                           
  8664                           ;lcd.c: 945: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&((1<<(4))))!=0u));
  8665  1525  1E76               	btfss	lcd_SendHigherNibble@dataByte,4
  8666  1526  2D29               	goto	u2540
  8667  1527  3001               	movlw	1
  8668  1528  2D2A               	goto	u2550
  8669  1529                     u2540:	
  8670  1529  3000               	movlw	0
  8671  152A                     u2550:	
  8672  152A  00F5               	movwf	??_lcd_SendHigherNibble
  8673  152B  0875               	movf	??_lcd_SendHigherNibble,w
  8674  152C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8675  152D  1683               	bsf	3,5	;RP0=1, select bank1
  8676  152E  1303               	bcf	3,6	;RP1=0, select bank1
  8677  152F  082A               	movf	(_LCDConfig^(0+128)+10),w
  8678  1530  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8679                           
  8680                           ;lcd.c: 946: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&((1<<(5))))!=0u));
  8681  1535  1EF6               	btfss	lcd_SendHigherNibble@dataByte,5
  8682  1536  2D39               	goto	u2560
  8683  1537  3001               	movlw	1
  8684  1538  2D3A               	goto	u2570
  8685  1539                     u2560:	
  8686  1539  3000               	movlw	0
  8687  153A                     u2570:	
  8688  153A  00F5               	movwf	??_lcd_SendHigherNibble
  8689  153B  0875               	movf	??_lcd_SendHigherNibble,w
  8690  153C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8691  153D  1683               	bsf	3,5	;RP0=1, select bank1
  8692  153E  1303               	bcf	3,6	;RP1=0, select bank1
  8693  153F  082B               	movf	(_LCDConfig^(0+128)+11),w
  8694  1540  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8695                           
  8696                           ;lcd.c: 947: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&((1<<(6))))!=0u));
  8697  1545  1F76               	btfss	lcd_SendHigherNibble@dataByte,6
  8698  1546  2D49               	goto	u2580
  8699  1547  3001               	movlw	1
  8700  1548  2D4A               	goto	u2590
  8701  1549                     u2580:	
  8702  1549  3000               	movlw	0
  8703  154A                     u2590:	
  8704  154A  00F5               	movwf	??_lcd_SendHigherNibble
  8705  154B  0875               	movf	??_lcd_SendHigherNibble,w
  8706  154C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8707  154D  1683               	bsf	3,5	;RP0=1, select bank1
  8708  154E  1303               	bcf	3,6	;RP1=0, select bank1
  8709  154F  082C               	movf	(_LCDConfig^(0+128)+12),w
  8710  1550  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8711                           
  8712                           ;lcd.c: 948: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&((1<<(7))))!=0u));
  8713  1555  1FF6               	btfss	lcd_SendHigherNibble@dataByte,7
  8714  1556  2D59               	goto	u2600
  8715  1557  3001               	movlw	1
  8716  1558  2D5A               	goto	u2610
  8717  1559                     u2600:	
  8718  1559  3000               	movlw	0
  8719  155A                     u2610:	
  8720  155A  00F5               	movwf	??_lcd_SendHigherNibble
  8721  155B  0875               	movf	??_lcd_SendHigherNibble,w
  8722  155C  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  8723  155D  1683               	bsf	3,5	;RP0=1, select bank1
  8724  155E  1303               	bcf	3,6	;RP1=0, select bank1
  8725  155F  082D               	movf	(_LCDConfig^(0+128)+13),w
  8726  1560  120A  118A  23FE   	fcall	_GPIO_PinWrite
  8727  1563  0008               	return
  8728  1564                     __end_of_lcd_SendHigherNibble:	
  8729                           
  8730                           	psect	text51
  8731  145F                     __ptext51:	
  8732 ;; *************** function _lcd_SendCmdSignals *****************
  8733 ;; Defined at:
  8734 ;;		line 981 in file "../00-libfiles/lcd.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;		None
  8737 ;; Auto vars:     Size  Location     Type
  8738 ;;		None
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  1    wreg      void 
  8741 ;; Registers used:
  8742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8748 ;;      Params:         0       0       0       0       0
  8749 ;;      Locals:         0       0       0       0       0
  8750 ;;      Temps:          0       0       0       0       0
  8751 ;;      Totals:         0       0       0       0       0
  8752 ;;Total ram usage:        0 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    1
  8755 ;; This function calls:
  8756 ;;		_DELAY_us
  8757 ;;		_GPIO_PinWrite
  8758 ;; This function is called by:
  8759 ;;		_LCD_CmdWrite
  8760 ;;		_lcd_Reset
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           
  8765                           ;psect for function _lcd_SendCmdSignals
  8766  145F                     _lcd_SendCmdSignals:	
  8767                           
  8768                           ;lcd.c: 983: GPIO_PinWrite(LCDConfig.RS,0);
  8769                           
  8770                           ;incstack = 0
  8771                           ; Regs used in _lcd_SendCmdSignals: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8772  145F  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8773  1460  1683               	bsf	3,5	;RP0=1, select bank1
  8774  1461  1303               	bcf	3,6	;RP1=0, select bank1
  8775  1462  0823               	movf	(_LCDConfig^(0+128)+3),w
  8776  1463  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8777                           
  8778                           ;lcd.c: 984: GPIO_PinWrite(LCDConfig.RW,0);
  8779  1468  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8780  1469  1683               	bsf	3,5	;RP0=1, select bank1
  8781  146A  1303               	bcf	3,6	;RP1=0, select bank1
  8782  146B  0824               	movf	(_LCDConfig^(0+128)+4),w
  8783  146C  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8784                           
  8785                           ;lcd.c: 985: GPIO_PinWrite(LCDConfig.EN,1);
  8786  1471  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8787  1472  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  8788  1473  1683               	bsf	3,5	;RP0=1, select bank1
  8789  1474  1303               	bcf	3,6	;RP1=0, select bank1
  8790  1475  0825               	movf	(_LCDConfig^(0+128)+5),w
  8791  1476  120A  118A  23FE  160A  118A  	fcall	_GPIO_PinWrite
  8792                           
  8793                           ;lcd.c: 986: DELAY_us(10);
  8794  147B  300A               	movlw	10
  8795  147C  00F0               	movwf	DELAY_us@us_count
  8796  147D  3000               	movlw	0
  8797  147E  00F1               	movwf	DELAY_us@us_count+1
  8798  147F  160A  118A  22BE  160A  118A  	fcall	_DELAY_us
  8799                           
  8800                           ;lcd.c: 987: GPIO_PinWrite(LCDConfig.EN,0);
  8801  1484  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8802  1485  1683               	bsf	3,5	;RP0=1, select bank1
  8803  1486  1303               	bcf	3,6	;RP1=0, select bank1
  8804  1487  0825               	movf	(_LCDConfig^(0+128)+5),w
  8805  1488  120A  118A  23FE   	fcall	_GPIO_PinWrite
  8806  148B  0008               	return
  8807  148C                     __end_of_lcd_SendCmdSignals:	
  8808                           
  8809                           	psect	text52
  8810  0F74                     __ptext52:	
  8811 ;; *************** function _lcd_BusyCheck *****************
  8812 ;; Defined at:
  8813 ;;		line 860 in file "../00-libfiles/lcd.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  busyflag        1    6[COMMON] unsigned char 
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      void 
  8820 ;; Registers used:
  8821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8827 ;;      Params:         0       0       0       0       0
  8828 ;;      Locals:         1       0       0       0       0
  8829 ;;      Temps:          1       0       0       0       0
  8830 ;;      Totals:         2       0       0       0       0
  8831 ;;Total ram usage:        2 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    2
  8834 ;; This function calls:
  8835 ;;		_DELAY_ms
  8836 ;;		_DELAY_us
  8837 ;;		_GPIO_PinDirection
  8838 ;;		_GPIO_PinRead
  8839 ;;		_GPIO_PinWrite
  8840 ;; This function is called by:
  8841 ;;		_LCD_CmdWrite
  8842 ;;		_lcd_DataWrite
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           
  8847                           ;psect for function _lcd_BusyCheck
  8848  0F74                     _lcd_BusyCheck:	
  8849                           
  8850                           ;lcd.c: 862: uint8_t busyflag;
  8851                           ;lcd.c: 864: if(LCDConfig.RW != P_NC)
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _lcd_BusyCheck: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8855  0F74  1683               	bsf	3,5	;RP0=1, select bank1
  8856  0F75  1303               	bcf	3,6	;RP1=0, select bank1
  8857  0F76  0A24               	incf	(_LCDConfig^(0+128)+4),w
  8858  0F77  1903               	btfsc	3,2
  8859  0F78  2FF8               	goto	l2456
  8860                           
  8861                           ;lcd.c: 865: {
  8862                           ;lcd.c: 866: GPIO_PinDirection(LCDConfig.D7,0x01u);
  8863  0F79  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  8864  0F7A  0AF0               	incf	GPIO_PinDirection@var_pinDirn_u8,f
  8865  0F7B  082D               	movf	(_LCDConfig^(0+128)+13),w
  8866  0F7C  120A  118A  2325  120A  158A  	fcall	_GPIO_PinDirection
  8867                           
  8868                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.RS,0);
  8869  0F81  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8870  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  8871  0F83  1303               	bcf	3,6	;RP1=0, select bank1
  8872  0F84  0823               	movf	(_LCDConfig^(0+128)+3),w
  8873  0F85  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  8874                           
  8875                           ;lcd.c: 868: GPIO_PinWrite(LCDConfig.RW,1);
  8876  0F8A  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8877  0F8B  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  8878  0F8C  1683               	bsf	3,5	;RP0=1, select bank1
  8879  0F8D  1303               	bcf	3,6	;RP1=0, select bank1
  8880  0F8E  0824               	movf	(_LCDConfig^(0+128)+4),w
  8881  0F8F  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  8882  0F94                     l399:	
  8883                           ;lcd.c: 869: do
  8884                           
  8885                           
  8886                           ;lcd.c: 870: {
  8887                           ;lcd.c: 872: GPIO_PinWrite(LCDConfig.EN,0);
  8888  0F94  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8889  0F95  1683               	bsf	3,5	;RP0=1, select bank1
  8890  0F96  1303               	bcf	3,6	;RP1=0, select bank1
  8891  0F97  0825               	movf	(_LCDConfig^(0+128)+5),w
  8892  0F98  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  8893                           
  8894                           ;lcd.c: 873: DELAY_us(10);
  8895  0F9D  300A               	movlw	10
  8896  0F9E  00F0               	movwf	DELAY_us@us_count
  8897  0F9F  3000               	movlw	0
  8898  0FA0  00F1               	movwf	DELAY_us@us_count+1
  8899  0FA1  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  8900                           
  8901                           ;lcd.c: 874: GPIO_PinWrite(LCDConfig.EN,1);
  8902  0FA6  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8903  0FA7  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  8904  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  8905  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  8906  0FAA  0825               	movf	(_LCDConfig^(0+128)+5),w
  8907  0FAB  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  8908                           
  8909                           ;lcd.c: 875: DELAY_us(10);
  8910  0FB0  300A               	movlw	10
  8911  0FB1  00F0               	movwf	DELAY_us@us_count
  8912  0FB2  3000               	movlw	0
  8913  0FB3  00F1               	movwf	DELAY_us@us_count+1
  8914  0FB4  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  8915                           
  8916                           ;lcd.c: 876: busyflag = GPIO_PinRead(LCDConfig.D7);
  8917  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  8918  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  8919  0FBB  082D               	movf	(_LCDConfig^(0+128)+13),w
  8920  0FBC  120A  158A  24A1  120A  158A  	fcall	_GPIO_PinRead
  8921  0FC1  00F5               	movwf	??_lcd_BusyCheck
  8922  0FC2  0875               	movf	??_lcd_BusyCheck,w
  8923  0FC3  00F6               	movwf	lcd_BusyCheck@busyflag
  8924                           
  8925                           ;lcd.c: 879: if(LCDConfig.v_LcdMode_U8 == 4)
  8926  0FC4  3004               	movlw	4
  8927  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  8928  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  8929  0FC7  0622               	xorwf	(_LCDConfig^(0+128)+2),w
  8930  0FC8  1D03               	btfss	3,2
  8931  0FC9  2FED               	goto	l2452
  8932                           
  8933                           ;lcd.c: 880: {
  8934                           ;lcd.c: 882: GPIO_PinWrite(LCDConfig.EN,0);
  8935  0FCA  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8936  0FCB  0825               	movf	(_LCDConfig^(0+128)+5),w
  8937  0FCC  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  8938                           
  8939                           ;lcd.c: 883: DELAY_us(10);
  8940  0FD1  300A               	movlw	10
  8941  0FD2  00F0               	movwf	DELAY_us@us_count
  8942  0FD3  3000               	movlw	0
  8943  0FD4  00F1               	movwf	DELAY_us@us_count+1
  8944  0FD5  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  8945                           
  8946                           ;lcd.c: 884: GPIO_PinWrite(LCDConfig.EN,1);
  8947  0FDA  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  8948  0FDB  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  8949  0FDC  1683               	bsf	3,5	;RP0=1, select bank1
  8950  0FDD  1303               	bcf	3,6	;RP1=0, select bank1
  8951  0FDE  0825               	movf	(_LCDConfig^(0+128)+5),w
  8952  0FDF  120A  118A  23FE  120A  158A  	fcall	_GPIO_PinWrite
  8953                           
  8954                           ;lcd.c: 885: DELAY_us(10);
  8955  0FE4  300A               	movlw	10
  8956  0FE5  00F0               	movwf	DELAY_us@us_count
  8957  0FE6  3000               	movlw	0
  8958  0FE7  00F1               	movwf	DELAY_us@us_count+1
  8959  0FE8  160A  118A  22BE  120A  158A  	fcall	_DELAY_us
  8960  0FED                     l2452:	
  8961                           
  8962                           ;lcd.c: 886: }
  8963                           ;lcd.c: 887: }while(busyflag!=0);
  8964  0FED  0876               	movf	lcd_BusyCheck@busyflag,w
  8965  0FEE  1D03               	btfss	3,2
  8966  0FEF  2F94               	goto	l399
  8967                           
  8968                           ;lcd.c: 889: GPIO_PinDirection(LCDConfig.D7,0x00u);
  8969  0FF0  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  8970  0FF1  1683               	bsf	3,5	;RP0=1, select bank1
  8971  0FF2  1303               	bcf	3,6	;RP1=0, select bank1
  8972  0FF3  082D               	movf	(_LCDConfig^(0+128)+13),w
  8973  0FF4  120A  118A  2325   	fcall	_GPIO_PinDirection
  8974                           
  8975                           ;lcd.c: 890: }
  8976  0FF7  0008               	return
  8977  0FF8                     l2456:	
  8978                           
  8979                           ;lcd.c: 891: else
  8980                           ;lcd.c: 892: {
  8981                           ;lcd.c: 895: DELAY_ms(1);
  8982  0FF8  3001               	movlw	1
  8983  0FF9  00F2               	movwf	DELAY_ms@ms_count
  8984  0FFA  3000               	movlw	0
  8985  0FFB  00F3               	movwf	DELAY_ms@ms_count+1
  8986  0FFC  160A  118A  232F   	fcall	_DELAY_ms
  8987  0FFF  0008               	return
  8988  1000                     __end_of_lcd_BusyCheck:	
  8989                           
  8990                           	psect	text53
  8991  03FE                     __ptext53:	
  8992 ;; *************** function _GPIO_PinWrite *****************
  8993 ;; Defined at:
  8994 ;;		line 127 in file "../00-libfiles/gpio.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  enm_pinNumbe    1    wreg     enum E1088
  8997 ;;  var_pinValue    1    0[COMMON] unsigned char 
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  9000 ;;  var_portNumb    1    3[COMMON] unsigned char 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      void 
  9003 ;; Registers used:
  9004 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9010 ;;      Params:         1       0       0       0       0
  9011 ;;      Locals:         2       0       0       0       0
  9012 ;;      Temps:          2       0       0       0       0
  9013 ;;      Totals:         5       0       0       0       0
  9014 ;;Total ram usage:        5 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_keypad_WaitForKeyRelease
  9020 ;;		_keypad_WaitForKeyPress
  9021 ;;		_KEYPAD_GetKey
  9022 ;;		_lcd_BusyCheck
  9023 ;;		_lcd_SendHigherNibble
  9024 ;;		_lcd_SendLowerNibble
  9025 ;;		_lcd_SendCmdSignals
  9026 ;;		_lcd_SendDataSignals
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           
  9031                           ;psect for function _GPIO_PinWrite
  9032  03FE                     _GPIO_PinWrite:	
  9033                           
  9034                           ;incstack = 0
  9035                           ; Regs used in _GPIO_PinWrite: [wreg-fsr0h+status,2+status,0]
  9036                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  9037  03FE  00F4               	movwf	GPIO_PinWrite@enm_pinNumber
  9038                           
  9039                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  9040                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  9041  03FF  0874               	movf	GPIO_PinWrite@enm_pinNumber,w
  9042  0400  00F1               	movwf	??_GPIO_PinWrite
  9043  0401  3003               	movlw	3
  9044  0402                     u2115:	
  9045  0402  1003               	clrc
  9046  0403  0CF1               	rrf	??_GPIO_PinWrite,f
  9047  0404  3EFF               	addlw	-1
  9048  0405  1D03               	skipz
  9049  0406  2C02               	goto	u2115
  9050  0407  0871               	movf	??_GPIO_PinWrite,w
  9051  0408  00F2               	movwf	??_GPIO_PinWrite+1
  9052  0409  0872               	movf	??_GPIO_PinWrite+1,w
  9053  040A  00F3               	movwf	GPIO_PinWrite@var_portNumber_u8
  9054                           
  9055                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  9056  040B  0874               	movf	GPIO_PinWrite@enm_pinNumber,w
  9057  040C  3907               	andlw	7
  9058  040D  00F1               	movwf	??_GPIO_PinWrite
  9059  040E  0871               	movf	??_GPIO_PinWrite,w
  9060  040F  00F4               	movwf	GPIO_PinWrite@enm_pinNumber
  9061                           
  9062                           ;gpio.c: 138: switch(var_portNumber_u8)
  9063  0410  2CC5               	goto	l2408
  9064  0411                     l2376:	
  9065                           ;gpio.c: 139: {
  9066                           ;gpio.c: 141: case 0:
  9067                           
  9068                           
  9069                           ;gpio.c: 142: ((var_pinValue_u8)? ((PORTA) |= (1<<(enm_pinNumber))): ((PORTA) &= ~(1<<(e
      +                          nm_pinNumber))));
  9070  0411  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  9071  0412  1903               	btfsc	3,2
  9072  0413  2C24               	goto	l2380
  9073  0414  3001               	movlw	1
  9074  0415  00F1               	movwf	??_GPIO_PinWrite
  9075  0416  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9076  0417  2C1A               	goto	u2134
  9077  0418                     u2135:	
  9078  0418  1003               	clrc
  9079  0419  0DF1               	rlf	??_GPIO_PinWrite,f
  9080  041A                     u2134:	
  9081  041A  3EFF               	addlw	-1
  9082  041B  1D03               	skipz
  9083  041C  2C18               	goto	u2135
  9084  041D  0871               	movf	??_GPIO_PinWrite,w
  9085  041E  00F2               	movwf	??_GPIO_PinWrite+1
  9086  041F  0872               	movf	??_GPIO_PinWrite+1,w
  9087  0420  1283               	bcf	3,5	;RP0=0, select bank0
  9088  0421  1303               	bcf	3,6	;RP1=0, select bank0
  9089  0422  0485               	iorwf	5,f	;volatile
  9090  0423  0008               	return
  9091  0424                     l2380:	
  9092  0424  3001               	movlw	1
  9093  0425  00F1               	movwf	??_GPIO_PinWrite
  9094  0426  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9095  0427  2C2A               	goto	u2144
  9096  0428                     u2145:	
  9097  0428  1003               	clrc
  9098  0429  0DF1               	rlf	??_GPIO_PinWrite,f
  9099  042A                     u2144:	
  9100  042A  3EFF               	addlw	-1
  9101  042B  1D03               	skipz
  9102  042C  2C28               	goto	u2145
  9103  042D  0871               	movf	??_GPIO_PinWrite,w
  9104  042E  3AFF               	xorlw	255
  9105  042F  00F2               	movwf	??_GPIO_PinWrite+1
  9106  0430  0872               	movf	??_GPIO_PinWrite+1,w
  9107  0431  1283               	bcf	3,5	;RP0=0, select bank0
  9108  0432  1303               	bcf	3,6	;RP1=0, select bank0
  9109  0433  0585               	andwf	5,f	;volatile
  9110                           
  9111                           ;gpio.c: 143: break;
  9112  0434  0008               	return
  9113  0435                     l2382:	
  9114                           ;gpio.c: 147: case 1:
  9115                           
  9116                           
  9117                           ;gpio.c: 148: ((var_pinValue_u8)? ((PORTB) |= (1<<(enm_pinNumber))): ((PORTB) &= ~(1<<(e
      +                          nm_pinNumber))));
  9118  0435  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  9119  0436  1903               	btfsc	3,2
  9120  0437  2C48               	goto	l2386
  9121  0438  3001               	movlw	1
  9122  0439  00F1               	movwf	??_GPIO_PinWrite
  9123  043A  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9124  043B  2C3E               	goto	u2164
  9125  043C                     u2165:	
  9126  043C  1003               	clrc
  9127  043D  0DF1               	rlf	??_GPIO_PinWrite,f
  9128  043E                     u2164:	
  9129  043E  3EFF               	addlw	-1
  9130  043F  1D03               	skipz
  9131  0440  2C3C               	goto	u2165
  9132  0441  0871               	movf	??_GPIO_PinWrite,w
  9133  0442  00F2               	movwf	??_GPIO_PinWrite+1
  9134  0443  0872               	movf	??_GPIO_PinWrite+1,w
  9135  0444  1283               	bcf	3,5	;RP0=0, select bank0
  9136  0445  1303               	bcf	3,6	;RP1=0, select bank0
  9137  0446  0486               	iorwf	6,f	;volatile
  9138  0447  0008               	return
  9139  0448                     l2386:	
  9140  0448  3001               	movlw	1
  9141  0449  00F1               	movwf	??_GPIO_PinWrite
  9142  044A  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9143  044B  2C4E               	goto	u2174
  9144  044C                     u2175:	
  9145  044C  1003               	clrc
  9146  044D  0DF1               	rlf	??_GPIO_PinWrite,f
  9147  044E                     u2174:	
  9148  044E  3EFF               	addlw	-1
  9149  044F  1D03               	skipz
  9150  0450  2C4C               	goto	u2175
  9151  0451  0871               	movf	??_GPIO_PinWrite,w
  9152  0452  3AFF               	xorlw	255
  9153  0453  00F2               	movwf	??_GPIO_PinWrite+1
  9154  0454  0872               	movf	??_GPIO_PinWrite+1,w
  9155  0455  1283               	bcf	3,5	;RP0=0, select bank0
  9156  0456  1303               	bcf	3,6	;RP1=0, select bank0
  9157  0457  0586               	andwf	6,f	;volatile
  9158                           
  9159                           ;gpio.c: 149: break;
  9160  0458  0008               	return
  9161  0459                     l2388:	
  9162                           ;gpio.c: 153: case 2:
  9163                           
  9164                           
  9165                           ;gpio.c: 154: ((var_pinValue_u8)? ((PORTC) |= (1<<(enm_pinNumber))): ((PORTC) &= ~(1<<(e
      +                          nm_pinNumber))));
  9166  0459  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  9167  045A  1903               	btfsc	3,2
  9168  045B  2C6C               	goto	l2392
  9169  045C  3001               	movlw	1
  9170  045D  00F1               	movwf	??_GPIO_PinWrite
  9171  045E  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9172  045F  2C62               	goto	u2194
  9173  0460                     u2195:	
  9174  0460  1003               	clrc
  9175  0461  0DF1               	rlf	??_GPIO_PinWrite,f
  9176  0462                     u2194:	
  9177  0462  3EFF               	addlw	-1
  9178  0463  1D03               	skipz
  9179  0464  2C60               	goto	u2195
  9180  0465  0871               	movf	??_GPIO_PinWrite,w
  9181  0466  00F2               	movwf	??_GPIO_PinWrite+1
  9182  0467  0872               	movf	??_GPIO_PinWrite+1,w
  9183  0468  1283               	bcf	3,5	;RP0=0, select bank0
  9184  0469  1303               	bcf	3,6	;RP1=0, select bank0
  9185  046A  0487               	iorwf	7,f	;volatile
  9186  046B  0008               	return
  9187  046C                     l2392:	
  9188  046C  3001               	movlw	1
  9189  046D  00F1               	movwf	??_GPIO_PinWrite
  9190  046E  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9191  046F  2C72               	goto	u2204
  9192  0470                     u2205:	
  9193  0470  1003               	clrc
  9194  0471  0DF1               	rlf	??_GPIO_PinWrite,f
  9195  0472                     u2204:	
  9196  0472  3EFF               	addlw	-1
  9197  0473  1D03               	skipz
  9198  0474  2C70               	goto	u2205
  9199  0475  0871               	movf	??_GPIO_PinWrite,w
  9200  0476  3AFF               	xorlw	255
  9201  0477  00F2               	movwf	??_GPIO_PinWrite+1
  9202  0478  0872               	movf	??_GPIO_PinWrite+1,w
  9203  0479  1283               	bcf	3,5	;RP0=0, select bank0
  9204  047A  1303               	bcf	3,6	;RP1=0, select bank0
  9205  047B  0587               	andwf	7,f	;volatile
  9206                           
  9207                           ;gpio.c: 155: break;
  9208  047C  0008               	return
  9209  047D                     l2394:	
  9210                           ;gpio.c: 159: case 3:
  9211                           
  9212                           
  9213                           ;gpio.c: 160: ((var_pinValue_u8)? ((PORTD) |= (1<<(enm_pinNumber))): ((PORTD) &= ~(1<<(e
      +                          nm_pinNumber))));
  9214  047D  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  9215  047E  1903               	btfsc	3,2
  9216  047F  2C90               	goto	l2398
  9217  0480  3001               	movlw	1
  9218  0481  00F1               	movwf	??_GPIO_PinWrite
  9219  0482  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9220  0483  2C86               	goto	u2224
  9221  0484                     u2225:	
  9222  0484  1003               	clrc
  9223  0485  0DF1               	rlf	??_GPIO_PinWrite,f
  9224  0486                     u2224:	
  9225  0486  3EFF               	addlw	-1
  9226  0487  1D03               	skipz
  9227  0488  2C84               	goto	u2225
  9228  0489  0871               	movf	??_GPIO_PinWrite,w
  9229  048A  00F2               	movwf	??_GPIO_PinWrite+1
  9230  048B  0872               	movf	??_GPIO_PinWrite+1,w
  9231  048C  1283               	bcf	3,5	;RP0=0, select bank0
  9232  048D  1303               	bcf	3,6	;RP1=0, select bank0
  9233  048E  0488               	iorwf	8,f	;volatile
  9234  048F  0008               	return
  9235  0490                     l2398:	
  9236  0490  3001               	movlw	1
  9237  0491  00F1               	movwf	??_GPIO_PinWrite
  9238  0492  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9239  0493  2C96               	goto	u2234
  9240  0494                     u2235:	
  9241  0494  1003               	clrc
  9242  0495  0DF1               	rlf	??_GPIO_PinWrite,f
  9243  0496                     u2234:	
  9244  0496  3EFF               	addlw	-1
  9245  0497  1D03               	skipz
  9246  0498  2C94               	goto	u2235
  9247  0499  0871               	movf	??_GPIO_PinWrite,w
  9248  049A  3AFF               	xorlw	255
  9249  049B  00F2               	movwf	??_GPIO_PinWrite+1
  9250  049C  0872               	movf	??_GPIO_PinWrite+1,w
  9251  049D  1283               	bcf	3,5	;RP0=0, select bank0
  9252  049E  1303               	bcf	3,6	;RP1=0, select bank0
  9253  049F  0588               	andwf	8,f	;volatile
  9254                           
  9255                           ;gpio.c: 161: break;
  9256  04A0  0008               	return
  9257  04A1                     l2400:	
  9258                           ;gpio.c: 165: case 4:
  9259                           
  9260                           
  9261                           ;gpio.c: 166: ((var_pinValue_u8)? ((PORTE) |= (1<<(enm_pinNumber))): ((PORTE) &= ~(1<<(e
      +                          nm_pinNumber))));
  9262  04A1  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  9263  04A2  1903               	btfsc	3,2
  9264  04A3  2CB4               	goto	l2404
  9265  04A4  3001               	movlw	1
  9266  04A5  00F1               	movwf	??_GPIO_PinWrite
  9267  04A6  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9268  04A7  2CAA               	goto	u2254
  9269  04A8                     u2255:	
  9270  04A8  1003               	clrc
  9271  04A9  0DF1               	rlf	??_GPIO_PinWrite,f
  9272  04AA                     u2254:	
  9273  04AA  3EFF               	addlw	-1
  9274  04AB  1D03               	skipz
  9275  04AC  2CA8               	goto	u2255
  9276  04AD  0871               	movf	??_GPIO_PinWrite,w
  9277  04AE  00F2               	movwf	??_GPIO_PinWrite+1
  9278  04AF  0872               	movf	??_GPIO_PinWrite+1,w
  9279  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  9280  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  9281  04B2  0489               	iorwf	9,f	;volatile
  9282  04B3  0008               	return
  9283  04B4                     l2404:	
  9284  04B4  3001               	movlw	1
  9285  04B5  00F1               	movwf	??_GPIO_PinWrite
  9286  04B6  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  9287  04B7  2CBA               	goto	u2264
  9288  04B8                     u2265:	
  9289  04B8  1003               	clrc
  9290  04B9  0DF1               	rlf	??_GPIO_PinWrite,f
  9291  04BA                     u2264:	
  9292  04BA  3EFF               	addlw	-1
  9293  04BB  1D03               	skipz
  9294  04BC  2CB8               	goto	u2265
  9295  04BD  0871               	movf	??_GPIO_PinWrite,w
  9296  04BE  3AFF               	xorlw	255
  9297  04BF  00F2               	movwf	??_GPIO_PinWrite+1
  9298  04C0  0872               	movf	??_GPIO_PinWrite+1,w
  9299  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  9300  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  9301  04C3  0589               	andwf	9,f	;volatile
  9302                           
  9303                           ;gpio.c: 169: }
  9304                           
  9305                           ;gpio.c: 167: break;
  9306  04C4  0008               	return
  9307  04C5                     l2408:	
  9308  04C5  0873               	movf	GPIO_PinWrite@var_portNumber_u8,w
  9309                           
  9310                           ; Switch size 1, requested type "space"
  9311                           ; Number of cases is 5, Range of values is 0 to 4
  9312                           ; switch strategies available:
  9313                           ; Name         Instructions Cycles
  9314                           ; simple_byte           16     9 (average)
  9315                           ; direct_byte           23     8 (fixed)
  9316                           ; jumptable            260     6 (fixed)
  9317                           ;	Chosen strategy is simple_byte
  9318  04C6  3A00               	xorlw	0	; case 0
  9319  04C7  1903               	skipnz
  9320  04C8  2C11               	goto	l2376
  9321  04C9  3A01               	xorlw	1	; case 1
  9322  04CA  1903               	skipnz
  9323  04CB  2C35               	goto	l2382
  9324  04CC  3A03               	xorlw	3	; case 2
  9325  04CD  1903               	skipnz
  9326  04CE  2C59               	goto	l2388
  9327  04CF  3A01               	xorlw	1	; case 3
  9328  04D0  1903               	skipnz
  9329  04D1  2C7D               	goto	l2394
  9330  04D2  3A07               	xorlw	7	; case 4
  9331  04D3  1903               	skipnz
  9332  04D4  2CA1               	goto	l2400
  9333  04D5  2CD6               	goto	l152
  9334  04D6                     l152:	
  9335  04D6  0008               	return
  9336  04D7                     __end_of_GPIO_PinWrite:	
  9337                           
  9338                           	psect	text54
  9339  0CA1                     __ptext54:	
  9340 ;; *************** function _GPIO_PinRead *****************
  9341 ;; Defined at:
  9342 ;;		line 192 in file "../00-libfiles/gpio.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  enm_pinNumbe    1    wreg     enum E1088
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  9347 ;;  returnStatus    1    3[COMMON] unsigned char 
  9348 ;;  var_portNumb    1    2[COMMON] unsigned char 
  9349 ;; Return value:  Size  Location     Type
  9350 ;;                  1    wreg      unsigned char 
  9351 ;; Registers used:
  9352 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9358 ;;      Params:         0       0       0       0       0
  9359 ;;      Locals:         3       0       0       0       0
  9360 ;;      Temps:          2       0       0       0       0
  9361 ;;      Totals:         5       0       0       0       0
  9362 ;;Total ram usage:        5 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_keypad_WaitForKeyRelease
  9368 ;;		_keypad_WaitForKeyPress
  9369 ;;		_KEYPAD_GetKey
  9370 ;;		_lcd_BusyCheck
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function _GPIO_PinRead
  9376  0CA1                     _GPIO_PinRead:	
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _GPIO_PinRead: [wreg-fsr0h+status,2+status,0]
  9380                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  9381  0CA1  00F4               	movwf	GPIO_PinRead@enm_pinNumber
  9382                           
  9383                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  9384                           ;gpio.c: 195: uint8_t returnStatus = 0;
  9385  0CA2  01F3               	clrf	GPIO_PinRead@returnStatus
  9386                           
  9387                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  9388  0CA3  0874               	movf	GPIO_PinRead@enm_pinNumber,w
  9389  0CA4  00F0               	movwf	??_GPIO_PinRead
  9390  0CA5  3003               	movlw	3
  9391  0CA6                     u2275:	
  9392  0CA6  1003               	clrc
  9393  0CA7  0CF0               	rrf	??_GPIO_PinRead,f
  9394  0CA8  3EFF               	addlw	-1
  9395  0CA9  1D03               	skipz
  9396  0CAA  2CA6               	goto	u2275
  9397  0CAB  0870               	movf	??_GPIO_PinRead,w
  9398  0CAC  00F1               	movwf	??_GPIO_PinRead+1
  9399  0CAD  0871               	movf	??_GPIO_PinRead+1,w
  9400  0CAE  00F2               	movwf	GPIO_PinRead@var_portNumber_u8
  9401                           
  9402                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  9403  0CAF  0874               	movf	GPIO_PinRead@enm_pinNumber,w
  9404  0CB0  3907               	andlw	7
  9405  0CB1  00F0               	movwf	??_GPIO_PinRead
  9406  0CB2  0870               	movf	??_GPIO_PinRead,w
  9407  0CB3  00F4               	movwf	GPIO_PinRead@enm_pinNumber
  9408                           
  9409                           ;gpio.c: 201: switch(var_portNumber_u8)
  9410  0CB4  2D03               	goto	l2428
  9411  0CB5                     l2416:	
  9412                           ;gpio.c: 202: {
  9413                           ;gpio.c: 204: case 0:
  9414                           
  9415                           
  9416                           ;gpio.c: 205: returnStatus = (((PORTA)&((1<<(enm_pinNumber))))!=0u);
  9417  0CB5  3001               	movlw	1
  9418  0CB6  00F0               	movwf	??_GPIO_PinRead
  9419  0CB7  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  9420  0CB8  2CBB               	goto	u2284
  9421  0CB9                     u2285:	
  9422  0CB9  1003               	clrc
  9423  0CBA  0DF0               	rlf	??_GPIO_PinRead,f
  9424  0CBB                     u2284:	
  9425  0CBB  3EFF               	addlw	-1
  9426  0CBC  1D03               	skipz
  9427  0CBD  2CB9               	goto	u2285
  9428  0CBE  0870               	movf	??_GPIO_PinRead,w
  9429  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  9430  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  9431  0CC1  0505               	andwf	5,w	;volatile
  9432  0CC2  2CFA               	goto	L11
  9433  0CC3                     l2418:	
  9434                           ;gpio.c: 209: case 1:
  9435                           
  9436                           ;gpio.c: 206: break;
  9437                           
  9438                           
  9439                           ;gpio.c: 210: returnStatus = (((PORTB)&((1<<(enm_pinNumber))))!=0u);
  9440  0CC3  3001               	movlw	1
  9441  0CC4  00F0               	movwf	??_GPIO_PinRead
  9442  0CC5  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  9443  0CC6  2CC9               	goto	u2314
  9444  0CC7                     u2315:	
  9445  0CC7  1003               	clrc
  9446  0CC8  0DF0               	rlf	??_GPIO_PinRead,f
  9447  0CC9                     u2314:	
  9448  0CC9  3EFF               	addlw	-1
  9449  0CCA  1D03               	skipz
  9450  0CCB  2CC7               	goto	u2315
  9451  0CCC  0870               	movf	??_GPIO_PinRead,w
  9452  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  9453  0CCE  1303               	bcf	3,6	;RP1=0, select bank0
  9454  0CCF  0506               	andwf	6,w	;volatile
  9455  0CD0  2CFA               	goto	L11
  9456  0CD1                     l2420:	
  9457                           ;gpio.c: 214: case 2:
  9458                           
  9459                           ;gpio.c: 211: break;
  9460                           
  9461                           
  9462                           ;gpio.c: 215: returnStatus = (((PORTC)&((1<<(enm_pinNumber))))!=0u);
  9463  0CD1  3001               	movlw	1
  9464  0CD2  00F0               	movwf	??_GPIO_PinRead
  9465  0CD3  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  9466  0CD4  2CD7               	goto	u2344
  9467  0CD5                     u2345:	
  9468  0CD5  1003               	clrc
  9469  0CD6  0DF0               	rlf	??_GPIO_PinRead,f
  9470  0CD7                     u2344:	
  9471  0CD7  3EFF               	addlw	-1
  9472  0CD8  1D03               	skipz
  9473  0CD9  2CD5               	goto	u2345
  9474  0CDA  0870               	movf	??_GPIO_PinRead,w
  9475  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  9476  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  9477  0CDD  0507               	andwf	7,w	;volatile
  9478  0CDE  2CFA               	goto	L11
  9479  0CDF                     l2422:	
  9480                           ;gpio.c: 220: case 3:
  9481                           
  9482                           ;gpio.c: 216: break;
  9483                           
  9484                           
  9485                           ;gpio.c: 221: returnStatus = (((PORTD)&((1<<(enm_pinNumber))))!=0u);
  9486  0CDF  3001               	movlw	1
  9487  0CE0  00F0               	movwf	??_GPIO_PinRead
  9488  0CE1  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  9489  0CE2  2CE5               	goto	u2374
  9490  0CE3                     u2375:	
  9491  0CE3  1003               	clrc
  9492  0CE4  0DF0               	rlf	??_GPIO_PinRead,f
  9493  0CE5                     u2374:	
  9494  0CE5  3EFF               	addlw	-1
  9495  0CE6  1D03               	skipz
  9496  0CE7  2CE3               	goto	u2375
  9497  0CE8  0870               	movf	??_GPIO_PinRead,w
  9498  0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  9499  0CEA  1303               	bcf	3,6	;RP1=0, select bank0
  9500  0CEB  0508               	andwf	8,w	;volatile
  9501  0CEC  2CFA               	goto	L11
  9502  0CED                     l2424:	
  9503                           ;gpio.c: 226: case 4:
  9504                           
  9505                           ;gpio.c: 222: break;
  9506                           
  9507                           
  9508                           ;gpio.c: 227: returnStatus = (((PORTE)&((1<<(enm_pinNumber))))!=0u);
  9509  0CED  3001               	movlw	1
  9510  0CEE  00F0               	movwf	??_GPIO_PinRead
  9511  0CEF  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  9512  0CF0  2CF3               	goto	u2404
  9513  0CF1                     u2405:	
  9514  0CF1  1003               	clrc
  9515  0CF2  0DF0               	rlf	??_GPIO_PinRead,f
  9516  0CF3                     u2404:	
  9517  0CF3  3EFF               	addlw	-1
  9518  0CF4  1D03               	skipz
  9519  0CF5  2CF1               	goto	u2405
  9520  0CF6  0870               	movf	??_GPIO_PinRead,w
  9521  0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  9522  0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  9523  0CF9  0509               	andwf	9,w	;volatile
  9524  0CFA                     L11:	
  9525  0CFA  1903               	btfsc	3,2
  9526  0CFB  2CFE               	goto	u2410
  9527  0CFC  3001               	movlw	1
  9528  0CFD  2CFF               	goto	u2420
  9529  0CFE                     u2410:	
  9530  0CFE  3000               	movlw	0
  9531  0CFF                     u2420:	
  9532  0CFF  00F1               	movwf	??_GPIO_PinRead+1
  9533  0D00  0871               	movf	??_GPIO_PinRead+1,w
  9534  0D01  00F3               	movwf	GPIO_PinRead@returnStatus
  9535                           
  9536                           ;gpio.c: 229: }
  9537                           
  9538                           ;gpio.c: 228: break;
  9539  0D02  2D14               	goto	l2430
  9540  0D03                     l2428:	
  9541  0D03  0872               	movf	GPIO_PinRead@var_portNumber_u8,w
  9542                           
  9543                           ; Switch size 1, requested type "space"
  9544                           ; Number of cases is 5, Range of values is 0 to 4
  9545                           ; switch strategies available:
  9546                           ; Name         Instructions Cycles
  9547                           ; simple_byte           16     9 (average)
  9548                           ; direct_byte           23     8 (fixed)
  9549                           ; jumptable            260     6 (fixed)
  9550                           ;	Chosen strategy is simple_byte
  9551  0D04  3A00               	xorlw	0	; case 0
  9552  0D05  1903               	skipnz
  9553  0D06  2CB5               	goto	l2416
  9554  0D07  3A01               	xorlw	1	; case 1
  9555  0D08  1903               	skipnz
  9556  0D09  2CC3               	goto	l2418
  9557  0D0A  3A03               	xorlw	3	; case 2
  9558  0D0B  1903               	skipnz
  9559  0D0C  2CD1               	goto	l2420
  9560  0D0D  3A01               	xorlw	1	; case 3
  9561  0D0E  1903               	skipnz
  9562  0D0F  2CDF               	goto	l2422
  9563  0D10  3A07               	xorlw	7	; case 4
  9564  0D11  1903               	skipnz
  9565  0D12  2CED               	goto	l2424
  9566  0D13  2D14               	goto	l2430
  9567  0D14                     l2430:	
  9568                           
  9569                           ;gpio.c: 230: return returnStatus;
  9570  0D14  0873               	movf	GPIO_PinRead@returnStatus,w
  9571  0D15  0008               	return
  9572  0D16                     __end_of_GPIO_PinRead:	
  9573                           
  9574                           	psect	text55
  9575  0325                     __ptext55:	
  9576 ;; *************** function _GPIO_PinDirection *****************
  9577 ;; Defined at:
  9578 ;;		line 60 in file "../00-libfiles/gpio.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;  enm_pinNumbe    1    wreg     enum E1088
  9581 ;;  var_pinDirn_    1    0[COMMON] unsigned char 
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  9584 ;;  var_portNumb    1    3[COMMON] unsigned char 
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9594 ;;      Params:         1       0       0       0       0
  9595 ;;      Locals:         2       0       0       0       0
  9596 ;;      Temps:          2       0       0       0       0
  9597 ;;      Totals:         5       0       0       0       0
  9598 ;;Total ram usage:        5 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; This function calls:
  9601 ;;		Nothing
  9602 ;; This function is called by:
  9603 ;;		_KEYPAD_Init
  9604 ;;		_LCD_SetUp
  9605 ;;		_lcd_BusyCheck
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function _GPIO_PinDirection
  9611  0325                     _GPIO_PinDirection:	
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in _GPIO_PinDirection: [wreg-fsr0h+status,2+status,0]
  9615                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  9616  0325  00F4               	movwf	GPIO_PinDirection@enm_pinNumber
  9617                           
  9618                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  9619                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  9620  0326  0874               	movf	GPIO_PinDirection@enm_pinNumber,w
  9621  0327  00F1               	movwf	??_GPIO_PinDirection
  9622  0328  3003               	movlw	3
  9623  0329                     u1955:	
  9624  0329  1003               	clrc
  9625  032A  0CF1               	rrf	??_GPIO_PinDirection,f
  9626  032B  3EFF               	addlw	-1
  9627  032C  1D03               	skipz
  9628  032D  2B29               	goto	u1955
  9629  032E  0871               	movf	??_GPIO_PinDirection,w
  9630  032F  00F2               	movwf	??_GPIO_PinDirection+1
  9631  0330  0872               	movf	??_GPIO_PinDirection+1,w
  9632  0331  00F3               	movwf	GPIO_PinDirection@var_portNumber_u8
  9633                           
  9634                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  9635  0332  0874               	movf	GPIO_PinDirection@enm_pinNumber,w
  9636  0333  3907               	andlw	7
  9637  0334  00F1               	movwf	??_GPIO_PinDirection
  9638  0335  0871               	movf	??_GPIO_PinDirection,w
  9639  0336  00F4               	movwf	GPIO_PinDirection@enm_pinNumber
  9640                           
  9641                           ;gpio.c: 71: switch(var_portNumber_u8)
  9642  0337  2BEC               	goto	l2370
  9643  0338                     l2338:	
  9644                           ;gpio.c: 72: {
  9645                           ;gpio.c: 74: case 0:
  9646                           
  9647                           
  9648                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= (1<<(enm_pinNumber))): ((TRISA) &= ~(1<<(enm
      +                          _pinNumber))));
  9649  0338  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  9650  0339  1903               	btfsc	3,2
  9651  033A  2B4B               	goto	l2342
  9652  033B  3001               	movlw	1
  9653  033C  00F1               	movwf	??_GPIO_PinDirection
  9654  033D  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9655  033E  2B41               	goto	u1974
  9656  033F                     u1975:	
  9657  033F  1003               	clrc
  9658  0340  0DF1               	rlf	??_GPIO_PinDirection,f
  9659  0341                     u1974:	
  9660  0341  3EFF               	addlw	-1
  9661  0342  1D03               	skipz
  9662  0343  2B3F               	goto	u1975
  9663  0344  0871               	movf	??_GPIO_PinDirection,w
  9664  0345  00F2               	movwf	??_GPIO_PinDirection+1
  9665  0346  0872               	movf	??_GPIO_PinDirection+1,w
  9666  0347  1683               	bsf	3,5	;RP0=1, select bank1
  9667  0348  1303               	bcf	3,6	;RP1=0, select bank1
  9668  0349  0485               	iorwf	5,f	;volatile
  9669  034A  0008               	return
  9670  034B                     l2342:	
  9671  034B  3001               	movlw	1
  9672  034C  00F1               	movwf	??_GPIO_PinDirection
  9673  034D  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9674  034E  2B51               	goto	u1984
  9675  034F                     u1985:	
  9676  034F  1003               	clrc
  9677  0350  0DF1               	rlf	??_GPIO_PinDirection,f
  9678  0351                     u1984:	
  9679  0351  3EFF               	addlw	-1
  9680  0352  1D03               	skipz
  9681  0353  2B4F               	goto	u1985
  9682  0354  0871               	movf	??_GPIO_PinDirection,w
  9683  0355  3AFF               	xorlw	255
  9684  0356  00F2               	movwf	??_GPIO_PinDirection+1
  9685  0357  0872               	movf	??_GPIO_PinDirection+1,w
  9686  0358  1683               	bsf	3,5	;RP0=1, select bank1
  9687  0359  1303               	bcf	3,6	;RP1=0, select bank1
  9688  035A  0585               	andwf	5,f	;volatile
  9689                           
  9690                           ;gpio.c: 76: break;
  9691  035B  0008               	return
  9692  035C                     l2344:	
  9693                           ;gpio.c: 80: case 1:
  9694                           
  9695                           
  9696                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= (1<<(enm_pinNumber))): ((TRISB) &= ~(1<<(enm
      +                          _pinNumber))));
  9697  035C  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  9698  035D  1903               	btfsc	3,2
  9699  035E  2B6F               	goto	l2348
  9700  035F  3001               	movlw	1
  9701  0360  00F1               	movwf	??_GPIO_PinDirection
  9702  0361  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9703  0362  2B65               	goto	u2004
  9704  0363                     u2005:	
  9705  0363  1003               	clrc
  9706  0364  0DF1               	rlf	??_GPIO_PinDirection,f
  9707  0365                     u2004:	
  9708  0365  3EFF               	addlw	-1
  9709  0366  1D03               	skipz
  9710  0367  2B63               	goto	u2005
  9711  0368  0871               	movf	??_GPIO_PinDirection,w
  9712  0369  00F2               	movwf	??_GPIO_PinDirection+1
  9713  036A  0872               	movf	??_GPIO_PinDirection+1,w
  9714  036B  1683               	bsf	3,5	;RP0=1, select bank1
  9715  036C  1303               	bcf	3,6	;RP1=0, select bank1
  9716  036D  0486               	iorwf	6,f	;volatile
  9717  036E  0008               	return
  9718  036F                     l2348:	
  9719  036F  3001               	movlw	1
  9720  0370  00F1               	movwf	??_GPIO_PinDirection
  9721  0371  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9722  0372  2B75               	goto	u2014
  9723  0373                     u2015:	
  9724  0373  1003               	clrc
  9725  0374  0DF1               	rlf	??_GPIO_PinDirection,f
  9726  0375                     u2014:	
  9727  0375  3EFF               	addlw	-1
  9728  0376  1D03               	skipz
  9729  0377  2B73               	goto	u2015
  9730  0378  0871               	movf	??_GPIO_PinDirection,w
  9731  0379  3AFF               	xorlw	255
  9732  037A  00F2               	movwf	??_GPIO_PinDirection+1
  9733  037B  0872               	movf	??_GPIO_PinDirection+1,w
  9734  037C  1683               	bsf	3,5	;RP0=1, select bank1
  9735  037D  1303               	bcf	3,6	;RP1=0, select bank1
  9736  037E  0586               	andwf	6,f	;volatile
  9737                           
  9738                           ;gpio.c: 82: break;
  9739  037F  0008               	return
  9740  0380                     l2350:	
  9741                           ;gpio.c: 86: case 2:
  9742                           
  9743                           
  9744                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= (1<<(enm_pinNumber))): ((TRISC) &= ~(1<<(enm
      +                          _pinNumber))));
  9745  0380  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  9746  0381  1903               	btfsc	3,2
  9747  0382  2B93               	goto	l2354
  9748  0383  3001               	movlw	1
  9749  0384  00F1               	movwf	??_GPIO_PinDirection
  9750  0385  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9751  0386  2B89               	goto	u2034
  9752  0387                     u2035:	
  9753  0387  1003               	clrc
  9754  0388  0DF1               	rlf	??_GPIO_PinDirection,f
  9755  0389                     u2034:	
  9756  0389  3EFF               	addlw	-1
  9757  038A  1D03               	skipz
  9758  038B  2B87               	goto	u2035
  9759  038C  0871               	movf	??_GPIO_PinDirection,w
  9760  038D  00F2               	movwf	??_GPIO_PinDirection+1
  9761  038E  0872               	movf	??_GPIO_PinDirection+1,w
  9762  038F  1683               	bsf	3,5	;RP0=1, select bank1
  9763  0390  1303               	bcf	3,6	;RP1=0, select bank1
  9764  0391  0487               	iorwf	7,f	;volatile
  9765  0392  0008               	return
  9766  0393                     l2354:	
  9767  0393  3001               	movlw	1
  9768  0394  00F1               	movwf	??_GPIO_PinDirection
  9769  0395  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9770  0396  2B99               	goto	u2044
  9771  0397                     u2045:	
  9772  0397  1003               	clrc
  9773  0398  0DF1               	rlf	??_GPIO_PinDirection,f
  9774  0399                     u2044:	
  9775  0399  3EFF               	addlw	-1
  9776  039A  1D03               	skipz
  9777  039B  2B97               	goto	u2045
  9778  039C  0871               	movf	??_GPIO_PinDirection,w
  9779  039D  3AFF               	xorlw	255
  9780  039E  00F2               	movwf	??_GPIO_PinDirection+1
  9781  039F  0872               	movf	??_GPIO_PinDirection+1,w
  9782  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  9783  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  9784  03A2  0587               	andwf	7,f	;volatile
  9785                           
  9786                           ;gpio.c: 88: break;
  9787  03A3  0008               	return
  9788  03A4                     l2356:	
  9789                           ;gpio.c: 92: case 3:
  9790                           
  9791                           
  9792                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= (1<<(enm_pinNumber))): ((TRISD) &= ~(1<<(enm
      +                          _pinNumber))));
  9793  03A4  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  9794  03A5  1903               	btfsc	3,2
  9795  03A6  2BB7               	goto	l2360
  9796  03A7  3001               	movlw	1
  9797  03A8  00F1               	movwf	??_GPIO_PinDirection
  9798  03A9  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9799  03AA  2BAD               	goto	u2064
  9800  03AB                     u2065:	
  9801  03AB  1003               	clrc
  9802  03AC  0DF1               	rlf	??_GPIO_PinDirection,f
  9803  03AD                     u2064:	
  9804  03AD  3EFF               	addlw	-1
  9805  03AE  1D03               	skipz
  9806  03AF  2BAB               	goto	u2065
  9807  03B0  0871               	movf	??_GPIO_PinDirection,w
  9808  03B1  00F2               	movwf	??_GPIO_PinDirection+1
  9809  03B2  0872               	movf	??_GPIO_PinDirection+1,w
  9810  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  9811  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  9812  03B5  0488               	iorwf	8,f	;volatile
  9813  03B6  0008               	return
  9814  03B7                     l2360:	
  9815  03B7  3001               	movlw	1
  9816  03B8  00F1               	movwf	??_GPIO_PinDirection
  9817  03B9  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9818  03BA  2BBD               	goto	u2074
  9819  03BB                     u2075:	
  9820  03BB  1003               	clrc
  9821  03BC  0DF1               	rlf	??_GPIO_PinDirection,f
  9822  03BD                     u2074:	
  9823  03BD  3EFF               	addlw	-1
  9824  03BE  1D03               	skipz
  9825  03BF  2BBB               	goto	u2075
  9826  03C0  0871               	movf	??_GPIO_PinDirection,w
  9827  03C1  3AFF               	xorlw	255
  9828  03C2  00F2               	movwf	??_GPIO_PinDirection+1
  9829  03C3  0872               	movf	??_GPIO_PinDirection+1,w
  9830  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  9831  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  9832  03C6  0588               	andwf	8,f	;volatile
  9833                           
  9834                           ;gpio.c: 94: break;
  9835  03C7  0008               	return
  9836  03C8                     l2362:	
  9837                           ;gpio.c: 97: case 4:
  9838                           
  9839                           
  9840                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= (1<<(enm_pinNumber))): ((TRISE) &= ~(1<<(enm
      +                          _pinNumber))));
  9841  03C8  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  9842  03C9  1903               	btfsc	3,2
  9843  03CA  2BDB               	goto	l2366
  9844  03CB  3001               	movlw	1
  9845  03CC  00F1               	movwf	??_GPIO_PinDirection
  9846  03CD  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9847  03CE  2BD1               	goto	u2094
  9848  03CF                     u2095:	
  9849  03CF  1003               	clrc
  9850  03D0  0DF1               	rlf	??_GPIO_PinDirection,f
  9851  03D1                     u2094:	
  9852  03D1  3EFF               	addlw	-1
  9853  03D2  1D03               	skipz
  9854  03D3  2BCF               	goto	u2095
  9855  03D4  0871               	movf	??_GPIO_PinDirection,w
  9856  03D5  00F2               	movwf	??_GPIO_PinDirection+1
  9857  03D6  0872               	movf	??_GPIO_PinDirection+1,w
  9858  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  9859  03D8  1303               	bcf	3,6	;RP1=0, select bank1
  9860  03D9  0489               	iorwf	9,f	;volatile
  9861  03DA  0008               	return
  9862  03DB                     l2366:	
  9863  03DB  3001               	movlw	1
  9864  03DC  00F1               	movwf	??_GPIO_PinDirection
  9865  03DD  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  9866  03DE  2BE1               	goto	u2104
  9867  03DF                     u2105:	
  9868  03DF  1003               	clrc
  9869  03E0  0DF1               	rlf	??_GPIO_PinDirection,f
  9870  03E1                     u2104:	
  9871  03E1  3EFF               	addlw	-1
  9872  03E2  1D03               	skipz
  9873  03E3  2BDF               	goto	u2105
  9874  03E4  0871               	movf	??_GPIO_PinDirection,w
  9875  03E5  3AFF               	xorlw	255
  9876  03E6  00F2               	movwf	??_GPIO_PinDirection+1
  9877  03E7  0872               	movf	??_GPIO_PinDirection+1,w
  9878  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  9879  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  9880  03EA  0589               	andwf	9,f	;volatile
  9881                           
  9882                           ;gpio.c: 101: }
  9883                           
  9884                           ;gpio.c: 99: break;
  9885  03EB  0008               	return
  9886  03EC                     l2370:	
  9887  03EC  0873               	movf	GPIO_PinDirection@var_portNumber_u8,w
  9888                           
  9889                           ; Switch size 1, requested type "space"
  9890                           ; Number of cases is 5, Range of values is 0 to 4
  9891                           ; switch strategies available:
  9892                           ; Name         Instructions Cycles
  9893                           ; simple_byte           16     9 (average)
  9894                           ; direct_byte           23     8 (fixed)
  9895                           ; jumptable            260     6 (fixed)
  9896                           ;	Chosen strategy is simple_byte
  9897  03ED  3A00               	xorlw	0	; case 0
  9898  03EE  1903               	skipnz
  9899  03EF  2B38               	goto	l2338
  9900  03F0  3A01               	xorlw	1	; case 1
  9901  03F1  1903               	skipnz
  9902  03F2  2B5C               	goto	l2344
  9903  03F3  3A03               	xorlw	3	; case 2
  9904  03F4  1903               	skipnz
  9905  03F5  2B80               	goto	l2350
  9906  03F6  3A01               	xorlw	1	; case 3
  9907  03F7  1903               	skipnz
  9908  03F8  2BA4               	goto	l2356
  9909  03F9  3A07               	xorlw	7	; case 4
  9910  03FA  1903               	skipnz
  9911  03FB  2BC8               	goto	l2362
  9912  03FC  2BFD               	goto	l122
  9913  03FD                     l122:	
  9914  03FD  0008               	return
  9915  03FE                     __end_of_GPIO_PinDirection:	
  9916                           
  9917                           	psect	text56
  9918  132F                     __ptext56:	
  9919 ;; *************** function _DELAY_ms *****************
  9920 ;; Defined at:
  9921 ;;		line 75 in file "../00-libfiles/delay.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;  ms_count        2    2[COMMON] unsigned int 
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  1    wreg      void 
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, pclath, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9935 ;;      Params:         2       0       0       0       0
  9936 ;;      Locals:         0       0       0       0       0
  9937 ;;      Temps:          0       0       0       0       0
  9938 ;;      Totals:         2       0       0       0       0
  9939 ;;Total ram usage:        2 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    1
  9942 ;; This function calls:
  9943 ;;		_DELAY_us
  9944 ;; This function is called by:
  9945 ;;		_LCD_Init
  9946 ;;		_lcd_BusyCheck
  9947 ;;		_lcd_Reset
  9948 ;;		_gpio_test
  9949 ;;		_LCD_8bit_test
  9950 ;;		_LCD_4bit_test
  9951 ;;		_DELAY_sec
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           
  9956                           ;psect for function _DELAY_ms
  9957  132F                     _DELAY_ms:	
  9958  132F                     l2332:	
  9959                           ;delay.c: 77: while (ms_count != 0)
  9960                           
  9961                           ;incstack = 0
  9962                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  9963                           
  9964  132F  0872               	movf	DELAY_ms@ms_count,w
  9965  1330  0473               	iorwf	DELAY_ms@ms_count+1,w
  9966  1331  1903               	btfsc	3,2
  9967  1332  0008               	return
  9968                           
  9969                           ;delay.c: 78: {
  9970                           ;delay.c: 79: DELAY_us(300u);
  9971  1333  302C               	movlw	44
  9972  1334  00F0               	movwf	DELAY_us@us_count
  9973  1335  3001               	movlw	1
  9974  1336  00F1               	movwf	DELAY_us@us_count+1
  9975  1337  160A  118A  22BE  160A  118A  	fcall	_DELAY_us
  9976                           
  9977                           ;delay.c: 80: ms_count--;
  9978  133C  3001               	movlw	1
  9979  133D  02F2               	subwf	DELAY_ms@ms_count,f
  9980  133E  3000               	movlw	0
  9981  133F  1C03               	skipc
  9982  1340  03F3               	decf	DELAY_ms@ms_count+1,f
  9983  1341  02F3               	subwf	DELAY_ms@ms_count+1,f
  9984  1342  2B2F               	goto	l2332
  9985  1343                     __end_of_DELAY_ms:	
  9986                           
  9987                           	psect	text57
  9988  12BE                     __ptext57:	
  9989 ;; *************** function _DELAY_us *****************
  9990 ;; Defined at:
  9991 ;;		line 56 in file "../00-libfiles/delay.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;  us_count        2    0[COMMON] unsigned int 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10005 ;;      Params:         2       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0
 10008 ;;      Totals:         2       0       0       0       0
 10009 ;;Total ram usage:        2 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_ADC_GetAdcValue
 10015 ;;		_DELAY_ms
 10016 ;;		_keypad_WaitForKeyRelease
 10017 ;;		_keypad_WaitForKeyPress
 10018 ;;		_lcd_BusyCheck
 10019 ;;		_lcd_Reset
 10020 ;;		_lcd_SendCmdSignals
 10021 ;;		_lcd_SendDataSignals
 10022 ;;		_seg_test
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           
 10027                           ;psect for function _DELAY_us
 10028  12BE                     _DELAY_us:	
 10029  12BE                     l2324:	
 10030                           ;delay.c: 58: while (us_count != 0)
 10031                           
 10032                           ;incstack = 0
 10033                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
 10034                           
 10035  12BE  0870               	movf	DELAY_us@us_count,w
 10036  12BF  0471               	iorwf	DELAY_us@us_count+1,w
 10037  12C0  1903               	btfsc	3,2
 10038  12C1  0008               	return
 10039                           
 10040                           ;delay.c: 59: {
 10041                           ;delay.c: 60: us_count--;
 10042  12C2  3001               	movlw	1
 10043  12C3  02F0               	subwf	DELAY_us@us_count,f
 10044  12C4  3000               	movlw	0
 10045  12C5  1C03               	skipc
 10046  12C6  03F1               	decf	DELAY_us@us_count+1,f
 10047  12C7  02F1               	subwf	DELAY_us@us_count+1,f
 10048  12C8  2ABE               	goto	l2324
 10049  12C9                     __end_of_DELAY_us:	
 10050  007E                     btemp	set	126	;btemp
 10051  007E                     wtemp	set	126
 10052  007E                     wtemp0	set	126
 10053  0080                     wtemp1	set	128
 10054  0082                     wtemp2	set	130
 10055  0084                     wtemp3	set	132
 10056  0086                     wtemp4	set	134
 10057  0088                     wtemp5	set	136
 10058  007F                     wtemp6	set	127
 10059  007E                     ttemp	set	126
 10060  007E                     ttemp0	set	126
 10061  0081                     ttemp1	set	129
 10062  0084                     ttemp2	set	132
 10063  0087                     ttemp3	set	135
 10064  007F                     ttemp4	set	127
 10065  007E                     ltemp	set	126
 10066  007E                     ltemp0	set	126
 10067  0082                     ltemp1	set	130
 10068  0086                     ltemp2	set	134
 10069  0080                     ltemp3	set	128


Data Sizes:
    Strings     842
    Constant    16
    Data        8
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     12      45
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_Printf@str	PTR unsigned char  size(1) Largest target is 0

    UART_Printf@argList	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_23(CODE[10]), STR_22(CODE[40]), STR_21(CODE[21]), STR_20(CODE[29]), 
		 -> STR_19(CODE[16]), STR_18(CODE[23]), STR_17(CODE[38]), STR_16(CODE[42]), 
		 -> STR_15(CODE[34]), STR_14(CODE[41]), STR_10(CODE[41]), STR_6(CODE[41]), 
		 -> STR_4(CODE[40]), STR_3(CODE[47]), 

    UART_Printf@ptr	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_23(CODE[10]), STR_22(CODE[40]), STR_21(CODE[21]), STR_20(CODE[29]), 
		 -> STR_19(CODE[16]), STR_18(CODE[23]), STR_17(CODE[38]), STR_16(CODE[42]), 
		 -> STR_15(CODE[34]), STR_14(CODE[41]), STR_10(CODE[41]), STR_6(CODE[41]), 
		 -> STR_4(CODE[40]), STR_3(CODE[47]), 

    UART_Printf@argp	PTR void [1] size(1) Largest target is 1
		 -> ?_UART_Printf(BANK0[1]), 

    UART_TxString@ptr_string	PTR const unsigned char  size(2) Largest target is 139
		 -> STR_13(CODE[73]), STR_9(CODE[71]), STR_5(CODE[53]), STR_2(CODE[37]), 
		 -> STR_1(CODE[139]), 

    RTC_GetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> rtc_test@rtc(BANK0[7]), 

    RTC_SetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> rtc_test@rtc(BANK0[7]), 

    LCD_DisplayString@ptr_stringPointer_u8	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_12(CODE[15]), STR_11(CODE[17]), STR_8(CODE[15]), STR_7(CODE[17]), 


Critical Paths under _main in COMMON

    _RTC_SetDateTime->_I2C_Write
    _RTC_Init->_I2C_Write
    _RTC_GetDateTime->_I2C_Read
    _KEYPAD_Init->_GPIO_PinDirection
    _KEYPAD_GetKey->_keypad_WaitForKeyPress
    _KEYPAD_GetKey->_keypad_WaitForKeyRelease
    _keypad_WaitForKeyRelease->_GPIO_PinRead
    _keypad_WaitForKeyRelease->_GPIO_PinWrite
    _keypad_WaitForKeyPress->_GPIO_PinRead
    _keypad_WaitForKeyPress->_GPIO_PinWrite
    _EEPROM_WriteByte->_eeprom_write
    _ADC_GetAdcValue->_DELAY_us
    _UART_SetBaudRate->___lldiv
    _LCD_8bit_test->_LCD_Init
    _LCD_4bit_test->_LCD_Init
    _UART_TxString->_UART_TxChar
    _UART_TxNumber->___lldiv
    ___bmul->___lldiv
    _LCD_SetUp->_GPIO_PinDirection
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinDirection
    _lcd_BusyCheck->_GPIO_PinRead
    _lcd_BusyCheck->_GPIO_PinWrite
    _DELAY_ms->_DELAY_us

Critical Paths under _main in BANK0

    _main->_LCD_4bit_test
    _main->_LCD_8bit_test
    _seg_test->_UART_Printf
    _rtc_test->_UART_Printf
    _keypad_test->_UART_Printf
    _gpio_test->_UART_Printf
    _eeprom_test->_UART_Printf
    _adc_test->_UART_Printf
    _UART_Init->_UART_SetBaudRate
    _LCD_8bit_test->_UART_Printf
    _LCD_4bit_test->_UART_Printf
    _UART_Printf->_UART_TxNumber
    _UART_TxNumber->___bmul

Critical Paths under _main in BANK1

    _main->_rtc_test

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  205571
                                             79 BANK0      1     1      0
                      _LCD_4bit_test
                      _LCD_8bit_test
                          _UART_Init
                        _UART_RxChar
                      _UART_TxString
                           _adc_test
                        _eeprom_test
                          _gpio_test
                        _keypad_test
                           _rtc_test
                           _seg_test
 ---------------------------------------------------------------------------------
 (1) _seg_test                                             4     4      0    6041
                                             69 BANK0      4     4      0
                           _DELAY_us
                        _UART_Printf
                        _UART_RxChar
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (1) _rtc_test                                            19    19      0    5461
                                             69 BANK0      7     7      0
                                              0 BANK1     12    12      0
                    _RTC_GetDateTime
                           _RTC_Init
                    _RTC_SetDateTime
                        _UART_Printf
                        _UART_RxChar
 ---------------------------------------------------------------------------------
 (2) _RTC_SetDateTime                                      1     1      0     203
                                              1 COMMON     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _RTC_Init                                             0     0      0      22
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTC_GetDateTime                                      2     2      0     249
                                              3 COMMON     2     2      0
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             3     3      0      46
                                              0 COMMON     3     3      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (4) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keypad_test                                          8     8      0   15336
                                             69 BANK0      8     8      0
                      _KEYPAD_GetKey
                        _KEYPAD_Init
                        _UART_Printf
                        _UART_RxChar
 ---------------------------------------------------------------------------------
 (2) _KEYPAD_Init                                         10     3      7    1876
                                              5 COMMON     8     1      7
                                              0 BANK0      2     2      0
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (2) _KEYPAD_GetKey                                        7     7      0    8797
                                              8 COMMON     4     4      0
                                              0 BANK0      3     3      0
                       _GPIO_PinRead
                      _GPIO_PinWrite
             _keypad_WaitForKeyPress
           _keypad_WaitForKeyRelease
 ---------------------------------------------------------------------------------
 (3) _keypad_WaitForKeyRelease                             3     3      0    3211
                                              5 COMMON     3     3      0
                           _DELAY_us
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (3) _keypad_WaitForKeyPress                               3     3      0    3211
                                              5 COMMON     3     3      0
                           _DELAY_us
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (1) _gpio_test                                            3     3      0    6475
                                             69 BANK0      3     3      0
                           _DELAY_ms
                        _UART_Printf
                        _UART_RxChar
 ---------------------------------------------------------------------------------
 (1) _eeprom_test                                          6     6      0    5280
                                             69 BANK0      6     6      0
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
                        _UART_Printf
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteByte                                     4     1      3     353
                                              3 COMMON     4     1      3
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1      97
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EEPROM_ReadByte                                      2     0      2     128
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_test                                             8     8      0    5655
                                             69 BANK0      8     8      0
                    _ADC_GetAdcValue
                           _ADC_Init
                        _UART_Printf
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetAdcValue                                      4     2      2     946
                                              2 COMMON     4     2      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4     698
                                             10 BANK0      4     0      4
                   _UART_SetBaudRate
 ---------------------------------------------------------------------------------
 (2) _UART_SetBaudRate                                    10     6      4     623
                                              0 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _LCD_8bit_test                                       10    10      0   80120
                                             69 BANK0     10    10      0
                           _DELAY_ms
                  _LCD_DisplayString
                           _LCD_Init
                          _LCD_SetUp
                        _UART_Printf
                        _UART_RxChar
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (1) _LCD_4bit_test                                       10    10      0   80120
                                             69 BANK0     10    10      0
                           _DELAY_ms
                  _LCD_DisplayString
                           _LCD_Init
                          _LCD_SetUp
                        _UART_Printf
                        _UART_RxChar
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (2) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_Printf                                         34    20     14    4640
                                             35 BANK0     34    20     14
                        _UART_TxChar
                      _UART_TxNumber
                      _UART_TxString
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     0      2     385
                                              1 COMMON     2     0      2
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxNumber                                       31    26      5    2202
                                              4 BANK0     31    26      5
                        _UART_TxChar
                             ___bmul
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     198
                                              0 BANK0      4     3      1
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCD_SetUp                                           12     2     10    2825
                                              5 COMMON     2     2      0
                                              0 BANK0     10     0     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             3     2      1   45814
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (3) _lcd_Reset                                            0     0      0    7071
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (3) _LCD_Clear                                            0     0      0   24722
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToLine                                         2     2      0   12394
                                             10 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayString                                    2     0      2   24979
                                              0 BANK0      2     0      2
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      2     2      0   24722
                                             11 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        3     3      0   12328
                                              7 COMMON     3     3      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  0     0      0    2753
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     1     1      0   12328
                                             10 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (3) _LCD_CmdWrite                                         3     3      0   12328
                                              7 COMMON     3     3      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (4) _lcd_SendLowerNibble                                  2     2      0    1917
                                              5 COMMON     2     2      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendHigherNibble                                 2     2      0    1917
                                              5 COMMON     2     2      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_SendCmdSignals                                   0     0      0    2753
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_BusyCheck                                        2     2      0    5652
                                              5 COMMON     2     2      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _GPIO_PinWrite                                        5     4      1    1829
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) _GPIO_PinRead                                         5     5      0     206
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _GPIO_PinDirection                                    5     4      1    1193
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2    1477
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _DELAY_us                                             2     0      2     924
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_4bit_test
     _DELAY_ms
       _DELAY_us
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     _LCD_Init
       _DELAY_ms
         _DELAY_us
       _LCD_Clear
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
         _LCD_GoToLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
       _lcd_Reset
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
     _LCD_SetUp
       _GPIO_PinDirection
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
     _UART_RxChar
     _UART_TxString
       _UART_TxChar
   _LCD_8bit_test
     _DELAY_ms
       _DELAY_us
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     _LCD_Init
       _DELAY_ms
         _DELAY_us
       _LCD_Clear
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
         _LCD_GoToLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
       _lcd_Reset
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
     _LCD_SetUp
       _GPIO_PinDirection
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
     _UART_RxChar
     _UART_TxString
       _UART_TxChar
   _UART_Init
     _UART_SetBaudRate
       ___lldiv
   _UART_RxChar
   _UART_TxString
     _UART_TxChar
   _adc_test
     _ADC_GetAdcValue
       _DELAY_us
     _ADC_Init
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
   _eeprom_test
     _EEPROM_ReadByte
     _EEPROM_WriteByte
       _eeprom_write
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
   _gpio_test
     _DELAY_ms
       _DELAY_us
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
     _UART_RxChar
   _keypad_test
     _KEYPAD_GetKey
       _GPIO_PinRead
       _GPIO_PinWrite
       _keypad_WaitForKeyPress
         _DELAY_us
         _GPIO_PinRead
         _GPIO_PinWrite
       _keypad_WaitForKeyRelease
         _DELAY_us
         _GPIO_PinRead
         _GPIO_PinWrite
     _KEYPAD_Init
       _GPIO_PinDirection
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
     _UART_RxChar
   _rtc_test
     _RTC_GetDateTime
       _I2C_Read
         _i2c_Ack
         _i2c_NoAck
         _i2c_WaitForIdle
       _I2C_Start
       _I2C_Stop
       _I2C_Write
         _i2c_WaitForIdle
     _RTC_Init
       _I2C_Init
       _I2C_Start
       _I2C_Stop
       _I2C_Write
         _i2c_WaitForIdle
     _RTC_SetDateTime
       _I2C_Start
       _I2C_Stop
       _I2C_Write
         _i2c_WaitForIdle
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
     _UART_RxChar
   _seg_test
     _DELAY_us
     _UART_Printf
       _UART_TxChar
       _UART_TxNumber
         _UART_TxChar
         ___bmul
           ___lldiv (ARG)
         ___lldiv
       _UART_TxString
         _UART_TxChar
       ___bmul
         ___lldiv (ARG)
     _UART_RxChar
     _UART_TxString
       _UART_TxChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      C      2D       7       56.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      8B      12        0.0%
ABS                  0      0      8B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed Apr 27 13:08:09 2016

                                      pc 0002                           ___bmul@product 0022  
                     __size_of_I2C_Start 0006                              __CFG_CP$OFF 0000  
                       ?_i2c_WaitForIdle 0070                            ?_LCD_CmdWrite 0070  
                     __size_of_I2C_Write 000D                  ?_keypad_WaitForKeyPress 0070  
                                     l22 13E6                                       _BF 04A0  
                                     l59 12FA                                       _GO 00FA  
                                     _RD 0C60                                       _WR 0C61  
                                     fsr 0004                            ?_LCD_GoToLine 0070  
               _keypad_WaitForKeyRelease 0C41                              __CFG_LVP$ON 0000  
                                    l122 03FD                                      l220 12E4  
                                    l214 0006                                      l152 04D6  
                                    l240 128A                                      l208 127C  
                                    l234 12D4                                      l226 1390  
                                    l246 1291                                      l276 0C59  
                                    l470 127F                                      l359 0050  
                                    l720 15A9                                      l289 0BF9  
                                    l715 0BE0                                      l476 12AD  
                                    l662 0156                                      l399 0F94  
                                    l752 143A                                      l677 0E7A  
                                    l686 0E02                                      _GIE 005F  
                                    _PEN 048A                             __CFG_CPD$OFF 0000  
                                    _SEN 0488          EEPROM_WriteByte@v_eepromData_u8 0075  
                                    _R_W 04A2                  __end_of_RTC_SetDateTime 1745  
                                    fsr0 0004                                      indf 0000  
                           __CFG_FOSC$HS 0000   keypad_WaitForKeyRelease@v_keyStatus_u8 0076  
                           ?_KEYPAD_Init 0075                  __end_of_ADC_GetAdcValue 13EF  
                __end_of_LCD_DisplayChar 138B                                     l3100 069B  
                                   l3102 06B0                                     l3030 164B  
                                   l2400 04A1                                     l3120 0715  
                                   l3114 06F6                                     l3034 1689  
                                   l2324 12BE                                     l2332 132F  
                                   l2420 0CD1                                     l2404 04B4  
                                   l3108 06CF                                     l3220 0177  
                                   l2350 0380                                     l2342 034B  
                                   l2422 0CDF                                     l2430 0D14  
                                   l3134 0751                                     l3126 073C  
                                   l3070 0632                                     l3310 01E8  
                                   l2360 03B7                                     l2344 035C  
                                   l2424 0CED                                     l2416 0CB5  
                                   l2408 04C5                                     l3152 07A7  
                                   l3144 077D                                     l3136 0762  
                                   l3160 07E1                                     l3072 0637  
                                   l3232 0E17                                     l3400 0EA9  
                                   l2362 03C8                                     l2354 0393  
                                   l2338 0338                                     l2370 03EC  
                                   l2418 0CC3                                     l2530 151A  
                                   l3146 0790                                     l3090 0674  
                                   l3066 0608                                     l3162 05D3  
                                   l3218 0158                                     l3170 010F  
                                   l3410 0EC7                                     l3402 0EAF  
                                   l2356 03A4                                     l2348 036F  
                                   l2428 0D03                                     l2380 0424  
                                   l2452 0FED                                     l2540 1320  
                                   l3156 07A9                                     l3244 0D9F  
                                   l3324 0B91                                     l3340 175B  
                                   l2620 13A6                                     l3260 0D42  
                                   l3412 0ECD                                     l3404 0EB5  
                                   l2366 03DB                                     l2382 0435  
                                   l2526 1502                                     l3078 0643  
                                   l3158 07DB                                     l2622 13A9  
                                   l3414 0ED3                                     l3406 0EBB  
                                   l2392 046C                                     l2376 0411  
                                   l2456 0FF8                                     l2544 1326  
                                   l2560 17C2                                     l3088 065E  
                                   l3192 0129                                     l2712 0C3D  
                                   l2632 0C46                                     l3344 1787  
                                   l3264 0D4E                                     l3408 0EC1  
                                   l2394 047D                                     l2386 0448  
                                   l2474 14CD                                     l2802 05C5  
                                   l3186 0123                                     l2706 0C28  
                                   l2650 0C75                                     l3290 01B0  
                                   l3418 0ED8                                     l2388 0459  
                                   l2740 137C                                     l2572 17F7  
                                   l2644 0C60                                     l2398 0490  
                                   l2478 14E5                                     l2558 17B2  
                                   l2662 0C88                                     l2910 00F3  
                                   l2568 17EA                                     l2760 04E0  
                                   l2752 1414                                     l2840 16BE  
                                   l2738 1377                                     l2906 00D0  
                                   l2924 02B8                                     l2780 058F  
                                   l2772 052D                                     l2676 0BE6  
                                   l2668 0C9D                                     l2926 02BF  
                                   l2790 0530                                     l2766 051E  
                                   l2694 0C15                                     l2846 16D3  
                                   l2960 003F                                     l2936 02E9  
                                   l2792 05A0                                     l2768 0522  
                                   l2688 0C00                                     l2880 0089  
                                   l2970 13EF                                     l2954 002E  
                                   l2874 0084                                     l2796 05B0  
                                   l2788 059B                                     l2892 00AD  
                                   l2868 006E                                     l2896 00B7  
                                   l2888 009B                                     _ADON 00F8  
                                   STR_1 0822                                     STR_2 0A93  
            __end_of_A_KeyLookUptable_U8 0822                                     STR_3 0972  
                                   STR_4 0A1D                                     STR_5 093D  
                                   STR_6 09F4                                     STR_7 0B23  
                                   STR_8 0B53                                     STR_9 08F6  
                                   u2004 0365                                     u2005 0363  
                                   u2014 0375                                     u2015 0373  
                                   u2104 03E1                                     u2105 03DF  
                                   u2034 0389                                     u2035 0387  
                                   u2115 0402                                     u2044 0399  
                                   u2204 0472                                     u2045 0397  
                                   u2205 0470                                     u2134 041A  
                                   u2135 0418                                     u2064 03AD  
                                   u2224 0486                                     u2144 042A  
                                   u2065 03AB                                     u2225 0484  
                                   u2145 0428                                     u2074 03BD  
                                   u2410 0CFE                                     u2314 0CC9  
                                   u2234 0496                                     u2075 03BB  
                                   u2315 0CC7                                     u2235 0494  
                                   u2420 0CFF                                     u2404 0CF3  
                                   u2164 043E                                     u2500 1589  
                                   u2405 0CF1                                     u2165 043C  
                                   u2094 03D1                                     u2254 04AA  
                                   u2174 044E                                     u2510 158A  
                                   u3150 050F                                     u2095 03CF  
                                   u2255 04A8                                     u2175 044C  
                                   u2344 0CD7                                     u2264 04BA  
                                   u2600 1559                                     u2520 1599  
                                   u3160 0510                                     u3144 04F4  
                                   u2345 0CD5                                     u2265 04B8  
                                   u3145 04F1                                     u2194 0462  
                                   u2610 155A                                     u2530 159A  
                                   u2275 0CA6                                     u2195 0460  
                                   u2284 0CBB                                     u2540 1529  
                                   u2460 1569                                     u2285 0CB9  
                                   u2374 0CE5                                     u2550 152A  
                                   u2470 156A                                     u2375 0CE3  
                                   u3255 13CF                                     u2560 1539  
                                   u2480 1579                                     u3513 1649  
                                   u3425 00D7                                     u2570 153A  
                                   u2490 157A                                     u2635 14DB  
                                   u3523 165A                                     u2580 1549  
                                   u2590 154A                                     u2815 17C4  
                                   u3535 1665                                     u2745 1510  
                                   u2825 17D9                                     u1955 0329  
                                   u2835 17EB                                     u1974 0341  
                                   u1975 033F                                     u1984 0351  
                                   u1985 034F                                     u2795 17B6  
                                   _RCEN 048B                                     _RCIF 0065  
                                   _RSEN 0489                                     _WREN 0C62  
                                   _TXIF 0064                           ??_eeprom_write 0071  
                           __CFG_WRT$OFF 0000                                     _main 0E7B  
                     __size_of_LCD_Clear 000B                         __end_of_I2C_Init 12FA  
                       __end_of_I2C_Read 13AB                                     btemp 007E  
                       __end_of_I2C_Stop 0009                         __end_of_ADC_Init 129C  
                                   ltemp 007E                       __size_of_LCD_SetUp 00D1  
                                   start 0000                                     ttemp 007E  
                                   wtemp 007E                         __end_of_DELAY_ms 1343  
                       __end_of_DELAY_us 12C9                 __size_of_EEPROM_ReadByte 0011  
                      ___bmul@multiplier 0023                            ?_GPIO_PinRead 0070  
                        __end_of_i2c_Ack 128D           __end_of_keypad_WaitForKeyPress 0C41  
                         ??_LCD_CmdWrite 0077                            _KEYPAD_GetKey 005A  
                            LCD_SetUp@D0 0022                              LCD_SetUp@D1 0023  
                            LCD_SetUp@D2 0024                              LCD_SetUp@D3 0025  
                            LCD_SetUp@D4 0026                              LCD_SetUp@D5 0027  
                            LCD_SetUp@D6 0028                              LCD_SetUp@D7 0029  
                            LCD_SetUp@EN 0021                              LCD_SetUp@RS 0076  
                            LCD_SetUp@RW 0020                           ??_LCD_GoToLine 007A  
                        ??_LCD_4bit_test 0065                            _GPIO_PinWrite 03FE  
                       __end_of_LCD_Init 005A                  LCD_CmdWrite@v_lcdCmd_u8 0079  
                                  ?_main 0070                                    _ACKEN 048C  
                                  _ACKDT 048D                                    _EEADR 010D  
                                  STR_10 09F4                                    STR_11 0B23  
                                  STR_12 0B44                                    STR_20 0ADA  
                                  STR_21 0B0E                                    STR_13 08AD  
                                  STR_22 0A45                                    STR_14 09CB  
                                  STR_23 0B62                                    STR_15 0AB8  
                                  STR_16 09A1                                    STR_17 0A6D  
                          __CFG_WDTE$OFF 0000                                    STR_18 0AF7  
                                  STR_19 0B34                                    _CARRY 0018  
                        __end_of___lldiv 1800                                    _RCREG 001A  
                                  _RCSTA 0018                                    _SPBRG 0099  
                                  _PORTA 0005                                    _PORTB 0006  
                                  _PORTC 0007                                    _PORTD 0008  
                                  _PORTE 0009                                    _TRISA 0085  
                                  _TRISB 0086                                    _TRISC 0087  
                                  _TRISD 0088                                    _TRISE 0089  
                                  _TXREG 0019                          ??_LCD_8bit_test 0065  
                                  _TXSTA 0098                       __size_of_UART_Init 0016  
  LCD_DisplayString@ptr_stringPointer_u8 0020                             ?_keypad_test 0070  
                       __end_of_RTC_Init 13CB                        __end_of_I2C_Start 127F  
                      __end_of_I2C_Write 12EC                           __CFG_BOREN$OFF 0000  
                                  pclath 000A                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080             __end_of_lcd_SendHigherNibble 1564  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                           ??_GPIO_PinRead 0070  
                        __initialization 07E8               GPIO_PinWrite@enm_pinNumber 0074  
                         ?_KEYPAD_GetKey 0070                             __end_of_main 0EF5  
                         ?_GPIO_PinWrite 0070                        _GPIO_PinDirection 0325  
                                 ??_main 006F              __size_of_lcd_SendCmdSignals 002D  
                      __end_of_LCD_Clear 12D4                       RTC_SetDateTime@rtc 0071  
                       ?_RTC_SetDateTime 0070                       ?_GPIO_PinDirection 0070  
                      __end_of_LCD_SetUp 0325                         ?_ADC_GetAdcValue 0072  
                                 _ADCON0 001F                                   _ADCON1 009F  
                       ?_LCD_DisplayChar 0070              LCD_DisplayChar@v_lcdData_u8 007C  
                                 _ADRESH 001E                                   _ADRESL 009E  
                                 _EEDATA 010C                       __size_of_i2c_NoAck 0007  
                                 _EECON1 018C                                   _EECON2 018D  
                    ??_GPIO_PinDirection 0071                         __end_of_adc_test 15EA  
                      ?_UART_SetBaudRate 0020                                   _SSPADD 0093  
                                 _TRISC3 043B                                   _TRISC4 043C  
                                 _SSPCON 0014                                   _SSPBUF 0013  
                              ??_i2c_Ack 0070                    lcd_BusyCheck@busyflag 0076  
                     ??_UART_SetBaudRate 0024                             ?_UART_RxChar 0070  
                         __CFG_PWRTE$OFF 0000                             ?_UART_TxChar 0070  
                           ?_UART_Printf 0043                     __size_of_eeprom_test 005F  
                  I2C_Write@v_i2cData_u8 0070                GPIO_PinRead@enm_pinNumber 0074  
                      __end_of_UART_Init 0B82                                   ___bmul 131C  
                              ??___lldiv 0078                __end_of_GPIO_PinDirection 03FE  
                           KEYPAD_Init@i 0021                        ??_EEPROM_ReadByte 0072  
         GPIO_PinDirection@enm_pinNumber 0074                     __end_of_eeprom_write 145F  
               __end_of_EEPROM_WriteByte 12BE                         DELAY_ms@ms_count 0072  
                       __end_of_seg_test 0D8B  UART_TxNumber@v_numOfDigitsToTransmit_u8 0028  
                              ?_I2C_Init 0070                                ?_I2C_Read 0070  
                              ?_I2C_Stop 0070                                ?_ADC_Init 0070  
                      ?_LCD_GoToNextLine 0070                         __end_of_rtc_test 0254  
                              ?_DELAY_ms 0072                                ?_DELAY_us 0070  
            __end_of_lcd_SendLowerNibble 15A4                       ??_LCD_GoToNextLine 007A  
                   __end_of_LCD_CmdWrite 14EF                     __size_of_KEYPAD_Init 0059  
                   __end_of_LCD_GoToLine 136C              lcd_SendLowerNibble@dataByte 0076  
                __end_of__initialization 07FC                                ?_LCD_Init 007C  
                  __end_of_UART_TxNumber 05C9                    __end_of_UART_TxString 1439  
             ??_keypad_WaitForKeyRelease 0075                          ??_KEYPAD_GetKey 0078  
                    ___bmul@multiplicand 0020                          ??_GPIO_PinWrite 0071  
                         __pcstackCOMMON 0070                             __pidataBANK1 12A4  
                  __end_of_lcd_DataWrite 1524                        __end_of_i2c_NoAck 1294  
                              ?_RTC_Init 0070                     _lcd_SendHigherNibble 1524  
                             ??_I2C_Init 0070                               ??_I2C_Read 0070  
                     __size_of_lcd_Reset 004F                               ??_I2C_Stop 0070  
                             ??_ADC_Init 0070             __size_of_lcd_SendDataSignals 002E  
                      eeprom_write@value 0070                               ??_DELAY_ms 0074  
                             ??_DELAY_us 0072                     __end_of_GPIO_PinRead 0D16  
         GPIO_PinWrite@var_portNumber_u8 0073                     eeprom_test@read_char 0068  
               __size_of_RTC_GetDateTime 007F                               __pbssBANK1 00A0  
                  __end_of_lcd_BusyCheck 1000             lcd_SendHigherNibble@dataByte 0076  
           GPIO_PinWrite@var_pinValue_u8 0070                     __size_of_keypad_test 005D  
                             ??_LCD_Init 007D                       __size_of_gpio_test 00A1  
                             __pmaintext 0E7B                                  ?___bmul 0020  
    EEPROM_WriteByte@v_eepromAddress_u16 0073               __size_of_GPIO_PinDirection 00D9  
                             ??_RTC_Init 0071                            seg_test@F1296 00C9  
                  ?_lcd_SendHigherNibble 0070                                ?_adc_test 0070  
                                _GO_DONE 00FA                 __size_of_i2c_WaitForIdle 000B  
                           adc_test@temp 0067                         DELAY_us@us_count 0070  
                                _SSPSTAT 0094                               __stringtab 0800  
                                _i2c_Ack 1286                                _I2C_Start 1279  
                              _I2C_Write 12DF                         KEYPAD_Init@col_0 0078  
                       KEYPAD_Init@col_1 0079                         KEYPAD_Init@col_2 007A  
                       KEYPAD_Init@col_3 007B                                ?_seg_test 0070  
                      __end_of_lcd_Reset 1639                         KEYPAD_Init@row_0 0020  
                       KEYPAD_Init@row_1 0075                         KEYPAD_Init@row_2 0076  
                       KEYPAD_Init@row_3 0077                     __size_of_UART_RxChar 0007  
                  __size_of_eeprom_write 0026                     __size_of_UART_TxChar 0009  
                        __size_of___bmul 0013                                ?_rtc_test 0070  
                   __size_of_UART_Printf 021F                LCD_Init@v_lcdNoOfLines_u8 0020  
                                ___lldiv 17A2       EEPROM_ReadByte@v_eepromAddress_u16 0070  
                  __end_of_LCD_4bit_test 0E03                                  __ptext1 0D16  
                                __ptext2 019A                                  __ptext3 16EB  
                                __ptext4 13AB                                  __ptext5 12EC  
                                __ptext6 0EF5                                  __ptext7 12DF  
                                __ptext8 0003                                  __ptext9 1279  
                             ??_adc_test 0065                        __end_of_gpio_test 019A  
                  __size_of_LCD_CmdWrite 0035                                _LCDConfig 00A0  
                  __size_of_LCD_GoToLine 0015                    __end_of_LCD_8bit_test 0E7B  
                              _LCD_Clear 12C9                           UART_Printf@ptr 0060  
                         UART_Printf@str 0053             KEYPAD_GetKey@v_KeyPressed_u8 0020  
                              _LCD_SetUp 0254                                  clrloop0 129D  
                   end_of_initialization 07FC                           UART_TxNumber@a 0035  
                         UART_TxNumber@i 0042                   I2C_Read@v_ackOption_u8 0071  
           LCD_Init@v_MaxCharsPerLine_u8 007C                            _A_ColsPins_U8 00AE  
                           _eeprom_write 1439                               ?_I2C_Start 0070  
                        _EEPROM_ReadByte 12FA                               ?_I2C_Write 0070  
       __end_of_keypad_WaitForKeyRelease 0CA1                        ??_RTC_GetDateTime 0073  
                             ??_seg_test 007E                          ___lldiv@divisor 0070  
                        ___lldiv@counter 007D           UART_SetBaudRate@v_baudRate_u32 0020  
                             ??_rtc_test 00B9                             __pstringtext 0800  
                 ??_lcd_SendHigherNibble 0075               __end_of_lcd_SendCmdSignals 148C  
                           _LCD_CmdWrite 14BA                                _UART_Init 0B6C  
              __size_of_UART_SetBaudRate 0059                             _LCD_GoToLine 1357  
       ADC_GetAdcValue@var_adcChannel_u8 0075                    __size_of_GPIO_PinRead 0075  
                      ?_EEPROM_WriteByte 0073                       ??_EEPROM_WriteByte 0076  
                             ?_LCD_Clear 0070                        __size_of_I2C_Init 000E  
                      __size_of_I2C_Read 0020                        __size_of_I2C_Stop 0006  
                             ?_LCD_SetUp 0020                        __size_of_ADC_Init 0008  
                      __size_of_DELAY_ms 0014                        __size_of_DELAY_us 000B  
               __size_of_RTC_SetDateTime 005A                        ??_i2c_WaitForIdle 0070  
               ??_keypad_WaitForKeyPress 0075                            ??_eeprom_test 0065  
               __size_of_ADC_GetAdcValue 0024                 __size_of_LCD_DisplayChar 001F  
                      __size_of_LCD_Init 0051                __size_of_LCD_GoToNextLine 0014  
                            rtc_test@rtc 0065                      _lcd_SendDataSignals 148C  
        UART_TxNumber@v_numericSystem_u8 0041       GPIO_PinDirection@var_portNumber_u8 0073  
                           _GPIO_PinRead 0CA1                           __end_of___bmul 132F  
                             ?_UART_Init 002A                                _i2c_NoAck 128D  
               _ARR_LcdLineNumAddress_U8 00C5                        __size_of_RTC_Init 0020  
                    start_initialization 07E8                     ?_lcd_SendDataSignals 0070  
                 _v_LcdTrackCursorPos_U8 00B7                            ??_KEYPAD_Init 007C  
                __end_of_EEPROM_ReadByte 130B                  keypad_WaitForKeyPress@i 0077  
              eeprom_test@eeprom_address 0069                               gpio_test@i 0067  
          GPIO_PinRead@var_portNumber_u8 0072                              ??_I2C_Start 0070  
           __size_of_lcd_SendLowerNibble 0040                              ??_I2C_Write 0070  
        GPIO_PinDirection@var_pinDirn_u8 0070                    __end_of_KEYPAD_GetKey 00F9  
                               ??___bmul 0021                               init_fetch0 130B  
                  __end_of_GPIO_PinWrite 04D7                      __end_of_eeprom_test 0BE1  
                            __pdataBANK1 00C5                        _UART_TxNumber$486 003F  
                             ?_i2c_NoAck 0070     keypad_WaitForKeyPress@v_keyStatus_u8 0076  
      __size_of_keypad_WaitForKeyRelease 0060                    ??_lcd_SendDataSignals 0075  
                   _v_LcdTrackLineNum_U8 00B8                   __size_of_UART_TxNumber 00F2  
              ?_keypad_WaitForKeyRelease 0070                        __size_of_adc_test 0046  
                    _A_KeyLookUptable_U8 0812                                ___latbits 0002  
                  lcd_DataWrite@dataByte 0079                   __size_of_UART_TxString 0025  
                          __pcstackBANK0 0020                            __pcstackBANK1 00B9  
                            ??_LCD_Clear 007C                              ??_LCD_SetUp 0075  
                          ??_keypad_test 0065                   __size_of_lcd_DataWrite 0035  
                       eeprom_write@addr 0072                      __end_of_KEYPAD_Init 16EB  
                               ?_i2c_Ack 0070          __size_of_keypad_WaitForKeyPress 0060  
            LCD_GoToLine@v_lineNumber_u8 007B                        ??_RTC_SetDateTime 0071  
                      __size_of_seg_test 0075                                 ?___lldiv 0070  
                      ??_ADC_GetAdcValue 0074                                _lcd_Reset 15EA  
                      ??_LCD_DisplayChar 007B                              ??_UART_Init 007E  
                       _UART_SetBaudRate 1639                        __size_of_rtc_test 00BA  
                   I2C_Read@v_i2cData_u8 0072                              adc_test@pot 006B  
                 __size_of_lcd_BusyCheck 008C                                 _I2C_Init 12EC  
                               _I2C_Read 138B                                 _I2C_Stop 0003  
                               _ADC_Init 1294                        _LCD_DisplayString 13EF  
                              _gpio_test 00F9                                 _DELAY_ms 132F  
                               _DELAY_us 12BE                          _RTC_GetDateTime 0EF5  
                     ?_LCD_DisplayString 0020                         ?_EEPROM_ReadByte 0070  
                              _mm_option 00B6                            UART_Printf@ch 0062  
                               _LCD_Init 0009                      ??_LCD_DisplayString 007D  
                    __end_of_keypad_test 17A2                                clear_ram0 129C  
                          ??_UART_RxChar 0070                              _eeprom_test 0B82  
                          ??_UART_TxChar 0070                            _UART_TxNumber 04D7  
                       _LCD_GoToNextLine 1343                            ??_UART_Printf 0051  
                          _UART_TxString 1414                            adc_test@light 0069  
                UART_Init@v_baudRate_u32 002A                               ?_lcd_Reset 0070  
                          _lcd_DataWrite 14EF                  UART_TxString@ptr_string 0071  
                  eeprom_test@write_char 006A                                 _RTC_Init 13AB  
               GPIO_PinRead@returnStatus 0073                              __stringbase 0812  
                          _A_RowsPins_U8 00B2                              ??_i2c_NoAck 0070  
                 _keypad_WaitForKeyPress 0BE1                __end_of_LCD_DisplayString 1414  
                        _i2c_WaitForIdle 12D4                               ?_gpio_test 0070  
                            _KEYPAD_Init 1692                       _lcd_SendCmdSignals 145F  
                          _lcd_BusyCheck 0F74                __size_of_EEPROM_WriteByte 0009  
                    ?_lcd_SendCmdSignals 0070                UART_TxNumber@v_number_u32 0024  
                         ?_UART_TxNumber 0024                   __size_of_LCD_4bit_test 0078  
                       __size_of_i2c_Ack 0007                           ?_UART_TxString 0071  
               UART_TxChar@v_uartData_u8 0070                   __size_of_LCD_8bit_test 0078  
                         ?_lcd_DataWrite 0070                      __end_of_UART_RxChar 1286  
                    __end_of_UART_TxChar 12B5                         __size_of___lldiv 005E  
                    __end_of_UART_Printf 07E8                       __end_of__stringtab 0812  
                   ??_lcd_SendCmdSignals 0075            __size_of_lcd_SendHigherNibble 0040  
                               _adc_test 15A4                  __end_of_RTC_GetDateTime 0F74  
                    _lcd_SendLowerNibble 1564                           KEYPAD_GetKey@i 0022  
                         KEYPAD_GetKey@j 0021                                 __ptext10 138B  
                               __ptext11 12D4                                 __ptext20 0B82  
                               __ptext12 128D                                 __ptext21 12B5  
                               __ptext13 1286                                 __ptext30 0D8B  
                               __ptext22 1439                                 __ptext14 1745  
                               __ptext31 127F                                 __ptext23 12FA  
                               __ptext15 1692                                 __ptext40 15EA  
                               __ptext32 05C9                                 __ptext24 15A4  
                               __ptext16 005A                                 __ptext41 12C9  
                               __ptext33 1414                                 __ptext25 1294  
                               __ptext17 0C41                                 __ptext50 1524  
                               __ptext42 1357                                 __ptext34 04D7  
                               __ptext26 13CB                                 __ptext18 0BE1  
                               __ptext51 145F                                 __ptext43 13EF  
                               __ptext35 17A2                                 __ptext27 0B6C  
                               __ptext19 00F9                                 __ptext52 0F74  
                               __ptext44 136C                                 __ptext36 131C  
                               __ptext28 1639                                 __ptext53 03FE  
                               __ptext45 14EF                                 __ptext37 12AC  
                               __ptext29 0E03                                 __ptext54 0CA1  
                               __ptext46 148C                                 __ptext38 0254  
                               __ptext55 0325                                 __ptext47 1343  
                               __ptext39 0009                                 __ptext56 132F  
                               __ptext48 14BA                                 __ptext57 12BE  
                               __ptext49 1564                              _keypad_test 1745  
                         ?_lcd_BusyCheck 0070                            __size_of_main 007A  
                   ?_lcd_SendLowerNibble 0070                                 _seg_test 0D16  
                               _rtc_test 019A                          UART_Printf@argp 0064  
                __end_of_i2c_WaitForIdle 12DF                              ??_lcd_Reset 0077  
               UART_SetBaudRate@RegValue 0029                            _LCD_4bit_test 0D8B  
             __size_of_LCD_DisplayString 0025                              ??_gpio_test 0065  
                               init_ram0 130F                       RTC_GetDateTime@rtc 0074  
                          _LCD_8bit_test 0E03                keypad_WaitForKeyRelease@i 0077  
                        _RTC_SetDateTime 16EB                          ??_UART_TxNumber 0029  
               __end_of_UART_SetBaudRate 1692                          _ADC_GetAdcValue 13CB  
                        ??_UART_TxString 0073                    ??_lcd_SendLowerNibble 0075  
                       ___lldiv@dividend 0074                          _LCD_DisplayChar 136C  
                            _UART_RxChar 127F                                stringcode 080A  
                            _UART_TxChar 12AC                              _UART_Printf 05C9  
                        ??_lcd_DataWrite 0077              __end_of_lcd_SendDataSignals 14BA  
                         ?_LCD_4bit_test 0070                         ?_RTC_GetDateTime 0070  
                       ___lldiv@quotient 0079                 __end_of_LCD_GoToNextLine 1357  
                               stringtab 0800                           ?_LCD_8bit_test 0070  
                        ??_lcd_BusyCheck 0075                   __size_of_KEYPAD_GetKey 009F  
                 __size_of_GPIO_PinWrite 00D9    UART_Printf@v_numOfDigitsToTransmit_u8 0063  
                     UART_Printf@argList 0043                         _EEPROM_WriteByte 12B5  
                          ?_eeprom_write 0070                         seg_test@seg_code 0065  
                           ?_eeprom_test 0070                           keypad_test@key 006C  
                   UART_Printf@v_num_s16 0058                     UART_Printf@v_num_s32 0054  
                   UART_Printf@v_num_u16 005E                     UART_Printf@v_num_u32 005A  
