

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Feb 20 15:54:38 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  0088                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0093                     	;# 
   214  0094                     	;# 
   215  0098                     	;# 
   216  0099                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  009F                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227                           
   228                           	psect	idataBANK0
   229  0990                     __pidataBANK0:	
   230                           
   231                           ;initializer for _ARR_LcdLineNumAddress_U8
   232  0990  3480               	retlw	128
   233  0991  34C0               	retlw	192
   234  0992  3490               	retlw	144
   235  0993  34D0               	retlw	208
   236  0005                     _PORTA	set	5
   237  0006                     _PORTB	set	6
   238  0007                     _PORTC	set	7
   239  0008                     _PORTD	set	8
   240  0009                     _PORTE	set	9
   241  001A                     _RCREG	set	26
   242  0018                     _RCSTA	set	24
   243  0019                     _TXREG	set	25
   244  0065                     _RCIF	set	101
   245  0064                     _TXIF	set	100
   246  0099                     _SPBRG	set	153
   247  0085                     _TRISA	set	133
   248  0086                     _TRISB	set	134
   249  0087                     _TRISC	set	135
   250  0088                     _TRISD	set	136
   251  0089                     _TRISE	set	137
   252  0098                     _TXSTA	set	152
   253                           
   254                           	psect	strings
   255  0800                     __pstrings:	
   256  0800                     stringtab:	
   257  0800                     __stringtab:	
   258                           
   259                           ;	String table - string pointers are 1 byte each
   260  0800  1BFF               	btfsc	btemp+1,7
   261  0801  280A               	ljmp	stringcode
   262  0802  1383               	bcf	3,7
   263  0803  187F               	btfsc	btemp+1,0
   264  0804  1783               	bsf	3,7
   265  0805  0800               	movf	0,w
   266  0806  0A84               	incf	4,f
   267  0807  1903               	skipnz
   268  0808  0AFF               	incf	btemp+1,f
   269  0809  0008               	return
   270  080A                     stringcode:	
   271  080A                     stringdir:	
   272  080A  3008               	movlw	high stringdir
   273  080B  008A               	movwf	10
   274  080C  0804               	movf	4,w
   275  080D  0A84               	incf	4,f
   276  080E  0782               	addwf	2,f
   277  080F                     __stringbase:	
   278  080F  3400               	retlw	0
   279  0810                     __end_of__stringtab:	
   280  0810                     STR_2:	
   281  0810  3452               	retlw	82	;'R'
   282  0811  3465               	retlw	101	;'e'
   283  0812  3463               	retlw	99	;'c'
   284  0813  3465               	retlw	101	;'e'
   285  0814  3469               	retlw	105	;'i'
   286  0815  3476               	retlw	118	;'v'
   287  0816  3465               	retlw	101	;'e'
   288  0817  3464               	retlw	100	;'d'
   289  0818  3420               	retlw	32	;' '
   290  0819  3453               	retlw	83	;'S'
   291  081A  3474               	retlw	116	;'t'
   292  081B  3472               	retlw	114	;'r'
   293  081C  3469               	retlw	105	;'i'
   294  081D  346E               	retlw	110	;'n'
   295  081E  3467               	retlw	103	;'g'
   296  081F  343A               	retlw	58	;':'
   297  0820  3425               	retlw	37	;'%'
   298  0821  3473               	retlw	115	;'s'
   299  0822  3420               	retlw	32	;' '
   300  0823  3420               	retlw	32	;' '
   301  0824  3420               	retlw	32	;' '
   302  0825  3473               	retlw	115	;'s'
   303  0826  3469               	retlw	105	;'i'
   304  0827  347A               	retlw	122	;'z'
   305  0828  3465               	retlw	101	;'e'
   306  0829  343D               	retlw	61	;'='
   307  082A  3425               	retlw	37	;'%'
   308  082B  3432               	retlw	50	;'2'
   309  082C  3464               	retlw	100	;'d'
   310  082D  340A               	retlw	10
   311  082E  340D               	retlw	13
   312  082F  3400               	retlw	0
   313  0830                     STR_1:	
   314  0830  3473               	retlw	115	;'s'
   315  0831  3465               	retlw	101	;'e'
   316  0832  346E               	retlw	110	;'n'
   317  0833  3464               	retlw	100	;'d'
   318  0834  3420               	retlw	32	;' '
   319  0835  3464               	retlw	100	;'d'
   320  0836  3461               	retlw	97	;'a'
   321  0837  3474               	retlw	116	;'t'
   322  0838  3461               	retlw	97	;'a'
   323  0839  3420               	retlw	32	;' '
   324  083A  3466               	retlw	102	;'f'
   325  083B  3472               	retlw	114	;'r'
   326  083C  346F               	retlw	111	;'o'
   327  083D  346D               	retlw	109	;'m'
   328  083E  3420               	retlw	32	;' '
   329  083F  3420               	retlw	32	;' '
   330  0840  3473               	retlw	115	;'s'
   331  0841  3465               	retlw	101	;'e'
   332  0842  3472               	retlw	114	;'r'
   333  0843  3469               	retlw	105	;'i'
   334  0844  3461               	retlw	97	;'a'
   335  0845  346C               	retlw	108	;'l'
   336  0846  3420               	retlw	32	;' '
   337  0847  3474               	retlw	116	;'t'
   338  0848  3465               	retlw	101	;'e'
   339  0849  3472               	retlw	114	;'r'
   340  084A  346D               	retlw	109	;'m'
   341  084B  3469               	retlw	105	;'i'
   342  084C  346E               	retlw	110	;'n'
   343  084D  3461               	retlw	97	;'a'
   344  084E  346C               	retlw	108	;'l'
   345  084F  3400               	retlw	0
   346  0850                     STR_3:	
   347  0850  3473               	retlw	115	;'s'
   348  0851  3474               	retlw	116	;'t'
   349  0852  3472               	retlw	114	;'r'
   350  0853  343A               	retlw	58	;':'
   351  0854  3425               	retlw	37	;'%'
   352  0855  3473               	retlw	115	;'s'
   353  0856  3420               	retlw	32	;' '
   354  0857  3473               	retlw	115	;'s'
   355  0858  3469               	retlw	105	;'i'
   356  0859  347A               	retlw	122	;'z'
   357  085A  3465               	retlw	101	;'e'
   358  085B  343D               	retlw	61	;'='
   359  085C  3425               	retlw	37	;'%'
   360  085D  3432               	retlw	50	;'2'
   361  085E  3464               	retlw	100	;'d'
   362  085F  3400               	retlw	0
   363                           
   364                           ; #config settings
   365  0000                     
   366                           	psect	cinit
   367  07D2                     start_initialization:	
   368  07D2                     __initialization:	
   369                           
   370                           ; Clear objects allocated to BANK0
   371  07D2  01E8               	clrf	__pbssBANK0& (0+127)
   372  07D3  01E9               	clrf	(__pbssBANK0+1)& (0+127)
   373                           
   374                           ; Clear objects allocated to BANK1
   375  07D4  1683               	bsf	3,5	;RP0=1, select bank1
   376  07D5  1303               	bcf	3,6	;RP1=0, select bank1
   377  07D6  01D4               	clrf	__pbssBANK1& (0+127)
   378  07D7  01D5               	clrf	(__pbssBANK1+1)& (0+127)
   379  07D8  01D6               	clrf	(__pbssBANK1+2)& (0+127)
   380  07D9  01D7               	clrf	(__pbssBANK1+3)& (0+127)
   381  07DA  01D8               	clrf	(__pbssBANK1+4)& (0+127)
   382  07DB  01D9               	clrf	(__pbssBANK1+5)& (0+127)
   383  07DC  01DA               	clrf	(__pbssBANK1+6)& (0+127)
   384  07DD  01DB               	clrf	(__pbssBANK1+7)& (0+127)
   385  07DE  01DC               	clrf	(__pbssBANK1+8)& (0+127)
   386  07DF  01DD               	clrf	(__pbssBANK1+9)& (0+127)
   387  07E0  01DE               	clrf	(__pbssBANK1+10)& (0+127)
   388  07E1  01DF               	clrf	(__pbssBANK1+11)& (0+127)
   389  07E2  01E0               	clrf	(__pbssBANK1+12)& (0+127)
   390  07E3  01E1               	clrf	(__pbssBANK1+13)& (0+127)
   391                           
   392                           ; Initialize objects allocated to BANK0
   393  07E4  1283               	bcf	3,5	;RP0=0, select bank0
   394  07E5  1303               	bcf	3,6	;RP1=0, select bank0
   395  07E6  120A  158A  2190  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   396  07EB  00E4               	movwf	__pdataBANK0& (0+127)
   397  07EC  120A  158A  2191  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   398  07F1  00E5               	movwf	(__pdataBANK0+1)& (0+127)
   399  07F2  120A  158A  2192  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   400  07F7  00E6               	movwf	(__pdataBANK0+2)& (0+127)
   401  07F8  120A  158A  2193   	fcall	__pidataBANK0+3	;fetch initializer
   402  07FB  00E7               	movwf	(__pdataBANK0+3)& (0+127)
   403  07FC                     end_of_initialization:	
   404                           ;End of C runtime variable initialization code
   405                           
   406  07FC                     __end_of__initialization:	
   407  07FC  0183               	clrf	3
   408  07FD  120A  118A  2826   	ljmp	_main	;jump to C main() function
   409                           
   410                           	psect	bssBANK0
   411  0068                     __pbssBANK0:	
   412  0068                     _v_LcdTrackCursorPos_U8:	
   413  0068                     	ds	1
   414  0069                     _v_LcdTrackLineNum_U8:	
   415  0069                     	ds	1
   416                           
   417                           	psect	dataBANK0
   418  0064                     __pdataBANK0:	
   419  0064                     _ARR_LcdLineNumAddress_U8:	
   420  0064                     	ds	4
   421                           
   422                           	psect	bssBANK1
   423  00D4                     __pbssBANK1:	
   424  00D4                     _LCDConfig:	
   425  00D4                     	ds	14
   426                           
   427                           	psect	cstackBANK1
   428  00A0                     __pcstackBANK1:	
   429  00A0                     main@str:	
   430                           
   431                           ; 50 bytes @ 0x0
   432  00A0                     	ds	50
   433  00D2                     main@len:	
   434                           
   435                           ; 2 bytes @ 0x32
   436  00D2                     	ds	2
   437                           
   438                           	psect	cstackCOMMON
   439  0070                     __pcstackCOMMON:	
   440  0070                     ?_GPIO_PinDirection:	
   441  0070                     ?_LCD_CmdWrite:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_lcd_Reset:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_LCD_Clear:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_LCD_GoToLine:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_lcd_BusyCheck:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_lcd_SendLowerNibble:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_lcd_SendHigherNibble:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?_lcd_SendCmdSignals:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_lcd_DataWrite:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_lcd_SendDataSignals:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_GPIO_PinWrite:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_DELAY_us:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_GPIO_PinRead:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ??_GPIO_PinRead:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_UART_RxChar:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ??_UART_RxChar:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_UART_TxChar:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ??_UART_TxChar:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_UART_TxString:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_UART_RxString:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_LCD_GoToNextLine:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_LCD_DisplayChar:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_main:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?___lldiv:	
   511                           ; 2 bytes @ 0x0
   512                           
   513  0070                     UART_TxChar@var_uartData_u8:	
   514                           ; 4 bytes @ 0x0
   515                           
   516  0070                     GPIO_PinDirection@var_pinDirn_u8:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     GPIO_PinWrite@var_pinValue_u8:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     DELAY_us@us_count:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ___lldiv@divisor:	
   526                           ; 2 bytes @ 0x0
   527                           
   528                           
   529                           ; 4 bytes @ 0x0
   530  0070                     	ds	1
   531  0071                     ??_GPIO_PinDirection:	
   532  0071                     ??_GPIO_PinWrite:	
   533                           ; 1 bytes @ 0x1
   534                           
   535  0071                     ??_UART_TxString:	
   536                           ; 1 bytes @ 0x1
   537                           
   538  0071                     ??_UART_RxString:	
   539                           ; 1 bytes @ 0x1
   540                           
   541                           
   542                           ; 1 bytes @ 0x1
   543  0071                     	ds	1
   544  0072                     ?_DELAY_ms:	
   545  0072                     ??_DELAY_us:	
   546                           ; 1 bytes @ 0x2
   547                           
   548  0072                     UART_TxString@ptr_string:	
   549                           ; 1 bytes @ 0x2
   550                           
   551  0072                     GPIO_PinRead@var_portNumber_u8:	
   552                           ; 1 bytes @ 0x2
   553                           
   554  0072                     DELAY_ms@ms_count:	
   555                           ; 1 bytes @ 0x2
   556                           
   557                           
   558                           ; 2 bytes @ 0x2
   559  0072                     	ds	1
   560  0073                     UART_RxString@ptr_string:	
   561  0073                     GPIO_PinDirection@var_portNumber_u8:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0073                     GPIO_PinWrite@var_portNumber_u8:	
   565                           ; 1 bytes @ 0x3
   566                           
   567  0073                     GPIO_PinRead@returnStatus:	
   568                           ; 1 bytes @ 0x3
   569                           
   570                           
   571                           ; 1 bytes @ 0x3
   572  0073                     	ds	1
   573  0074                     ??_DELAY_ms:	
   574  0074                     UART_RxString@len:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     GPIO_PinDirection@enm_pinNumber:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     GPIO_PinWrite@enm_pinNumber:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     GPIO_PinRead@enm_pinNumber:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ___lldiv@dividend:	
   587                           ; 1 bytes @ 0x4
   588                           
   589                           
   590                           ; 4 bytes @ 0x4
   591  0074                     	ds	1
   592  0075                     ??_lcd_BusyCheck:	
   593  0075                     ??_lcd_SendLowerNibble:	
   594                           ; 1 bytes @ 0x5
   595                           
   596  0075                     ??_lcd_SendHigherNibble:	
   597                           ; 1 bytes @ 0x5
   598                           
   599  0075                     ??_lcd_SendCmdSignals:	
   600                           ; 1 bytes @ 0x5
   601                           
   602  0075                     ??_lcd_SendDataSignals:	
   603                           ; 1 bytes @ 0x5
   604                           
   605  0075                     ??_LCD_SetUp:	
   606                           ; 1 bytes @ 0x5
   607                           
   608  0075                     UART_RxString@ch:	
   609                           ; 1 bytes @ 0x5
   610                           
   611                           
   612                           ; 1 bytes @ 0x5
   613  0075                     	ds	1
   614  0076                     LCD_SetUp@RS:	
   615  0076                     lcd_BusyCheck@busyflag:	
   616                           ; 1 bytes @ 0x6
   617                           
   618  0076                     lcd_SendHigherNibble@dataByte:	
   619                           ; 1 bytes @ 0x6
   620                           
   621  0076                     lcd_SendLowerNibble@dataByte:	
   622                           ; 1 bytes @ 0x6
   623                           
   624                           
   625                           ; 1 bytes @ 0x6
   626  0076                     	ds	1
   627  0077                     ??_LCD_CmdWrite:	
   628  0077                     ??_lcd_Reset:	
   629                           ; 1 bytes @ 0x7
   630                           
   631  0077                     ??_lcd_DataWrite:	
   632                           ; 1 bytes @ 0x7
   633                           
   634                           
   635                           ; 1 bytes @ 0x7
   636  0077                     	ds	1
   637  0078                     ??___lldiv:	
   638                           
   639                           ; 1 bytes @ 0x8
   640  0078                     	ds	1
   641  0079                     LCD_CmdWrite@v_lcdCmd_u8:	
   642  0079                     lcd_DataWrite@dataByte:	
   643                           ; 1 bytes @ 0x9
   644                           
   645  0079                     ___lldiv@quotient:	
   646                           ; 1 bytes @ 0x9
   647                           
   648                           
   649                           ; 4 bytes @ 0x9
   650  0079                     	ds	1
   651  007A                     ??_LCD_GoToLine:	
   652  007A                     ??_LCD_GoToNextLine:	
   653                           ; 1 bytes @ 0xA
   654                           
   655                           
   656                           ; 1 bytes @ 0xA
   657  007A                     	ds	1
   658  007B                     ??_LCD_DisplayChar:	
   659  007B                     LCD_GoToLine@v_lineNumber_u8:	
   660                           ; 1 bytes @ 0xB
   661                           
   662                           
   663                           ; 1 bytes @ 0xB
   664  007B                     	ds	1
   665  007C                     ??_LCD_Clear:	
   666  007C                     ?_LCD_Init:	
   667                           ; 1 bytes @ 0xC
   668                           
   669  007C                     LCD_Init@v_MaxCharsPerLine_u8:	
   670                           ; 1 bytes @ 0xC
   671                           
   672  007C                     LCD_DisplayChar@v_lcdData_u8:	
   673                           ; 1 bytes @ 0xC
   674                           
   675                           
   676                           ; 1 bytes @ 0xC
   677  007C                     	ds	1
   678  007D                     ??_LCD_Init:	
   679  007D                     ??_LCD_DisplayString:	
   680                           ; 1 bytes @ 0xD
   681                           
   682  007D                     ___lldiv@counter:	
   683                           ; 1 bytes @ 0xD
   684                           
   685                           
   686                           ; 1 bytes @ 0xD
   687  007D                     	ds	1
   688  007E                     ??_UART_Init:	
   689                           
   690                           	psect	cstackBANK0
   691  0020                     __pcstackBANK0:	
   692                           ; 1 bytes @ 0xE
   693                           
   694  0020                     ?_UART_SetBaudRate:	
   695  0020                     ?_LCD_SetUp:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0020                     ?_LCD_DisplayString:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0020                     ?___bmul:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0020                     LCD_SetUp@RW:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0020                     LCD_Init@v_lcdNoOfLines_u8:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0020                     ___bmul@multiplicand:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0020                     LCD_DisplayString@ptr_stringPointer_u8:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0020                     UART_SetBaudRate@var_baudRate_u32:	
   717                           ; 2 bytes @ 0x0
   718                           
   719                           
   720                           ; 4 bytes @ 0x0
   721  0020                     	ds	1
   722  0021                     ??___bmul:	
   723  0021                     LCD_SetUp@EN:	
   724                           ; 1 bytes @ 0x1
   725                           
   726                           
   727                           ; 1 bytes @ 0x1
   728  0021                     	ds	1
   729  0022                     LCD_SetUp@D0:	
   730  0022                     ___bmul@product:	
   731                           ; 1 bytes @ 0x2
   732                           
   733                           
   734                           ; 1 bytes @ 0x2
   735  0022                     	ds	1
   736  0023                     LCD_SetUp@D1:	
   737  0023                     ___bmul@multiplier:	
   738                           ; 1 bytes @ 0x3
   739                           
   740                           
   741                           ; 1 bytes @ 0x3
   742  0023                     	ds	1
   743  0024                     ??_UART_SetBaudRate:	
   744  0024                     ?_UART_TxNumber:	
   745                           ; 1 bytes @ 0x4
   746                           
   747  0024                     ?_LCD_DisplayNumber:	
   748                           ; 1 bytes @ 0x4
   749                           
   750  0024                     LCD_SetUp@D2:	
   751                           ; 1 bytes @ 0x4
   752                           
   753  0024                     UART_TxNumber@v_number_u32:	
   754                           ; 1 bytes @ 0x4
   755                           
   756  0024                     LCD_DisplayNumber@v_number_u32:	
   757                           ; 4 bytes @ 0x4
   758                           
   759                           
   760                           ; 4 bytes @ 0x4
   761  0024                     	ds	1
   762  0025                     LCD_SetUp@D3:	
   763                           
   764                           ; 1 bytes @ 0x5
   765  0025                     	ds	1
   766  0026                     LCD_SetUp@D4:	
   767                           
   768                           ; 1 bytes @ 0x6
   769  0026                     	ds	1
   770  0027                     LCD_SetUp@D5:	
   771                           
   772                           ; 1 bytes @ 0x7
   773  0027                     	ds	1
   774  0028                     UART_TxNumber@v_numOfDigitsToTransmit_u8:	
   775  0028                     LCD_SetUp@D6:	
   776                           ; 1 bytes @ 0x8
   777                           
   778  0028                     LCD_DisplayNumber@v_numOfDigitsToDisplay_u8:	
   779                           ; 1 bytes @ 0x8
   780                           
   781                           
   782                           ; 1 bytes @ 0x8
   783  0028                     	ds	1
   784  0029                     ??_UART_TxNumber:	
   785  0029                     ??_LCD_DisplayNumber:	
   786                           ; 1 bytes @ 0x9
   787                           
   788  0029                     LCD_SetUp@D7:	
   789                           ; 1 bytes @ 0x9
   790                           
   791                           
   792                           ; 1 bytes @ 0x9
   793  0029                     	ds	3
   794  002C                     UART_SetBaudRate@RegValue:	
   795                           
   796                           ; 4 bytes @ 0xC
   797  002C                     	ds	4
   798  0030                     ?_UART_Init:	
   799  0030                     UART_Init@var_baudRate_u32:	
   800                           ; 1 bytes @ 0x10
   801                           
   802                           
   803                           ; 4 bytes @ 0x10
   804  0030                     	ds	5
   805  0035                     UART_TxNumber@a:	
   806  0035                     LCD_DisplayNumber@a:	
   807                           ; 10 bytes @ 0x15
   808                           
   809                           
   810                           ; 10 bytes @ 0x15
   811  0035                     	ds	10
   812  003F                     _UART_TxNumber$63:	
   813  003F                     _LCD_DisplayNumber$268:	
   814                           ; 2 bytes @ 0x1F
   815                           
   816                           
   817                           ; 2 bytes @ 0x1F
   818  003F                     	ds	2
   819  0041                     UART_TxNumber@v_numericSystem_u8:	
   820  0041                     LCD_DisplayNumber@v_numericSystem_u8:	
   821                           ; 1 bytes @ 0x21
   822                           
   823                           
   824                           ; 1 bytes @ 0x21
   825  0041                     	ds	1
   826  0042                     UART_TxNumber@i:	
   827  0042                     LCD_DisplayNumber@i:	
   828                           ; 1 bytes @ 0x22
   829                           
   830                           
   831                           ; 1 bytes @ 0x22
   832  0042                     	ds	1
   833  0043                     ?_UART_Printf:	
   834  0043                     ?_LCD_Printf:	
   835                           ; 1 bytes @ 0x23
   836                           
   837                           
   838                           ; 1 bytes @ 0x23
   839  0043                     	ds	3
   840  0046                     ??_UART_Printf:	
   841  0046                     ??_LCD_Printf:	
   842                           ; 1 bytes @ 0x26
   843                           
   844                           
   845                           ; 1 bytes @ 0x26
   846  0046                     	ds	2
   847  0048                     UART_Printf@str:	
   848  0048                     LCD_Printf@str:	
   849                           ; 1 bytes @ 0x28
   850                           
   851                           
   852                           ; 1 bytes @ 0x28
   853  0048                     	ds	1
   854  0049                     UART_Printf@argList:	
   855  0049                     LCD_Printf@argList:	
   856                           ; 1 bytes @ 0x29
   857                           
   858                           
   859                           ; 1 bytes @ 0x29
   860  0049                     	ds	1
   861  004A                     UART_Printf@v_num_s32:	
   862  004A                     LCD_Printf@v_num_s32:	
   863                           ; 4 bytes @ 0x2A
   864                           
   865                           
   866                           ; 4 bytes @ 0x2A
   867  004A                     	ds	4
   868  004E                     UART_Printf@v_num_s16:	
   869  004E                     LCD_Printf@v_num_s16:	
   870                           ; 2 bytes @ 0x2E
   871                           
   872                           
   873                           ; 2 bytes @ 0x2E
   874  004E                     	ds	2
   875  0050                     UART_Printf@v_num_u32:	
   876  0050                     LCD_Printf@v_num_u32:	
   877                           ; 4 bytes @ 0x30
   878                           
   879                           
   880                           ; 4 bytes @ 0x30
   881  0050                     	ds	4
   882  0054                     UART_Printf@v_num_u16:	
   883  0054                     LCD_Printf@v_num_u16:	
   884                           ; 2 bytes @ 0x34
   885                           
   886                           
   887                           ; 2 bytes @ 0x34
   888  0054                     	ds	2
   889  0056                     UART_Printf@ptr:	
   890  0056                     LCD_Printf@ptr:	
   891                           ; 1 bytes @ 0x36
   892                           
   893                           
   894                           ; 1 bytes @ 0x36
   895  0056                     	ds	1
   896  0057                     UART_Printf@ch:	
   897  0057                     LCD_Printf@ch:	
   898                           ; 1 bytes @ 0x37
   899                           
   900                           
   901                           ; 1 bytes @ 0x37
   902  0057                     	ds	1
   903  0058                     UART_Printf@v_numOfDigitsToTransmit_u8:	
   904  0058                     LCD_Printf@v_numOfDigitsToDisp_u8:	
   905                           ; 1 bytes @ 0x38
   906                           
   907                           
   908                           ; 1 bytes @ 0x38
   909  0058                     	ds	1
   910  0059                     UART_Printf@argp:	
   911  0059                     LCD_Printf@argp:	
   912                           ; 1 bytes @ 0x39
   913                           
   914                           
   915                           ; 1 bytes @ 0x39
   916  0059                     	ds	1
   917  005A                     ??_main:	
   918                           
   919                           ; 1 bytes @ 0x3A
   920  005A                     	ds	10
   921                           
   922                           	psect	maintext
   923  0026                     __pmaintext:	
   924 ;;
   925 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
   926 ;;
   927 ;; *************** function _main *****************
   928 ;; Defined at:
   929 ;;		line 40 in file "main.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  str            50    0[BANK1 ] unsigned char [50]
   934 ;;  len             2   50[BANK1 ] int 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  2  442[None  ] int 
   937 ;; Registers used:
   938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   939 ;; Tracked objects:
   940 ;;		On entry : B00/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   944 ;;      Params:         0       0       0       0       0
   945 ;;      Locals:         0       0      52       0       0
   946 ;;      Temps:          0      10       0       0       0
   947 ;;      Totals:         0      10      52       0       0
   948 ;;Total ram usage:       62 bytes
   949 ;; Hardware stack levels required when called:    8
   950 ;; This function calls:
   951 ;;		_LCD_Clear
   952 ;;		_LCD_DisplayString
   953 ;;		_LCD_Init
   954 ;;		_LCD_Printf
   955 ;;		_LCD_SetUp
   956 ;;		_UART_Init
   957 ;;		_UART_Printf
   958 ;;		_UART_RxString
   959 ;; This function is called by:
   960 ;;		Startup code after reset
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           
   965                           ;psect for function _main
   966  0026                     _main:	
   967                           
   968                           ;main.c: 42: char str[50];
   969                           ;main.c: 43: int len = 0;
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   973  0026  1683               	bsf	3,5	;RP0=1, select bank1
   974  0027  1303               	bcf	3,6	;RP1=0, select bank1
   975  0028  01D2               	clrf	main@len^(0+128)
   976  0029  01D3               	clrf	(main@len+1)^(0+128)
   977                           
   978                           ;main.c: 45: LCD_SetUp(PB_0,PB_1,PB_2,P_NC,P_NC,P_NC,P_NC,PB_4,PB_5,PB_6,PB_7);
   979  002A  3009               	movlw	9
   980  002B  1283               	bcf	3,5	;RP0=0, select bank0
   981  002C  1303               	bcf	3,6	;RP1=0, select bank0
   982  002D  00DA               	movwf	??_main
   983  002E  085A               	movf	??_main,w
   984  002F  00A0               	movwf	LCD_SetUp@RW
   985  0030  300A               	movlw	10
   986  0031  00DB               	movwf	??_main+1
   987  0032  085B               	movf	??_main+1,w
   988  0033  00A1               	movwf	LCD_SetUp@EN
   989  0034  30FF               	movlw	255
   990  0035  00DC               	movwf	??_main+2
   991  0036  085C               	movf	??_main+2,w
   992  0037  00A2               	movwf	LCD_SetUp@D0
   993  0038  30FF               	movlw	255
   994  0039  00DD               	movwf	??_main+3
   995  003A  085D               	movf	??_main+3,w
   996  003B  00A3               	movwf	LCD_SetUp@D1
   997  003C  30FF               	movlw	255
   998  003D  00DE               	movwf	??_main+4
   999  003E  085E               	movf	??_main+4,w
  1000  003F  00A4               	movwf	LCD_SetUp@D2
  1001  0040  30FF               	movlw	255
  1002  0041  00DF               	movwf	??_main+5
  1003  0042  085F               	movf	??_main+5,w
  1004  0043  00A5               	movwf	LCD_SetUp@D3
  1005  0044  300C               	movlw	12
  1006  0045  00E0               	movwf	??_main+6
  1007  0046  0860               	movf	??_main+6,w
  1008  0047  00A6               	movwf	LCD_SetUp@D4
  1009  0048  300D               	movlw	13
  1010  0049  00E1               	movwf	??_main+7
  1011  004A  0861               	movf	??_main+7,w
  1012  004B  00A7               	movwf	LCD_SetUp@D5
  1013  004C  300E               	movlw	14
  1014  004D  00E2               	movwf	??_main+8
  1015  004E  0862               	movf	??_main+8,w
  1016  004F  00A8               	movwf	LCD_SetUp@D6
  1017  0050  300F               	movlw	15
  1018  0051  00E3               	movwf	??_main+9
  1019  0052  0863               	movf	??_main+9,w
  1020  0053  00A9               	movwf	LCD_SetUp@D7
  1021  0054  3008               	movlw	8
  1022  0055  120A  158A  2656  120A  118A  	fcall	_LCD_SetUp
  1023                           
  1024                           ;main.c: 46: LCD_Init(2,16);
  1025  005A  3010               	movlw	16
  1026  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1027  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1028  005D  00DA               	movwf	??_main
  1029  005E  085A               	movf	??_main,w
  1030  005F  00FC               	movwf	LCD_Init@v_MaxCharsPerLine_u8
  1031  0060  3002               	movlw	2
  1032  0061  120A  158A  242E  120A  118A  	fcall	_LCD_Init
  1033                           
  1034                           ;main.c: 47: UART_Init(9600);
  1035  0066  3000               	movlw	0
  1036  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0069  00B3               	movwf	UART_Init@var_baudRate_u32+3
  1039  006A  3000               	movlw	0
  1040  006B  00B2               	movwf	UART_Init@var_baudRate_u32+2
  1041  006C  3025               	movlw	37
  1042  006D  00B1               	movwf	UART_Init@var_baudRate_u32+1
  1043  006E  3080               	movlw	128
  1044  006F  00B0               	movwf	UART_Init@var_baudRate_u32
  1045  0070  120A  158A  21F6  120A  118A  	fcall	_UART_Init
  1046                           
  1047                           ;main.c: 48: LCD_DisplayString("send data from  serial terminal");
  1048  0075  3021               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1049  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1050  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1051  0078  00A0               	movwf	LCD_DisplayString@ptr_stringPointer_u8
  1052  0079  3080               	movlw	128
  1053  007A  00A1               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1
  1054  007B  120A  158A  223B  120A  118A  	fcall	_LCD_DisplayString
  1055  0080                     l2482:	
  1056                           ;main.c: 49: while(1)
  1057                           
  1058                           
  1059                           ;main.c: 50: {
  1060                           ;main.c: 51: len = UART_RxString(str);
  1061  0080  30A0               	movlw	(low (main@str| 0))& (0+255)
  1062  0081  120A  158A  2325  120A  118A  	fcall	_UART_RxString
  1063  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0088  00DA               	movwf	??_main
  1066  0089  01DB               	clrf	??_main+1
  1067  008A  085A               	movf	??_main,w
  1068  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1069  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1070  008D  00D2               	movwf	main@len^(0+128)
  1071  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1072  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1073  0090  085B               	movf	??_main+1,w
  1074  0091  1683               	bsf	3,5	;RP0=1, select bank1
  1075  0092  1303               	bcf	3,6	;RP1=0, select bank1
  1076  0093  00D3               	movwf	(main@len+1)^(0+128)
  1077                           
  1078                           ;main.c: 52: UART_Printf("Received String:%s   size=%2d\n\r",str,len);
  1079  0094  30A0               	movlw	(low (main@str| 0))& (0+255)
  1080  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0097  00DA               	movwf	??_main
  1083  0098  085A               	movf	??_main,w
  1084  0099  00C3               	movwf	?_UART_Printf
  1085  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1086  009B  1303               	bcf	3,6	;RP1=0, select bank1
  1087  009C  0853               	movf	(main@len+1)^(0+128),w
  1088  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1089  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1090  009F  00C5               	movwf	?_UART_Printf+2
  1091  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1092  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  1093  00A2  0852               	movf	main@len^(0+128),w
  1094  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1095  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1096  00A5  00C4               	movwf	?_UART_Printf+1
  1097  00A6  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1098  00A7  120A  118A  23A5  120A  118A  	fcall	_UART_Printf
  1099                           
  1100                           ;main.c: 53: LCD_Clear();
  1101  00AC  120A  158A  21AF  120A  118A  	fcall	_LCD_Clear
  1102                           
  1103                           ;main.c: 54: LCD_Printf("str:%s size=%2d",str,len);
  1104  00B1  30A0               	movlw	(low (main@str| 0))& (0+255)
  1105  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1106  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1107  00B4  00DA               	movwf	??_main
  1108  00B5  085A               	movf	??_main,w
  1109  00B6  00C3               	movwf	?_LCD_Printf
  1110  00B7  1683               	bsf	3,5	;RP0=1, select bank1
  1111  00B8  1303               	bcf	3,6	;RP1=0, select bank1
  1112  00B9  0853               	movf	(main@len+1)^(0+128),w
  1113  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1114  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1115  00BC  00C5               	movwf	?_LCD_Printf+2
  1116  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  1117  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  1118  00BF  0852               	movf	main@len^(0+128),w
  1119  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1120  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1121  00C2  00C4               	movwf	?_LCD_Printf+1
  1122  00C3  3041               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1123  00C4  120A  118A  25BA  120A  118A  	fcall	_LCD_Printf
  1124  00C9  2880               	goto	l2482
  1125  00CA                     __end_of_main:	
  1126                           ;main.c: 55: }
  1127                           ;main.c: 57: return (0);
  1128                           ;	Return value of _main is never used
  1129                           
  1130                           
  1131                           	psect	text1
  1132  0B25                     __ptext1:	
  1133 ;; *************** function _UART_RxString *****************
  1134 ;; Defined at:
  1135 ;;		line 195 in file "../00-libfiles/uart.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  ptr_string      1    wreg     PTR unsigned char 
  1138 ;;		 -> main@str(50), 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  ptr_string      1    3[COMMON] PTR unsigned char 
  1141 ;;		 -> main@str(50), 
  1142 ;;  ch              1    5[COMMON] unsigned char 
  1143 ;;  len             1    4[COMMON] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      unsigned char 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1153 ;;      Params:         0       0       0       0       0
  1154 ;;      Locals:         3       0       0       0       0
  1155 ;;      Temps:          2       0       0       0       0
  1156 ;;      Totals:         5       0       0       0       0
  1157 ;;Total ram usage:        5 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    1
  1160 ;; This function calls:
  1161 ;;		_UART_RxChar
  1162 ;;		_UART_TxChar
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _UART_RxString
  1170  0B25                     _UART_RxString:	
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _UART_RxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1174                           ;UART_RxString@ptr_string stored from wreg
  1175  0B25  00F3               	movwf	UART_RxString@ptr_string
  1176                           
  1177                           ;uart.c: 197: char ch;
  1178                           ;uart.c: 198: uint8_t len = 0;
  1179  0B26  01F4               	clrf	UART_RxString@len
  1180                           
  1181                           ;uart.c: 207: break;
  1182  0B27  2B40               	goto	l2124
  1183  0B28                     l2136:	
  1184                           ;uart.c: 208: }
  1185                           
  1186                           
  1187                           ;uart.c: 209: else if((ch=='\b') && (len!=0))
  1188  0B28  3008               	movlw	8
  1189  0B29  0675               	xorwf	UART_RxString@ch,w
  1190  0B2A  1D03               	btfss	3,2
  1191  0B2B  2B32               	goto	l2142
  1192  0B2C  0874               	movf	UART_RxString@len,w
  1193  0B2D  1903               	btfsc	3,2
  1194  0B2E  2B32               	goto	l2142
  1195                           
  1196                           ;uart.c: 210: {
  1197                           ;uart.c: 211: len--;
  1198  0B2F  3001               	movlw	1
  1199  0B30  02F4               	subwf	UART_RxString@len,f
  1200                           
  1201                           ;uart.c: 212: }
  1202  0B31  2B40               	goto	l2124
  1203  0B32                     l2142:	
  1204                           
  1205                           ;uart.c: 213: else
  1206                           ;uart.c: 214: {
  1207                           ;uart.c: 215: ptr_string[len]=ch;
  1208  0B32  0875               	movf	UART_RxString@ch,w
  1209  0B33  00F1               	movwf	??_UART_RxString
  1210  0B34  0874               	movf	UART_RxString@len,w
  1211  0B35  0773               	addwf	UART_RxString@ptr_string,w
  1212  0B36  00F2               	movwf	??_UART_RxString+1
  1213  0B37  0872               	movf	??_UART_RxString+1,w
  1214  0B38  0084               	movwf	4
  1215  0B39  0871               	movf	??_UART_RxString,w
  1216  0B3A  1383               	bcf	3,7	;select IRP bank0
  1217  0B3B  0080               	movwf	0
  1218                           
  1219                           ;uart.c: 216: len++;
  1220  0B3C  3001               	movlw	1
  1221  0B3D  00F1               	movwf	??_UART_RxString
  1222  0B3E  0871               	movf	??_UART_RxString,w
  1223  0B3F  07F4               	addwf	UART_RxString@len,f
  1224  0B40                     l2124:	
  1225                           ;uart.c: 199: while(1)
  1226                           
  1227                           
  1228                           ;uart.c: 200: {
  1229                           ;uart.c: 201: ch=UART_RxChar();
  1230  0B40  120A  158A  2194  120A  158A  	fcall	_UART_RxChar
  1231  0B45  00F1               	movwf	??_UART_RxString
  1232  0B46  0871               	movf	??_UART_RxString,w
  1233  0B47  00F5               	movwf	UART_RxString@ch
  1234                           
  1235                           ;uart.c: 202: UART_TxChar(ch);
  1236  0B48  0875               	movf	UART_RxString@ch,w
  1237  0B49  120A  158A  219B  120A  158A  	fcall	_UART_TxChar
  1238                           
  1239                           ;uart.c: 204: if((ch=='\r') || (ch=='\n'))
  1240  0B4E  300D               	movlw	13
  1241  0B4F  0675               	xorwf	UART_RxString@ch,w
  1242  0B50  1903               	btfsc	3,2
  1243  0B51  2B56               	goto	l2132
  1244  0B52  300A               	movlw	10
  1245  0B53  0675               	xorwf	UART_RxString@ch,w
  1246  0B54  1D03               	btfss	3,2
  1247  0B55  2B28               	goto	l2136
  1248  0B56                     l2132:	
  1249                           
  1250                           ;uart.c: 205: {
  1251                           ;uart.c: 206: ptr_string[len]=0;
  1252  0B56  0874               	movf	UART_RxString@len,w
  1253  0B57  0773               	addwf	UART_RxString@ptr_string,w
  1254  0B58  00F1               	movwf	??_UART_RxString
  1255  0B59  0871               	movf	??_UART_RxString,w
  1256  0B5A  0084               	movwf	4
  1257  0B5B  1383               	bcf	3,7	;select IRP bank0
  1258  0B5C  0180               	clrf	0
  1259                           
  1260                           ;uart.c: 217: }
  1261                           ;uart.c: 218: }
  1262                           ;uart.c: 219: return len;
  1263  0B5D  0874               	movf	UART_RxString@len,w
  1264  0B5E  0008               	return
  1265  0B5F                     __end_of_UART_RxString:	
  1266                           
  1267                           	psect	text2
  1268  0994                     __ptext2:	
  1269 ;; *************** function _UART_RxChar *****************
  1270 ;; Defined at:
  1271 ;;		line 120 in file "../00-libfiles/uart.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      unsigned char 
  1278 ;; Registers used:
  1279 ;;		wreg
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1285 ;;      Params:         0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0
  1288 ;;      Totals:         0       0       0       0       0
  1289 ;;Total ram usage:        0 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; This function calls:
  1292 ;;		Nothing
  1293 ;; This function is called by:
  1294 ;;		_UART_RxString
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           
  1299                           ;psect for function _UART_RxChar
  1300  0994                     _UART_RxChar:	
  1301  0994                     l33:	
  1302                           ;uart.c: 122: while(RCIF==0);
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in _UART_RxChar: [wreg]
  1306                           
  1307  0994  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0995  1303               	bcf	3,6	;RP1=0, select bank0
  1309  0996  1E8C               	btfss	12,5	;volatile
  1310  0997  2994               	goto	l33
  1311                           
  1312                           ;uart.c: 123: RCIF=0;
  1313  0998  128C               	bcf	12,5	;volatile
  1314                           
  1315                           ;uart.c: 124: return(RCREG);
  1316  0999  081A               	movf	26,w	;volatile
  1317  099A  0008               	return
  1318  099B                     __end_of_UART_RxChar:	
  1319                           
  1320                           	psect	text3
  1321  03A5                     __ptext3:	
  1322 ;; *************** function _UART_Printf *****************
  1323 ;; Defined at:
  1324 ;;		line 409 in file "../00-libfiles/uart.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;  argList         1    wreg     PTR const unsigned char 
  1327 ;;		 -> STR_2(32), 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  argList         1   41[BANK0 ] PTR const unsigned char 
  1330 ;;		 -> STR_2(32), 
  1331 ;;  v_num_u32       4   48[BANK0 ] unsigned long 
  1332 ;;  v_num_s32       4   42[BANK0 ] long 
  1333 ;;  v_num_u16       2   52[BANK0 ] unsigned int 
  1334 ;;  v_num_s16       2   46[BANK0 ] int 
  1335 ;;  argp            1   57[BANK0 ] PTR void [1]
  1336 ;;		 -> ?_UART_Printf(1), 
  1337 ;;  v_numOfDigit    1   56[BANK0 ] unsigned char 
  1338 ;;  ch              1   55[BANK0 ] unsigned char 
  1339 ;;  ptr             1   54[BANK0 ] PTR const unsigned char 
  1340 ;;		 -> STR_2(32), 
  1341 ;;  str             1   40[BANK0 ] PTR unsigned char 
  1342 ;;		 -> main@str(50), 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       3       0       0       0
  1353 ;;      Locals:         0      18       0       0       0
  1354 ;;      Temps:          0       2       0       0       0
  1355 ;;      Totals:         0      23       0       0       0
  1356 ;;Total ram usage:       23 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    2
  1359 ;; This function calls:
  1360 ;;		_UART_TxChar
  1361 ;;		_UART_TxNumber
  1362 ;;		_UART_TxString
  1363 ;;		___bmul
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           
  1370                           ;psect for function _UART_Printf
  1371  03A5                     _UART_Printf:	
  1372                           
  1373                           ;incstack = 0
  1374                           ; Regs used in _UART_Printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1375                           ;UART_Printf@argList stored from wreg
  1376  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  1377  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  1378  03A7  00C9               	movwf	UART_Printf@argList
  1379                           
  1380                           ;uart.c: 411: const char *ptr;
  1381                           ;uart.c: 412: va_list argp;
  1382                           ;uart.c: 413: sint16_t v_num_s16;
  1383                           ;uart.c: 414: sint32_t v_num_s32;
  1384                           ;uart.c: 415: uint16_t v_num_u16;
  1385                           ;uart.c: 416: uint32_t v_num_u32;
  1386                           ;uart.c: 417: char *str;
  1387                           ;uart.c: 418: char ch;
  1388                           ;uart.c: 419: uint8_t v_numOfDigitsToTransmit_u8;
  1389                           ;uart.c: 425: *argp = __va_start();
  1390  03A8  3043               	movlw	(low (?_UART_Printf| 0))& (0+255)
  1391  03A9  00C6               	movwf	??_UART_Printf
  1392  03AA  0846               	movf	??_UART_Printf,w
  1393  03AB  00D9               	movwf	UART_Printf@argp
  1394                           
  1395                           ;uart.c: 428: for(ptr = argList; *ptr != '\0'; ptr++)
  1396  03AC  0849               	movf	UART_Printf@argList,w
  1397  03AD  00C6               	movwf	??_UART_Printf
  1398  03AE  0846               	movf	??_UART_Printf,w
  1399  03AF  00D6               	movwf	UART_Printf@ptr
  1400  03B0                     l2268:	
  1401  03B0  0856               	movf	UART_Printf@ptr,w
  1402  03B1  0084               	movwf	4
  1403  03B2  120A  158A  200A  120A  118A  	fcall	stringdir
  1404  03B7  3A00               	xorlw	0
  1405  03B8  1903               	btfsc	3,2
  1406  03B9  0008               	return
  1407                           
  1408                           ;uart.c: 429: {
  1409                           ;uart.c: 431: ch= *ptr;
  1410  03BA  0856               	movf	UART_Printf@ptr,w
  1411  03BB  0084               	movwf	4
  1412  03BC  120A  158A  200A  120A  118A  	fcall	stringdir
  1413  03C1  00C6               	movwf	??_UART_Printf
  1414  03C2  0846               	movf	??_UART_Printf,w
  1415  03C3  00D7               	movwf	UART_Printf@ch
  1416                           
  1417                           ;uart.c: 432: if(ch == '%')
  1418  03C4  3025               	movlw	37
  1419  03C5  0657               	xorwf	UART_Printf@ch,w
  1420  03C6  1D03               	btfss	3,2
  1421  03C7  2DAD               	goto	l2264
  1422                           
  1423                           ;uart.c: 433: {
  1424                           ;uart.c: 434: ptr++;
  1425  03C8  3001               	movlw	1
  1426  03C9  00C6               	movwf	??_UART_Printf
  1427  03CA  0846               	movf	??_UART_Printf,w
  1428  03CB  07D6               	addwf	UART_Printf@ptr,f
  1429                           
  1430                           ;uart.c: 435: ch = *ptr;
  1431  03CC  0856               	movf	UART_Printf@ptr,w
  1432  03CD  0084               	movwf	4
  1433  03CE  120A  158A  200A  120A  118A  	fcall	stringdir
  1434  03D3  00C6               	movwf	??_UART_Printf
  1435  03D4  0846               	movf	??_UART_Printf,w
  1436  03D5  00D7               	movwf	UART_Printf@ch
  1437                           
  1438                           ;uart.c: 436: if((ch>=0x30) && (ch<=0x39))
  1439  03D6  3030               	movlw	48
  1440  03D7  0257               	subwf	UART_Printf@ch,w
  1441  03D8  1C03               	skipc
  1442  03D9  2C07               	goto	l2176
  1443  03DA  303A               	movlw	58
  1444  03DB  0257               	subwf	UART_Printf@ch,w
  1445  03DC  1803               	skipnc
  1446  03DD  2C07               	goto	l2176
  1447                           
  1448                           ;uart.c: 437: {
  1449                           ;uart.c: 438: v_numOfDigitsToTransmit_u8 = 0;
  1450  03DE  01D8               	clrf	UART_Printf@v_numOfDigitsToTransmit_u8
  1451  03DF                     l2172:	
  1452                           ;uart.c: 439: while((ch>=0x30) && (ch<=0x39))
  1453                           
  1454  03DF  3030               	movlw	48
  1455  03E0  0257               	subwf	UART_Printf@ch,w
  1456  03E1  1C03               	skipc
  1457  03E2  2D7B               	goto	l2262
  1458  03E3  303A               	movlw	58
  1459  03E4  0257               	subwf	UART_Printf@ch,w
  1460  03E5  1803               	btfsc	3,0
  1461  03E6  2D7B               	goto	l2262
  1462                           
  1463                           ;uart.c: 440: {
  1464                           ;uart.c: 441: v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30)
      +                          ;
  1465  03E7  300A               	movlw	10
  1466  03E8  00C6               	movwf	??_UART_Printf
  1467  03E9  0846               	movf	??_UART_Printf,w
  1468  03EA  00A0               	movwf	___bmul@multiplicand
  1469  03EB  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1470  03EC  120A  158A  21BA  120A  118A  	fcall	___bmul
  1471  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  1472  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  1473  03F3  0757               	addwf	UART_Printf@ch,w
  1474  03F4  3ED0               	addlw	208
  1475  03F5  00C7               	movwf	??_UART_Printf+1
  1476  03F6  0847               	movf	??_UART_Printf+1,w
  1477  03F7  00D8               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  1478                           
  1479                           ;uart.c: 442: ptr++;
  1480  03F8  3001               	movlw	1
  1481  03F9  00C6               	movwf	??_UART_Printf
  1482  03FA  0846               	movf	??_UART_Printf,w
  1483  03FB  07D6               	addwf	UART_Printf@ptr,f
  1484                           
  1485                           ;uart.c: 443: ch = *ptr;
  1486  03FC  0856               	movf	UART_Printf@ptr,w
  1487  03FD  0084               	movwf	4
  1488  03FE  120A  158A  200A  120A  118A  	fcall	stringdir
  1489  0403  00C6               	movwf	??_UART_Printf
  1490  0404  0846               	movf	??_UART_Printf,w
  1491  0405  00D7               	movwf	UART_Printf@ch
  1492  0406  2BDF               	goto	l2172
  1493  0407                     l2176:	
  1494                           ;uart.c: 444: }
  1495                           ;uart.c: 445: }
  1496                           
  1497                           
  1498                           ;uart.c: 446: else
  1499                           ;uart.c: 447: {
  1500                           ;uart.c: 448: v_numOfDigitsToTransmit_u8 = 0xffu;
  1501  0407  30FF               	movlw	255
  1502  0408  00C6               	movwf	??_UART_Printf
  1503  0409  0846               	movf	??_UART_Printf,w
  1504  040A  00D8               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  1505                           
  1506                           ;uart.c: 449: }
  1507                           ;uart.c: 452: switch(ch)
  1508  040B  2D7B               	goto	l2262
  1509  040C                     l2178:	
  1510                           ;uart.c: 453: {
  1511                           ;uart.c: 454: case 'C':
  1512                           
  1513                           
  1514                           ;uart.c: 455: case 'c':
  1515                           ;uart.c: 456: ch = (*(uint8_t *)__va_arg((*(uint8_t **)argp), (uint8_t)0));
  1516  040C  0859               	movf	UART_Printf@argp,w
  1517  040D  0084               	movwf	4
  1518  040E  1383               	bcf	3,7	;select IRP bank0
  1519  040F  0800               	movf	0,w
  1520  0410  00C6               	movwf	??_UART_Printf
  1521  0411  0846               	movf	??_UART_Printf,w
  1522  0412  00D7               	movwf	UART_Printf@ch
  1523  0413  3002               	movlw	2
  1524  0414  00C6               	movwf	??_UART_Printf
  1525  0415  0846               	movf	??_UART_Printf,w
  1526  0416  07D9               	addwf	UART_Printf@argp,f
  1527  0417  2DAD               	goto	l2264
  1528  0418                     l2184:	
  1529                           ;uart.c: 460: case 'd':
  1530                           
  1531                           ;uart.c: 458: break;
  1532                           
  1533                           ;uart.c: 457: UART_TxChar(ch);
  1534                           
  1535                           
  1536                           ;uart.c: 461: v_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
  1537  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1538  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1539  041A  0859               	movf	UART_Printf@argp,w
  1540  041B  0084               	movwf	4
  1541  041C  1383               	bcf	3,7	;select IRP bank0
  1542  041D  0800               	movf	0,w
  1543  041E  00CE               	movwf	UART_Printf@v_num_s16
  1544  041F  0A84               	incf	4,f
  1545  0420  0800               	movf	0,w
  1546  0421  00CF               	movwf	UART_Printf@v_num_s16+1
  1547  0422  3002               	movlw	2
  1548  0423  00C6               	movwf	??_UART_Printf
  1549  0424  0846               	movf	??_UART_Printf,w
  1550  0425  07D9               	addwf	UART_Printf@argp,f
  1551                           
  1552                           ;uart.c: 462: if(v_num_s16<0)
  1553  0426  1FCF               	btfss	UART_Printf@v_num_s16+1,7
  1554  0427  2C33               	goto	l2194
  1555                           
  1556                           ;uart.c: 463: {
  1557                           ;uart.c: 464: v_num_s16 = -v_num_s16;
  1558  0428  09CE               	comf	UART_Printf@v_num_s16,f
  1559  0429  09CF               	comf	UART_Printf@v_num_s16+1,f
  1560  042A  0ACE               	incf	UART_Printf@v_num_s16,f
  1561  042B  1903               	skipnz
  1562  042C  0ACF               	incf	UART_Printf@v_num_s16+1,f
  1563                           
  1564                           ;uart.c: 465: UART_TxChar('-');
  1565  042D  302D               	movlw	45
  1566  042E  120A  158A  219B  120A  118A  	fcall	_UART_TxChar
  1567  0433                     l2194:	
  1568                           
  1569                           ;uart.c: 466: }
  1570                           ;uart.c: 467: UART_TxNumber(10u,v_num_s16,v_numOfDigitsToTransmit_u8);
  1571  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1572  0434  1303               	bcf	3,6	;RP1=0, select bank0
  1573  0435  084E               	movf	UART_Printf@v_num_s16,w
  1574  0436  00A4               	movwf	UART_TxNumber@v_number_u32
  1575  0437  084F               	movf	UART_Printf@v_num_s16+1,w
  1576  0438  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1577  0439  3000               	movlw	0
  1578  043A  1BA5               	btfsc	UART_TxNumber@v_number_u32+1,7
  1579  043B  30FF               	movlw	255
  1580  043C  00A6               	movwf	UART_TxNumber@v_number_u32+2
  1581  043D  00A7               	movwf	UART_TxNumber@v_number_u32+3
  1582  043E  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1583  043F  00C6               	movwf	??_UART_Printf
  1584  0440  0846               	movf	??_UART_Printf,w
  1585  0441  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1586  0442  300A               	movlw	10
  1587  0443  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1588                           
  1589                           ;uart.c: 468: break;
  1590  0448  2DB3               	goto	l2266
  1591  0449                     l2196:	
  1592                           ;uart.c: 470: case 'D':
  1593                           
  1594                           
  1595                           ;uart.c: 471: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  1596  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1597  044A  1303               	bcf	3,6	;RP1=0, select bank0
  1598  044B  0859               	movf	UART_Printf@argp,w
  1599  044C  0084               	movwf	4
  1600  044D  1383               	bcf	3,7	;select IRP bank0
  1601  044E  0800               	movf	0,w
  1602  044F  00CA               	movwf	UART_Printf@v_num_s32
  1603  0450  0A84               	incf	4,f
  1604  0451  0800               	movf	0,w
  1605  0452  00CB               	movwf	UART_Printf@v_num_s32+1
  1606  0453  0A84               	incf	4,f
  1607  0454  0800               	movf	0,w
  1608  0455  00CC               	movwf	UART_Printf@v_num_s32+2
  1609  0456  0A84               	incf	4,f
  1610  0457  0800               	movf	0,w
  1611  0458  00CD               	movwf	UART_Printf@v_num_s32+3
  1612  0459  3004               	movlw	4
  1613  045A  00C6               	movwf	??_UART_Printf
  1614  045B  0846               	movf	??_UART_Printf,w
  1615  045C  07D9               	addwf	UART_Printf@argp,f
  1616                           
  1617                           ;uart.c: 472: if(v_num_s32<0)
  1618  045D  1FCD               	btfss	UART_Printf@v_num_s32+3,7
  1619  045E  2C70               	goto	l2206
  1620                           
  1621                           ;uart.c: 473: {
  1622                           ;uart.c: 474: v_num_s32 = -v_num_s32;
  1623  045F  09CA               	comf	UART_Printf@v_num_s32,f
  1624  0460  09CB               	comf	UART_Printf@v_num_s32+1,f
  1625  0461  09CC               	comf	UART_Printf@v_num_s32+2,f
  1626  0462  09CD               	comf	UART_Printf@v_num_s32+3,f
  1627  0463  0ACA               	incf	UART_Printf@v_num_s32,f
  1628  0464  1903               	skipnz
  1629  0465  0ACB               	incf	UART_Printf@v_num_s32+1,f
  1630  0466  1903               	skipnz
  1631  0467  0ACC               	incf	UART_Printf@v_num_s32+2,f
  1632  0468  1903               	skipnz
  1633  0469  0ACD               	incf	UART_Printf@v_num_s32+3,f
  1634                           
  1635                           ;uart.c: 475: UART_TxChar('-');
  1636  046A  302D               	movlw	45
  1637  046B  120A  158A  219B  120A  118A  	fcall	_UART_TxChar
  1638  0470                     l2206:	
  1639                           
  1640                           ;uart.c: 476: }
  1641                           ;uart.c: 477: UART_TxNumber(10u,v_num_s32,v_numOfDigitsToTransmit_u8);
  1642  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0472  084D               	movf	UART_Printf@v_num_s32+3,w
  1645  0473  00A7               	movwf	UART_TxNumber@v_number_u32+3
  1646  0474  084C               	movf	UART_Printf@v_num_s32+2,w
  1647  0475  00A6               	movwf	UART_TxNumber@v_number_u32+2
  1648  0476  084B               	movf	UART_Printf@v_num_s32+1,w
  1649  0477  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1650  0478  084A               	movf	UART_Printf@v_num_s32,w
  1651  0479  00A4               	movwf	UART_TxNumber@v_number_u32
  1652  047A  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1653  047B  00C6               	movwf	??_UART_Printf
  1654  047C  0846               	movf	??_UART_Printf,w
  1655  047D  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1656  047E  300A               	movlw	10
  1657  047F  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1658                           
  1659                           ;uart.c: 478: break;
  1660  0484  2DB3               	goto	l2266
  1661  0485                     l2208:	
  1662                           ;uart.c: 480: case 'u':
  1663                           
  1664                           
  1665                           ;uart.c: 481: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1666  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1667  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1668  0487  0859               	movf	UART_Printf@argp,w
  1669  0488  0084               	movwf	4
  1670  0489  1383               	bcf	3,7	;select IRP bank0
  1671  048A  0800               	movf	0,w
  1672  048B  00D4               	movwf	UART_Printf@v_num_u16
  1673  048C  0A84               	incf	4,f
  1674  048D  0800               	movf	0,w
  1675  048E  00D5               	movwf	UART_Printf@v_num_u16+1
  1676  048F  3002               	movlw	2
  1677  0490  00C6               	movwf	??_UART_Printf
  1678  0491  0846               	movf	??_UART_Printf,w
  1679  0492  07D9               	addwf	UART_Printf@argp,f
  1680                           
  1681                           ;uart.c: 482: UART_TxNumber(10u,v_num_u16,v_numOfDigitsToTransmit_u8);
  1682  0493  0854               	movf	UART_Printf@v_num_u16,w
  1683  0494  00A4               	movwf	UART_TxNumber@v_number_u32
  1684  0495  0855               	movf	UART_Printf@v_num_u16+1,w
  1685  0496  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1686  0497  01A6               	clrf	UART_TxNumber@v_number_u32+2
  1687  0498  01A7               	clrf	UART_TxNumber@v_number_u32+3
  1688  0499  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1689  049A  00C6               	movwf	??_UART_Printf
  1690  049B  0846               	movf	??_UART_Printf,w
  1691  049C  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1692  049D  300A               	movlw	10
  1693  049E  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1694                           
  1695                           ;uart.c: 483: break;
  1696  04A3  2DB3               	goto	l2266
  1697  04A4                     l2214:	
  1698                           ;uart.c: 485: case 'U':
  1699                           
  1700                           
  1701                           ;uart.c: 486: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1702  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  1703  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  1704  04A6  0859               	movf	UART_Printf@argp,w
  1705  04A7  0084               	movwf	4
  1706  04A8  1383               	bcf	3,7	;select IRP bank0
  1707  04A9  0800               	movf	0,w
  1708  04AA  00D0               	movwf	UART_Printf@v_num_u32
  1709  04AB  0A84               	incf	4,f
  1710  04AC  0800               	movf	0,w
  1711  04AD  00D1               	movwf	UART_Printf@v_num_u32+1
  1712  04AE  0A84               	incf	4,f
  1713  04AF  0800               	movf	0,w
  1714  04B0  00D2               	movwf	UART_Printf@v_num_u32+2
  1715  04B1  0A84               	incf	4,f
  1716  04B2  0800               	movf	0,w
  1717  04B3  00D3               	movwf	UART_Printf@v_num_u32+3
  1718  04B4  3004               	movlw	4
  1719  04B5  00C6               	movwf	??_UART_Printf
  1720  04B6  0846               	movf	??_UART_Printf,w
  1721  04B7  07D9               	addwf	UART_Printf@argp,f
  1722                           
  1723                           ;uart.c: 487: UART_TxNumber(10u,v_num_u32,v_numOfDigitsToTransmit_u8);
  1724  04B8  0853               	movf	UART_Printf@v_num_u32+3,w
  1725  04B9  00A7               	movwf	UART_TxNumber@v_number_u32+3
  1726  04BA  0852               	movf	UART_Printf@v_num_u32+2,w
  1727  04BB  00A6               	movwf	UART_TxNumber@v_number_u32+2
  1728  04BC  0851               	movf	UART_Printf@v_num_u32+1,w
  1729  04BD  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1730  04BE  0850               	movf	UART_Printf@v_num_u32,w
  1731  04BF  00A4               	movwf	UART_TxNumber@v_number_u32
  1732  04C0  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1733  04C1  00C6               	movwf	??_UART_Printf
  1734  04C2  0846               	movf	??_UART_Printf,w
  1735  04C3  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1736  04C4  300A               	movlw	10
  1737  04C5  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1738                           
  1739                           ;uart.c: 488: break;
  1740  04CA  2DB3               	goto	l2266
  1741  04CB                     l2220:	
  1742                           ;uart.c: 490: case 'x':
  1743                           
  1744                           
  1745                           ;uart.c: 491: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1746  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  1747  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  1748  04CD  0859               	movf	UART_Printf@argp,w
  1749  04CE  0084               	movwf	4
  1750  04CF  1383               	bcf	3,7	;select IRP bank0
  1751  04D0  0800               	movf	0,w
  1752  04D1  00D4               	movwf	UART_Printf@v_num_u16
  1753  04D2  0A84               	incf	4,f
  1754  04D3  0800               	movf	0,w
  1755  04D4  00D5               	movwf	UART_Printf@v_num_u16+1
  1756  04D5  3002               	movlw	2
  1757  04D6  00C6               	movwf	??_UART_Printf
  1758  04D7  0846               	movf	??_UART_Printf,w
  1759  04D8  07D9               	addwf	UART_Printf@argp,f
  1760                           
  1761                           ;uart.c: 492: UART_TxNumber(16u,v_num_u16,v_numOfDigitsToTransmit_u8);
  1762  04D9  0854               	movf	UART_Printf@v_num_u16,w
  1763  04DA  00A4               	movwf	UART_TxNumber@v_number_u32
  1764  04DB  0855               	movf	UART_Printf@v_num_u16+1,w
  1765  04DC  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1766  04DD  01A6               	clrf	UART_TxNumber@v_number_u32+2
  1767  04DE  01A7               	clrf	UART_TxNumber@v_number_u32+3
  1768  04DF  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1769  04E0  00C6               	movwf	??_UART_Printf
  1770  04E1  0846               	movf	??_UART_Printf,w
  1771  04E2  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1772  04E3  3010               	movlw	16
  1773  04E4  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1774                           
  1775                           ;uart.c: 493: break;
  1776  04E9  2DB3               	goto	l2266
  1777  04EA                     l2226:	
  1778                           ;uart.c: 495: case 'X':
  1779                           
  1780                           
  1781                           ;uart.c: 496: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1782  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1783  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1784  04EC  0859               	movf	UART_Printf@argp,w
  1785  04ED  0084               	movwf	4
  1786  04EE  1383               	bcf	3,7	;select IRP bank0
  1787  04EF  0800               	movf	0,w
  1788  04F0  00D0               	movwf	UART_Printf@v_num_u32
  1789  04F1  0A84               	incf	4,f
  1790  04F2  0800               	movf	0,w
  1791  04F3  00D1               	movwf	UART_Printf@v_num_u32+1
  1792  04F4  0A84               	incf	4,f
  1793  04F5  0800               	movf	0,w
  1794  04F6  00D2               	movwf	UART_Printf@v_num_u32+2
  1795  04F7  0A84               	incf	4,f
  1796  04F8  0800               	movf	0,w
  1797  04F9  00D3               	movwf	UART_Printf@v_num_u32+3
  1798  04FA  3004               	movlw	4
  1799  04FB  00C6               	movwf	??_UART_Printf
  1800  04FC  0846               	movf	??_UART_Printf,w
  1801  04FD  07D9               	addwf	UART_Printf@argp,f
  1802                           
  1803                           ;uart.c: 497: UART_TxNumber(16u,v_num_u32,v_numOfDigitsToTransmit_u8);
  1804  04FE  0853               	movf	UART_Printf@v_num_u32+3,w
  1805  04FF  00A7               	movwf	UART_TxNumber@v_number_u32+3
  1806  0500  0852               	movf	UART_Printf@v_num_u32+2,w
  1807  0501  00A6               	movwf	UART_TxNumber@v_number_u32+2
  1808  0502  0851               	movf	UART_Printf@v_num_u32+1,w
  1809  0503  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1810  0504  0850               	movf	UART_Printf@v_num_u32,w
  1811  0505  00A4               	movwf	UART_TxNumber@v_number_u32
  1812  0506  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1813  0507  00C6               	movwf	??_UART_Printf
  1814  0508  0846               	movf	??_UART_Printf,w
  1815  0509  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1816  050A  3010               	movlw	16
  1817  050B  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1818                           
  1819                           ;uart.c: 498: break;
  1820  0510  2DB3               	goto	l2266
  1821  0511                     l2232:	
  1822                           ;uart.c: 501: case 'b':
  1823                           
  1824                           
  1825                           ;uart.c: 502: v_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1826  0511  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0512  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0513  0859               	movf	UART_Printf@argp,w
  1829  0514  0084               	movwf	4
  1830  0515  1383               	bcf	3,7	;select IRP bank0
  1831  0516  0800               	movf	0,w
  1832  0517  00D4               	movwf	UART_Printf@v_num_u16
  1833  0518  0A84               	incf	4,f
  1834  0519  0800               	movf	0,w
  1835  051A  00D5               	movwf	UART_Printf@v_num_u16+1
  1836  051B  3002               	movlw	2
  1837  051C  00C6               	movwf	??_UART_Printf
  1838  051D  0846               	movf	??_UART_Printf,w
  1839  051E  07D9               	addwf	UART_Printf@argp,f
  1840                           
  1841                           ;uart.c: 504: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  1842  051F  0A58               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1843  0520  1D03               	btfss	3,2
  1844  0521  2D26               	goto	l2240
  1845                           
  1846                           ;uart.c: 505: v_numOfDigitsToTransmit_u8 = 16;
  1847  0522  3010               	movlw	16
  1848  0523  00C6               	movwf	??_UART_Printf
  1849  0524  0846               	movf	??_UART_Printf,w
  1850  0525  00D8               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  1851  0526                     l2240:	
  1852                           
  1853                           ;uart.c: 507: UART_TxNumber(2u,v_num_u16,v_numOfDigitsToTransmit_u8);
  1854  0526  0854               	movf	UART_Printf@v_num_u16,w
  1855  0527  00A4               	movwf	UART_TxNumber@v_number_u32
  1856  0528  0855               	movf	UART_Printf@v_num_u16+1,w
  1857  0529  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1858  052A  01A6               	clrf	UART_TxNumber@v_number_u32+2
  1859  052B  01A7               	clrf	UART_TxNumber@v_number_u32+3
  1860  052C  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1861  052D  00C6               	movwf	??_UART_Printf
  1862  052E  0846               	movf	??_UART_Printf,w
  1863  052F  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1864  0530  3002               	movlw	2
  1865  0531  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1866                           
  1867                           ;uart.c: 508: break;
  1868  0536  2DB3               	goto	l2266
  1869  0537                     l2242:	
  1870                           ;uart.c: 510: case 'B':
  1871                           
  1872                           
  1873                           ;uart.c: 511: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1874  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0539  0859               	movf	UART_Printf@argp,w
  1877  053A  0084               	movwf	4
  1878  053B  1383               	bcf	3,7	;select IRP bank0
  1879  053C  0800               	movf	0,w
  1880  053D  00D0               	movwf	UART_Printf@v_num_u32
  1881  053E  0A84               	incf	4,f
  1882  053F  0800               	movf	0,w
  1883  0540  00D1               	movwf	UART_Printf@v_num_u32+1
  1884  0541  0A84               	incf	4,f
  1885  0542  0800               	movf	0,w
  1886  0543  00D2               	movwf	UART_Printf@v_num_u32+2
  1887  0544  0A84               	incf	4,f
  1888  0545  0800               	movf	0,w
  1889  0546  00D3               	movwf	UART_Printf@v_num_u32+3
  1890  0547  3004               	movlw	4
  1891  0548  00C6               	movwf	??_UART_Printf
  1892  0549  0846               	movf	??_UART_Printf,w
  1893  054A  07D9               	addwf	UART_Printf@argp,f
  1894                           
  1895                           ;uart.c: 513: if(v_numOfDigitsToTransmit_u8 == 0xffu)
  1896  054B  0A58               	incf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1897  054C  1D03               	btfss	3,2
  1898  054D  2D52               	goto	l2250
  1899                           
  1900                           ;uart.c: 514: v_numOfDigitsToTransmit_u8 = 32;
  1901  054E  3020               	movlw	32
  1902  054F  00C6               	movwf	??_UART_Printf
  1903  0550  0846               	movf	??_UART_Printf,w
  1904  0551  00D8               	movwf	UART_Printf@v_numOfDigitsToTransmit_u8
  1905  0552                     l2250:	
  1906                           
  1907                           ;uart.c: 516: UART_TxNumber(2u,v_num_u32,v_numOfDigitsToTransmit_u8);
  1908  0552  0853               	movf	UART_Printf@v_num_u32+3,w
  1909  0553  00A7               	movwf	UART_TxNumber@v_number_u32+3
  1910  0554  0852               	movf	UART_Printf@v_num_u32+2,w
  1911  0555  00A6               	movwf	UART_TxNumber@v_number_u32+2
  1912  0556  0851               	movf	UART_Printf@v_num_u32+1,w
  1913  0557  00A5               	movwf	UART_TxNumber@v_number_u32+1
  1914  0558  0850               	movf	UART_Printf@v_num_u32,w
  1915  0559  00A4               	movwf	UART_TxNumber@v_number_u32
  1916  055A  0858               	movf	UART_Printf@v_numOfDigitsToTransmit_u8,w
  1917  055B  00C6               	movwf	??_UART_Printf
  1918  055C  0846               	movf	??_UART_Printf,w
  1919  055D  00A8               	movwf	UART_TxNumber@v_numOfDigitsToTransmit_u8
  1920  055E  3002               	movlw	2
  1921  055F  120A  118A  22A4  120A  118A  	fcall	_UART_TxNumber
  1922                           
  1923                           ;uart.c: 521: case 'f':
  1924                           ;uart.c: 526: break;
  1925                           
  1926                           ;uart.c: 520: case 'F':
  1927                           
  1928                           ;uart.c: 517: break;
  1929  0564  2DB3               	goto	l2266
  1930  0565                     l2252:	
  1931                           ;uart.c: 529: case 'S':
  1932                           
  1933                           
  1934                           ;uart.c: 530: case 's':
  1935                           ;uart.c: 531: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  1936  0565  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0566  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0567  0859               	movf	UART_Printf@argp,w
  1939  0568  0084               	movwf	4
  1940  0569  1383               	bcf	3,7	;select IRP bank0
  1941  056A  0800               	movf	0,w
  1942  056B  00C6               	movwf	??_UART_Printf
  1943  056C  0846               	movf	??_UART_Printf,w
  1944  056D  00C8               	movwf	UART_Printf@str
  1945  056E  3001               	movlw	1
  1946  056F  00C6               	movwf	??_UART_Printf
  1947  0570  0846               	movf	??_UART_Printf,w
  1948  0571  07D9               	addwf	UART_Printf@argp,f
  1949                           
  1950                           ;uart.c: 532: UART_TxString(str);
  1951  0572  0848               	movf	UART_Printf@str,w
  1952  0573  120A  158A  21E1  120A  118A  	fcall	_UART_TxString
  1953                           
  1954                           ;uart.c: 533: break;
  1955  0578  2DB3               	goto	l2266
  1956  0579                     l2258:	
  1957                           ;uart.c: 535: case '%':
  1958                           
  1959                           
  1960                           ;uart.c: 536: UART_TxChar('%');
  1961  0579  3025               	movlw	37
  1962  057A  2DAE               	goto	L1
  1963  057B                     l2262:	
  1964                           ;uart.c: 538: }
  1965                           
  1966                           ;uart.c: 537: break;
  1967                           
  1968  057B  1283               	bcf	3,5	;RP0=0, select bank0
  1969  057C  1303               	bcf	3,6	;RP1=0, select bank0
  1970  057D  0857               	movf	UART_Printf@ch,w
  1971                           
  1972                           ; Switch size 1, requested type "space"
  1973                           ; Number of cases is 15, Range of values is 37 to 120
  1974                           ; switch strategies available:
  1975                           ; Name         Instructions Cycles
  1976                           ; simple_byte           46    24 (average)
  1977                           ; direct_byte          263    11 (fixed)
  1978                           ; jumptable            263     9 (fixed)
  1979                           ;	Chosen strategy is simple_byte
  1980  057E  3A25               	xorlw	37	; case 37
  1981  057F  1903               	skipnz
  1982  0580  2D79               	goto	l2258
  1983  0581  3A67               	xorlw	103	; case 66
  1984  0582  1903               	skipnz
  1985  0583  2D37               	goto	l2242
  1986  0584  3A01               	xorlw	1	; case 67
  1987  0585  1903               	skipnz
  1988  0586  2C0C               	goto	l2178
  1989  0587  3A07               	xorlw	7	; case 68
  1990  0588  1903               	skipnz
  1991  0589  2C49               	goto	l2196
  1992  058A  3A02               	xorlw	2	; case 70
  1993  058B  1903               	skipnz
  1994  058C  2DB3               	goto	l2266
  1995  058D  3A15               	xorlw	21	; case 83
  1996  058E  1903               	skipnz
  1997  058F  2D65               	goto	l2252
  1998  0590  3A06               	xorlw	6	; case 85
  1999  0591  1903               	skipnz
  2000  0592  2CA4               	goto	l2214
  2001  0593  3A0D               	xorlw	13	; case 88
  2002  0594  1903               	skipnz
  2003  0595  2CEA               	goto	l2226
  2004  0596  3A3A               	xorlw	58	; case 98
  2005  0597  1903               	skipnz
  2006  0598  2D11               	goto	l2232
  2007  0599  3A01               	xorlw	1	; case 99
  2008  059A  1903               	skipnz
  2009  059B  2C0C               	goto	l2178
  2010  059C  3A07               	xorlw	7	; case 100
  2011  059D  1903               	skipnz
  2012  059E  2C18               	goto	l2184
  2013  059F  3A02               	xorlw	2	; case 102
  2014  05A0  1903               	skipnz
  2015  05A1  2DB3               	goto	l2266
  2016  05A2  3A15               	xorlw	21	; case 115
  2017  05A3  1903               	skipnz
  2018  05A4  2D65               	goto	l2252
  2019  05A5  3A06               	xorlw	6	; case 117
  2020  05A6  1903               	skipnz
  2021  05A7  2C85               	goto	l2208
  2022  05A8  3A0D               	xorlw	13	; case 120
  2023  05A9  1903               	skipnz
  2024  05AA  2CCB               	goto	l2220
  2025  05AB  2DB3               	goto	l2266
  2026                           
  2027                           ;uart.c: 539: }
  2028  05AC  2DB3               	goto	l2266
  2029  05AD                     l2264:	
  2030                           
  2031                           ;uart.c: 540: else
  2032                           ;uart.c: 541: {
  2033                           ;uart.c: 543: UART_TxChar(ch);
  2034  05AD  0857               	movf	UART_Printf@ch,w
  2035  05AE                     L1:	
  2036  05AE  120A  158A  219B  120A  118A  	fcall	_UART_TxChar
  2037  05B3                     l2266:	
  2038  05B3  3001               	movlw	1
  2039  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  2040  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  2041  05B6  00C6               	movwf	??_UART_Printf
  2042  05B7  0846               	movf	??_UART_Printf,w
  2043  05B8  07D6               	addwf	UART_Printf@ptr,f
  2044  05B9  2BB0               	goto	l2268
  2045  05BA                     __end_of_UART_Printf:	
  2046                           
  2047                           	psect	text4
  2048  09E1                     __ptext4:	
  2049 ;; *************** function _UART_TxString *****************
  2050 ;; Defined at:
  2051 ;;		line 166 in file "../00-libfiles/uart.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  ptr_string      1    wreg     PTR unsigned char 
  2054 ;;		 -> main@str(50), 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  ptr_string      1    2[COMMON] PTR unsigned char 
  2057 ;;		 -> main@str(50), 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2067 ;;      Params:         0       0       0       0       0
  2068 ;;      Locals:         1       0       0       0       0
  2069 ;;      Temps:          1       0       0       0       0
  2070 ;;      Totals:         2       0       0       0       0
  2071 ;;Total ram usage:        2 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    1
  2074 ;; This function calls:
  2075 ;;		_UART_TxChar
  2076 ;; This function is called by:
  2077 ;;		_UART_Printf
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           
  2082                           ;psect for function _UART_TxString
  2083  09E1                     _UART_TxString:	
  2084                           
  2085                           ;incstack = 0
  2086                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2087                           ;UART_TxString@ptr_string stored from wreg
  2088  09E1  00F2               	movwf	UART_TxString@ptr_string
  2089  09E2                     l1972:	
  2090                           ;uart.c: 168: while(*ptr_string)
  2091                           
  2092  09E2  0872               	movf	UART_TxString@ptr_string,w
  2093  09E3  0084               	movwf	4
  2094  09E4  1383               	bcf	3,7	;select IRP bank0
  2095  09E5  0800               	movf	0,w
  2096  09E6  1903               	btfsc	3,2
  2097  09E7  0008               	return
  2098                           
  2099                           ;uart.c: 169: UART_TxChar(*ptr_string++);
  2100  09E8  0872               	movf	UART_TxString@ptr_string,w
  2101  09E9  0084               	movwf	4
  2102  09EA  1383               	bcf	3,7	;select IRP bank0
  2103  09EB  0800               	movf	0,w
  2104  09EC  120A  158A  219B  120A  158A  	fcall	_UART_TxChar
  2105  09F1  3001               	movlw	1
  2106  09F2  00F1               	movwf	??_UART_TxString
  2107  09F3  0871               	movf	??_UART_TxString,w
  2108  09F4  07F2               	addwf	UART_TxString@ptr_string,f
  2109  09F5  29E2               	goto	l1972
  2110  09F6                     __end_of_UART_TxString:	
  2111                           
  2112                           	psect	text5
  2113  02A4                     __ptext5:	
  2114 ;; *************** function _UART_TxNumber *****************
  2115 ;; Defined at:
  2116 ;;		line 257 in file "../00-libfiles/uart.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  v_numericSys    1    wreg     unsigned char 
  2119 ;;  v_number_u32    4    4[BANK0 ] unsigned long 
  2120 ;;  v_numOfDigit    1    8[BANK0 ] unsigned char 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  v_numericSys    1   33[BANK0 ] unsigned char 
  2123 ;;  a              10   21[BANK0 ] unsigned char [10]
  2124 ;;  i               1   34[BANK0 ] unsigned char 
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2134 ;;      Params:         0       5       0       0       0
  2135 ;;      Locals:         0      14       0       0       0
  2136 ;;      Temps:          0      12       0       0       0
  2137 ;;      Totals:         0      31       0       0       0
  2138 ;;Total ram usage:       31 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    1
  2141 ;; This function calls:
  2142 ;;		_UART_TxChar
  2143 ;;		___bmul
  2144 ;;		___lldiv
  2145 ;; This function is called by:
  2146 ;;		_UART_Printf
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           
  2151                           ;psect for function _UART_TxNumber
  2152  02A4                     _UART_TxNumber:	
  2153                           
  2154                           ;incstack = 0
  2155                           ; Regs used in _UART_TxNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2156                           ;UART_TxNumber@v_numericSystem_u8 stored from wreg
  2157  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2158  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2159  02A6  00C1               	movwf	UART_TxNumber@v_numericSystem_u8
  2160                           
  2161                           ;uart.c: 259: uint8_t i=0,a[10];
  2162  02A7  01C2               	clrf	UART_TxNumber@i
  2163                           
  2164                           ;uart.c: 261: if(2u == v_numericSystem_u8)
  2165  02A8  3002               	movlw	2
  2166  02A9  0641               	xorwf	UART_TxNumber@v_numericSystem_u8,w
  2167  02AA  1903               	btfsc	3,2
  2168  02AB  2AEB               	goto	l1986
  2169  02AC  2AEF               	goto	l1988
  2170  02AD                     l1980:	
  2171                           ;uart.c: 262: {
  2172                           ;uart.c: 263: while(v_numOfDigitsToTransmit_u8!=0)
  2173                           
  2174                           
  2175                           ;uart.c: 264: {
  2176                           ;uart.c: 267: i = (((v_number_u32)&((1<<((v_numOfDigitsToTransmit_u8-1)))))!=0u);
  2177  02AD  0824               	movf	UART_TxNumber@v_number_u32,w
  2178  02AE  00A9               	movwf	??_UART_TxNumber
  2179  02AF  0825               	movf	UART_TxNumber@v_number_u32+1,w
  2180  02B0  00AA               	movwf	??_UART_TxNumber+1
  2181  02B1  0826               	movf	UART_TxNumber@v_number_u32+2,w
  2182  02B2  00AB               	movwf	??_UART_TxNumber+2
  2183  02B3  0827               	movf	UART_TxNumber@v_number_u32+3,w
  2184  02B4  00AC               	movwf	??_UART_TxNumber+3
  2185  02B5  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  2186  02B6  3EFF               	addlw	-1
  2187  02B7  00AD               	movwf	??_UART_TxNumber+4
  2188  02B8  0AAD               	incf	??_UART_TxNumber+4,f
  2189  02B9  3001               	movlw	1
  2190  02BA  00AE               	movwf	??_UART_TxNumber+5
  2191  02BB  3000               	movlw	0
  2192  02BC  00AF               	movwf	??_UART_TxNumber+6
  2193  02BD  2AC1               	goto	u2554
  2194  02BE                     u2555:	
  2195  02BE  1003               	clrc
  2196  02BF  0DAE               	rlf	??_UART_TxNumber+5,f
  2197  02C0  0DAF               	rlf	??_UART_TxNumber+6,f
  2198  02C1                     u2554:	
  2199  02C1  0BAD               	decfsz	??_UART_TxNumber+4,f
  2200  02C2  2ABE               	goto	u2555
  2201  02C3  082E               	movf	??_UART_TxNumber+5,w
  2202  02C4  00B0               	movwf	??_UART_TxNumber+7
  2203  02C5  082F               	movf	??_UART_TxNumber+6,w
  2204  02C6  00B1               	movwf	??_UART_TxNumber+8
  2205  02C7  3000               	movlw	0
  2206  02C8  1BB1               	btfsc	??_UART_TxNumber+8,7
  2207  02C9  30FF               	movlw	255
  2208  02CA  00B2               	movwf	??_UART_TxNumber+9
  2209  02CB  00B3               	movwf	??_UART_TxNumber+10
  2210  02CC  0830               	movf	??_UART_TxNumber+7,w
  2211  02CD  05A9               	andwf	??_UART_TxNumber,f
  2212  02CE  0831               	movf	??_UART_TxNumber+8,w
  2213  02CF  05AA               	andwf	??_UART_TxNumber+1,f
  2214  02D0  0832               	movf	??_UART_TxNumber+9,w
  2215  02D1  05AB               	andwf	??_UART_TxNumber+2,f
  2216  02D2  0833               	movf	??_UART_TxNumber+10,w
  2217  02D3  05AC               	andwf	??_UART_TxNumber+3,f
  2218  02D4  082C               	movf	??_UART_TxNumber+3,w
  2219  02D5  042B               	iorwf	??_UART_TxNumber+2,w
  2220  02D6  042A               	iorwf	??_UART_TxNumber+1,w
  2221  02D7  0429               	iorwf	??_UART_TxNumber,w
  2222  02D8  1903               	btfsc	3,2
  2223  02D9  2ADC               	goto	u2560
  2224  02DA  3001               	movlw	1
  2225  02DB  2ADD               	goto	u2570
  2226  02DC                     u2560:	
  2227  02DC  3000               	movlw	0
  2228  02DD                     u2570:	
  2229  02DD  00B4               	movwf	??_UART_TxNumber+11
  2230  02DE  0834               	movf	??_UART_TxNumber+11,w
  2231  02DF  00C2               	movwf	UART_TxNumber@i
  2232                           
  2233                           ;uart.c: 268: UART_TxChar(((i)+0x30));
  2234  02E0  0842               	movf	UART_TxNumber@i,w
  2235  02E1  3E30               	addlw	48
  2236  02E2  120A  158A  219B  120A  118A  	fcall	_UART_TxChar
  2237                           
  2238                           ;uart.c: 269: v_numOfDigitsToTransmit_u8--;
  2239  02E7  3001               	movlw	1
  2240  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  2241  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  2242  02EA  02A8               	subwf	UART_TxNumber@v_numOfDigitsToTransmit_u8,f
  2243  02EB                     l1986:	
  2244  02EB  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  2245  02EC  1903               	btfsc	3,2
  2246  02ED  0008               	return
  2247  02EE  2AAD               	goto	l1980
  2248  02EF                     l1988:	
  2249                           ;uart.c: 270: }
  2250                           ;uart.c: 271: }
  2251                           
  2252                           
  2253                           ;uart.c: 272: else if(v_number_u32==0)
  2254  02EF  0827               	movf	UART_TxNumber@v_number_u32+3,w
  2255  02F0  0426               	iorwf	UART_TxNumber@v_number_u32+2,w
  2256  02F1  0425               	iorwf	UART_TxNumber@v_number_u32+1,w
  2257  02F2  0424               	iorwf	UART_TxNumber@v_number_u32,w
  2258  02F3  1D03               	skipz
  2259  02F4  2B0B               	goto	l2000
  2260                           
  2261                           ;uart.c: 273: {
  2262                           ;uart.c: 275: for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<10u)) ;i++)
  2263  02F5  01C2               	clrf	UART_TxNumber@i
  2264  02F6                     l1996:	
  2265  02F6  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  2266  02F7  0242               	subwf	UART_TxNumber@i,w
  2267  02F8  1803               	skipnc
  2268  02F9  0008               	return
  2269  02FA  300A               	movlw	10
  2270  02FB  0242               	subwf	UART_TxNumber@i,w
  2271  02FC  1803               	btfsc	3,0
  2272  02FD  0008               	return
  2273                           
  2274                           ;uart.c: 276: UART_TxChar('0');
  2275  02FE  3030               	movlw	48
  2276  02FF  120A  158A  219B  120A  118A  	fcall	_UART_TxChar
  2277  0304  3001               	movlw	1
  2278  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2279  0306  1303               	bcf	3,6	;RP1=0, select bank0
  2280  0307  00A9               	movwf	??_UART_TxNumber
  2281  0308  0829               	movf	??_UART_TxNumber,w
  2282  0309  07C2               	addwf	UART_TxNumber@i,f
  2283  030A  2AF6               	goto	l1996
  2284  030B                     l2000:	
  2285                           ;uart.c: 277: }
  2286                           
  2287                           
  2288                           ;uart.c: 278: else
  2289                           ;uart.c: 279: {
  2290                           ;uart.c: 280: for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
  2291  030B  01C2               	clrf	UART_TxNumber@i
  2292  030C                     l2018:	
  2293  030C  0828               	movf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  2294  030D  0242               	subwf	UART_TxNumber@i,w
  2295  030E  1803               	btfsc	3,0
  2296  030F  2BA1               	goto	l2030
  2297                           
  2298                           ;uart.c: 281: {
  2299                           ;uart.c: 284: if(v_number_u32!=0)
  2300  0310  0827               	movf	UART_TxNumber@v_number_u32+3,w
  2301  0311  0426               	iorwf	UART_TxNumber@v_number_u32+2,w
  2302  0312  0425               	iorwf	UART_TxNumber@v_number_u32+1,w
  2303  0313  0424               	iorwf	UART_TxNumber@v_number_u32,w
  2304  0314  1903               	skipnz
  2305  0315  2B6B               	goto	l2008
  2306                           
  2307                           ;uart.c: 285: {
  2308                           ;uart.c: 292: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u
      +                          32/v_numericSystem_u8)));
  2309  0316  0841               	movf	UART_TxNumber@v_numericSystem_u8,w
  2310  0317  00A9               	movwf	??_UART_TxNumber
  2311  0318  0829               	movf	??_UART_TxNumber,w
  2312  0319  00A0               	movwf	___bmul@multiplicand
  2313  031A  0827               	movf	UART_TxNumber@v_number_u32+3,w
  2314  031B  00F7               	movwf	___lldiv@dividend+3
  2315  031C  0826               	movf	UART_TxNumber@v_number_u32+2,w
  2316  031D  00F6               	movwf	___lldiv@dividend+2
  2317  031E  0825               	movf	UART_TxNumber@v_number_u32+1,w
  2318  031F  00F5               	movwf	___lldiv@dividend+1
  2319  0320  0824               	movf	UART_TxNumber@v_number_u32,w
  2320  0321  00F4               	movwf	___lldiv@dividend
  2321  0322  0841               	movf	UART_TxNumber@v_numericSystem_u8,w
  2322  0323  00AA               	movwf	??_UART_TxNumber+1
  2323  0324  01AB               	clrf	??_UART_TxNumber+2
  2324  0325  01AC               	clrf	??_UART_TxNumber+3
  2325  0326  01AD               	clrf	??_UART_TxNumber+4
  2326  0327  082D               	movf	??_UART_TxNumber+4,w
  2327  0328  00F3               	movwf	___lldiv@divisor+3
  2328  0329  082C               	movf	??_UART_TxNumber+3,w
  2329  032A  00F2               	movwf	___lldiv@divisor+2
  2330  032B  082B               	movf	??_UART_TxNumber+2,w
  2331  032C  00F1               	movwf	___lldiv@divisor+1
  2332  032D  082A               	movf	??_UART_TxNumber+1,w
  2333  032E  00F0               	movwf	___lldiv@divisor
  2334  032F  120A  158A  247D  120A  118A  	fcall	___lldiv
  2335  0334  0870               	movf	?___lldiv,w
  2336  0335  120A  158A  21BA  120A  118A  	fcall	___bmul
  2337  033A  3AFF               	xorlw	255
  2338  033B  3E01               	addlw	1
  2339  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2340  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2341  033E  0724               	addwf	UART_TxNumber@v_number_u32,w
  2342  033F  00AE               	movwf	??_UART_TxNumber+5
  2343  0340  0842               	movf	UART_TxNumber@i,w
  2344  0341  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  2345  0342  0084               	movwf	4
  2346  0343  082E               	movf	??_UART_TxNumber+5,w
  2347  0344  1383               	bcf	3,7	;select IRP bank0
  2348  0345  0080               	movwf	0
  2349                           
  2350                           ;uart.c: 293: v_number_u32=v_number_u32/v_numericSystem_u8;
  2351  0346  0841               	movf	UART_TxNumber@v_numericSystem_u8,w
  2352  0347  00A9               	movwf	??_UART_TxNumber
  2353  0348  01AA               	clrf	??_UART_TxNumber+1
  2354  0349  01AB               	clrf	??_UART_TxNumber+2
  2355  034A  01AC               	clrf	??_UART_TxNumber+3
  2356  034B  082C               	movf	??_UART_TxNumber+3,w
  2357  034C  00F3               	movwf	___lldiv@divisor+3
  2358  034D  082B               	movf	??_UART_TxNumber+2,w
  2359  034E  00F2               	movwf	___lldiv@divisor+2
  2360  034F  082A               	movf	??_UART_TxNumber+1,w
  2361  0350  00F1               	movwf	___lldiv@divisor+1
  2362  0351  0829               	movf	??_UART_TxNumber,w
  2363  0352  00F0               	movwf	___lldiv@divisor
  2364  0353  0827               	movf	UART_TxNumber@v_number_u32+3,w
  2365  0354  00F7               	movwf	___lldiv@dividend+3
  2366  0355  0826               	movf	UART_TxNumber@v_number_u32+2,w
  2367  0356  00F6               	movwf	___lldiv@dividend+2
  2368  0357  0825               	movf	UART_TxNumber@v_number_u32+1,w
  2369  0358  00F5               	movwf	___lldiv@dividend+1
  2370  0359  0824               	movf	UART_TxNumber@v_number_u32,w
  2371  035A  00F4               	movwf	___lldiv@dividend
  2372  035B  120A  158A  247D  120A  118A  	fcall	___lldiv
  2373  0360  0873               	movf	?___lldiv+3,w
  2374  0361  1283               	bcf	3,5	;RP0=0, select bank0
  2375  0362  1303               	bcf	3,6	;RP1=0, select bank0
  2376  0363  00A7               	movwf	UART_TxNumber@v_number_u32+3
  2377  0364  0872               	movf	?___lldiv+2,w
  2378  0365  00A6               	movwf	UART_TxNumber@v_number_u32+2
  2379  0366  0871               	movf	?___lldiv+1,w
  2380  0367  00A5               	movwf	UART_TxNumber@v_number_u32+1
  2381  0368  0870               	movf	?___lldiv,w
  2382  0369  00A4               	movwf	UART_TxNumber@v_number_u32
  2383                           
  2384                           ;uart.c: 294: }
  2385  036A  2B77               	goto	l2016
  2386  036B                     l2008:	
  2387                           
  2388                           ;uart.c: 295: else if( (v_numOfDigitsToTransmit_u8 == 0xffu) ||
  2389                           ;uart.c: 296: (v_numOfDigitsToTransmit_u8 > 10u))
  2390  036B  0A28               	incf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  2391  036C  1903               	btfsc	3,2
  2392  036D  2BA1               	goto	l2030
  2393  036E  300B               	movlw	11
  2394  036F  0228               	subwf	UART_TxNumber@v_numOfDigitsToTransmit_u8,w
  2395  0370  1803               	btfsc	3,0
  2396  0371  2BA1               	goto	l2030
  2397                           
  2398                           ;uart.c: 302: else
  2399                           ;uart.c: 303: {
  2400                           ;uart.c: 307: a[i]=0;
  2401                           
  2402                           ;uart.c: 301: }
  2403                           
  2404                           ;uart.c: 297: {
  2405                           ;uart.c: 300: break;
  2406  0372  0842               	movf	UART_TxNumber@i,w
  2407  0373  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  2408  0374  0084               	movwf	4
  2409  0375  1383               	bcf	3,7	;select IRP bank0
  2410  0376  0180               	clrf	0
  2411  0377                     l2016:	
  2412  0377  3001               	movlw	1
  2413  0378  00A9               	movwf	??_UART_TxNumber
  2414  0379  0829               	movf	??_UART_TxNumber,w
  2415  037A  07C2               	addwf	UART_TxNumber@i,f
  2416  037B  2B0C               	goto	l2018
  2417  037C                     l2020:	
  2418                           ;uart.c: 308: }
  2419                           ;uart.c: 309: }
  2420                           ;uart.c: 311: while(i)
  2421                           
  2422                           
  2423                           ;uart.c: 312: {
  2424                           ;uart.c: 314: UART_TxChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  2425  037C  0842               	movf	UART_TxNumber@i,w
  2426  037D  3EFF               	addlw	255
  2427  037E  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  2428  037F  0084               	movwf	4
  2429  0380  300A               	movlw	10
  2430  0381  1383               	bcf	3,7	;select IRP bank0
  2431  0382  0200               	subwf	0,w
  2432  0383  1803               	skipnc
  2433  0384  2B8C               	goto	l2024
  2434  0385  0842               	movf	UART_TxNumber@i,w
  2435  0386  3EFF               	addlw	255
  2436  0387  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  2437  0388  0084               	movwf	4
  2438  0389  0800               	movf	0,w
  2439  038A  3E30               	addlw	48
  2440  038B  2B92               	goto	L2
  2441  038C                     l2024:	
  2442  038C  0842               	movf	UART_TxNumber@i,w
  2443  038D  3EFF               	addlw	255
  2444  038E  3E35               	addlw	(low (UART_TxNumber@a| 0))& (0+255)
  2445  038F  0084               	movwf	4
  2446  0390  0800               	movf	0,w
  2447  0391  3E37               	addlw	55
  2448  0392                     L2:	
  2449  0392  00BF               	movwf	_UART_TxNumber$63
  2450  0393  3000               	movlw	0
  2451  0394  1803               	skipnc
  2452  0395  3001               	movlw	1
  2453  0396  00C0               	movwf	_UART_TxNumber$63+1
  2454  0397  083F               	movf	_UART_TxNumber$63,w
  2455  0398  120A  158A  219B  120A  118A  	fcall	_UART_TxChar
  2456                           
  2457                           ;uart.c: 315: i--;
  2458  039D  3001               	movlw	1
  2459  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2460  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2461  03A0  02C2               	subwf	UART_TxNumber@i,f
  2462  03A1                     l2030:	
  2463  03A1  0842               	movf	UART_TxNumber@i,w
  2464  03A2  1903               	btfsc	3,2
  2465  03A3  0008               	return
  2466  03A4  2B7C               	goto	l2020
  2467  03A5                     __end_of_UART_TxNumber:	
  2468                           
  2469                           	psect	text6
  2470  099B                     __ptext6:	
  2471 ;; *************** function _UART_TxChar *****************
  2472 ;; Defined at:
  2473 ;;		line 142 in file "../00-libfiles/uart.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;  var_uartData    1    wreg     unsigned char 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  var_uartData    1    0[COMMON] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2487 ;;      Params:         0       0       0       0       0
  2488 ;;      Locals:         1       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0
  2490 ;;      Totals:         1       0       0       0       0
  2491 ;;Total ram usage:        1 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_UART_TxString
  2497 ;;		_UART_RxString
  2498 ;;		_UART_TxNumber
  2499 ;;		_UART_Printf
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _UART_TxChar
  2505  099B                     _UART_TxChar:	
  2506                           
  2507                           ;incstack = 0
  2508                           ; Regs used in _UART_TxChar: [wreg]
  2509                           ;UART_TxChar@var_uartData_u8 stored from wreg
  2510  099B  00F0               	movwf	UART_TxChar@var_uartData_u8
  2511  099C                     l39:	
  2512                           ;uart.c: 144: while(TXIF==0);
  2513                           
  2514  099C  1283               	bcf	3,5	;RP0=0, select bank0
  2515  099D  1303               	bcf	3,6	;RP1=0, select bank0
  2516  099E  1E0C               	btfss	12,4	;volatile
  2517  099F  299C               	goto	l39
  2518                           
  2519                           ;uart.c: 145: TXIF=0;
  2520  09A0  120C               	bcf	12,4	;volatile
  2521                           
  2522                           ;uart.c: 146: TXREG=var_uartData_u8;
  2523  09A1  0870               	movf	UART_TxChar@var_uartData_u8,w
  2524  09A2  0099               	movwf	25	;volatile
  2525  09A3  0008               	return
  2526  09A4                     __end_of_UART_TxChar:	
  2527                           
  2528                           	psect	text7
  2529  09F6                     __ptext7:	
  2530 ;; *************** function _UART_Init *****************
  2531 ;; Defined at:
  2532 ;;		line 63 in file "../00-libfiles/uart.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  var_baudRate    4   16[BANK0 ] unsigned long 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;		None
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, status,0, pclath, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         0       4       0       0       0
  2547 ;;      Locals:         0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0
  2549 ;;      Totals:         0       4       0       0       0
  2550 ;;Total ram usage:        4 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    2
  2553 ;; This function calls:
  2554 ;;		_UART_SetBaudRate
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _UART_Init
  2562  09F6                     _UART_Init:	
  2563                           
  2564                           ;uart.c: 65: TRISC=0x80;
  2565                           
  2566                           ;incstack = 0
  2567                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2568  09F6  3080               	movlw	128
  2569  09F7  1683               	bsf	3,5	;RP0=1, select bank1
  2570  09F8  1303               	bcf	3,6	;RP1=0, select bank1
  2571  09F9  0087               	movwf	7	;volatile
  2572                           
  2573                           ;uart.c: 66: TXSTA=0x20;
  2574  09FA  3020               	movlw	32
  2575  09FB  0098               	movwf	24	;volatile
  2576                           
  2577                           ;uart.c: 67: RCSTA=0x90;
  2578  09FC  3090               	movlw	144
  2579  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  2580  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  2581  09FF  0098               	movwf	24	;volatile
  2582                           
  2583                           ;uart.c: 68: UART_SetBaudRate(var_baudRate_u32);
  2584  0A00  0833               	movf	UART_Init@var_baudRate_u32+3,w
  2585  0A01  00A3               	movwf	UART_SetBaudRate@var_baudRate_u32+3
  2586  0A02  0832               	movf	UART_Init@var_baudRate_u32+2,w
  2587  0A03  00A2               	movwf	UART_SetBaudRate@var_baudRate_u32+2
  2588  0A04  0831               	movf	UART_Init@var_baudRate_u32+1,w
  2589  0A05  00A1               	movwf	UART_SetBaudRate@var_baudRate_u32+1
  2590  0A06  0830               	movf	UART_Init@var_baudRate_u32,w
  2591  0A07  00A0               	movwf	UART_SetBaudRate@var_baudRate_u32
  2592  0A08  120A  158A  2550   	fcall	_UART_SetBaudRate
  2593  0A0B  0008               	return
  2594  0A0C                     __end_of_UART_Init:	
  2595                           
  2596                           	psect	text8
  2597  0D50                     __ptext8:	
  2598 ;; *************** function _UART_SetBaudRate *****************
  2599 ;; Defined at:
  2600 ;;		line 88 in file "../00-libfiles/uart.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;  var_baudRate    4    0[BANK0 ] unsigned long 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  RegValue        4   12[BANK0 ] unsigned long 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2, status,0, pclath, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2614 ;;      Params:         0       4       0       0       0
  2615 ;;      Locals:         0       4       0       0       0
  2616 ;;      Temps:          0       8       0       0       0
  2617 ;;      Totals:         0      16       0       0       0
  2618 ;;Total ram usage:       16 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    1
  2621 ;; This function calls:
  2622 ;;		___lldiv
  2623 ;; This function is called by:
  2624 ;;		_UART_Init
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _UART_SetBaudRate
  2630  0D50                     _UART_SetBaudRate:	
  2631                           
  2632                           ;uart.c: 90: uint32_t RegValue;
  2633                           ;uart.c: 92: if((var_baudRate_u32 >= 2400) && (var_baudRate_u32<=115200UL))
  2634                           
  2635                           ;incstack = 0
  2636                           ; Regs used in _UART_SetBaudRate: [wreg+status,2+status,0+pclath+cstack]
  2637  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0D52  0823               	movf	UART_SetBaudRate@var_baudRate_u32+3,w
  2640  0D53  1D03               	btfss	3,2
  2641  0D54  2D62               	goto	l1954
  2642  0D55  0822               	movf	UART_SetBaudRate@var_baudRate_u32+2,w
  2643  0D56  1D03               	btfss	3,2
  2644  0D57  2D62               	goto	l1954
  2645  0D58  3009               	movlw	9
  2646  0D59  0221               	subwf	UART_SetBaudRate@var_baudRate_u32+1,w
  2647  0D5A  1D03               	skipz
  2648  0D5B  2D60               	goto	u2483
  2649  0D5C  3060               	movlw	96
  2650  0D5D  0220               	subwf	UART_SetBaudRate@var_baudRate_u32,w
  2651  0D5E  1D03               	skipz
  2652  0D5F  2D60               	goto	u2483
  2653  0D60                     u2483:	
  2654  0D60  1C03               	btfss	3,0
  2655  0D61  2DBD               	goto	l1958
  2656  0D62                     l1954:	
  2657  0D62  0823               	movf	UART_SetBaudRate@var_baudRate_u32+3,w
  2658  0D63  1D03               	btfss	3,2
  2659  0D64  2DBD               	goto	l1958
  2660  0D65  3001               	movlw	1
  2661  0D66  0222               	subwf	UART_SetBaudRate@var_baudRate_u32+2,w
  2662  0D67  1D03               	skipz
  2663  0D68  2D71               	goto	u2493
  2664  0D69  30C2               	movlw	194
  2665  0D6A  0221               	subwf	UART_SetBaudRate@var_baudRate_u32+1,w
  2666  0D6B  1D03               	skipz
  2667  0D6C  2D71               	goto	u2493
  2668  0D6D  3001               	movlw	1
  2669  0D6E  0220               	subwf	UART_SetBaudRate@var_baudRate_u32,w
  2670  0D6F  1D03               	skipz
  2671  0D70  2D71               	goto	u2493
  2672  0D71                     u2493:	
  2673  0D71  1803               	btfsc	3,0
  2674  0D72  2DBD               	goto	l1958
  2675                           
  2676                           ;uart.c: 93: {
  2677                           ;uart.c: 96: RegValue = (uint32_t)((20000000UL / (64*(uint32_t)var_baudRate_u32)) - 1);
  2678  0D73  30FF               	movlw	255
  2679  0D74  00A4               	movwf	??_UART_SetBaudRate
  2680  0D75  30FF               	movlw	255
  2681  0D76  00A5               	movwf	??_UART_SetBaudRate+1
  2682  0D77  30FF               	movlw	255
  2683  0D78  00A6               	movwf	??_UART_SetBaudRate+2
  2684  0D79  30FF               	movlw	255
  2685  0D7A  00A7               	movwf	??_UART_SetBaudRate+3
  2686  0D7B  0820               	movf	UART_SetBaudRate@var_baudRate_u32,w
  2687  0D7C  00A8               	movwf	??_UART_SetBaudRate+4
  2688  0D7D  0821               	movf	UART_SetBaudRate@var_baudRate_u32+1,w
  2689  0D7E  00A9               	movwf	??_UART_SetBaudRate+5
  2690  0D7F  0822               	movf	UART_SetBaudRate@var_baudRate_u32+2,w
  2691  0D80  00AA               	movwf	??_UART_SetBaudRate+6
  2692  0D81  0823               	movf	UART_SetBaudRate@var_baudRate_u32+3,w
  2693  0D82  00AB               	movwf	??_UART_SetBaudRate+7
  2694  0D83  3006               	movlw	6
  2695  0D84                     u2505:	
  2696  0D84  1003               	clrc
  2697  0D85  0DA8               	rlf	??_UART_SetBaudRate+4,f
  2698  0D86  0DA9               	rlf	??_UART_SetBaudRate+5,f
  2699  0D87  0DAA               	rlf	??_UART_SetBaudRate+6,f
  2700  0D88  0DAB               	rlf	??_UART_SetBaudRate+7,f
  2701  0D89  3EFF               	addlw	-1
  2702  0D8A  1D03               	skipz
  2703  0D8B  2D84               	goto	u2505
  2704  0D8C  082B               	movf	??_UART_SetBaudRate+7,w
  2705  0D8D  00F3               	movwf	___lldiv@divisor+3
  2706  0D8E  082A               	movf	??_UART_SetBaudRate+6,w
  2707  0D8F  00F2               	movwf	___lldiv@divisor+2
  2708  0D90  0829               	movf	??_UART_SetBaudRate+5,w
  2709  0D91  00F1               	movwf	___lldiv@divisor+1
  2710  0D92  0828               	movf	??_UART_SetBaudRate+4,w
  2711  0D93  00F0               	movwf	___lldiv@divisor
  2712  0D94  3001               	movlw	1
  2713  0D95  00F7               	movwf	___lldiv@dividend+3
  2714  0D96  3031               	movlw	49
  2715  0D97  00F6               	movwf	___lldiv@dividend+2
  2716  0D98  302D               	movlw	45
  2717  0D99  00F5               	movwf	___lldiv@dividend+1
  2718  0D9A  3000               	movlw	0
  2719  0D9B  00F4               	movwf	___lldiv@dividend
  2720  0D9C  120A  158A  247D  120A  158A  	fcall	___lldiv
  2721  0DA1  0870               	movf	?___lldiv,w
  2722  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  2723  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  2724  0DA4  07A4               	addwf	??_UART_SetBaudRate,f
  2725  0DA5  0871               	movf	?___lldiv+1,w
  2726  0DA6  1803               	skipnc
  2727  0DA7  0F71               	incfsz	?___lldiv+1,w
  2728  0DA8  2DAA               	goto	u2510
  2729  0DA9  2DAB               	goto	u2511
  2730  0DAA                     u2510:	
  2731  0DAA  07A5               	addwf	??_UART_SetBaudRate+1,f
  2732  0DAB                     u2511:	
  2733  0DAB  0872               	movf	?___lldiv+2,w
  2734  0DAC  1803               	skipnc
  2735  0DAD  0F72               	incfsz	?___lldiv+2,w
  2736  0DAE  2DB0               	goto	u2512
  2737  0DAF  2DB1               	goto	u2513
  2738  0DB0                     u2512:	
  2739  0DB0  07A6               	addwf	??_UART_SetBaudRate+2,f
  2740  0DB1                     u2513:	
  2741  0DB1  0873               	movf	?___lldiv+3,w
  2742  0DB2  1803               	skipnc
  2743  0DB3  0A73               	incf	?___lldiv+3,w
  2744  0DB4  07A7               	addwf	??_UART_SetBaudRate+3,f
  2745  0DB5  0827               	movf	??_UART_SetBaudRate+3,w
  2746  0DB6  00AF               	movwf	UART_SetBaudRate@RegValue+3
  2747  0DB7  0826               	movf	??_UART_SetBaudRate+2,w
  2748  0DB8  00AE               	movwf	UART_SetBaudRate@RegValue+2
  2749  0DB9  0825               	movf	??_UART_SetBaudRate+1,w
  2750  0DBA  00AD               	movwf	UART_SetBaudRate@RegValue+1
  2751  0DBB  0824               	movf	??_UART_SetBaudRate,w
  2752  0DBC  2DC4               	goto	L3
  2753  0DBD                     l1958:	
  2754                           ;uart.c: 97: }
  2755                           
  2756                           
  2757                           ;uart.c: 98: else
  2758                           ;uart.c: 99: {
  2759                           ;uart.c: 101: RegValue = (uint32_t)((20000000UL / (64*(uint32_t)9600)) - 1);
  2760  0DBD  3000               	movlw	0
  2761  0DBE  00AF               	movwf	UART_SetBaudRate@RegValue+3
  2762  0DBF  3000               	movlw	0
  2763  0DC0  00AE               	movwf	UART_SetBaudRate@RegValue+2
  2764  0DC1  3000               	movlw	0
  2765  0DC2  00AD               	movwf	UART_SetBaudRate@RegValue+1
  2766  0DC3  301F               	movlw	31
  2767  0DC4                     L3:	
  2768  0DC4  00AC               	movwf	UART_SetBaudRate@RegValue
  2769                           
  2770                           ;uart.c: 102: }
  2771                           ;uart.c: 104: SPBRG = (uint8_t)RegValue;
  2772  0DC5  082C               	movf	UART_SetBaudRate@RegValue,w
  2773  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  2774  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  2775  0DC8  0099               	movwf	25	;volatile
  2776  0DC9  0008               	return
  2777  0DCA                     __end_of_UART_SetBaudRate:	
  2778                           
  2779                           	psect	text9
  2780  0E56                     __ptext9:	
  2781 ;; *************** function _LCD_SetUp *****************
  2782 ;; Defined at:
  2783 ;;		line 129 in file "../00-libfiles/lcd.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  RS              1    wreg     enum E33
  2786 ;;  RW              1    0[BANK0 ] enum E33
  2787 ;;  EN              1    1[BANK0 ] enum E33
  2788 ;;  D0              1    2[BANK0 ] enum E33
  2789 ;;  D1              1    3[BANK0 ] enum E33
  2790 ;;  D2              1    4[BANK0 ] enum E33
  2791 ;;  D3              1    5[BANK0 ] enum E33
  2792 ;;  D4              1    6[BANK0 ] enum E33
  2793 ;;  D5              1    7[BANK0 ] enum E33
  2794 ;;  D6              1    8[BANK0 ] enum E33
  2795 ;;  D7              1    9[BANK0 ] enum E33
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  RS              1    6[COMMON] enum E33
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2807 ;;      Params:         0      10       0       0       0
  2808 ;;      Locals:         1       0       0       0       0
  2809 ;;      Temps:          1       0       0       0       0
  2810 ;;      Totals:         2      10       0       0       0
  2811 ;;Total ram usage:       12 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    1
  2814 ;; This function calls:
  2815 ;;		_GPIO_PinDirection
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _LCD_SetUp
  2823  0E56                     _LCD_SetUp:	
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _LCD_SetUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2827                           ;LCD_SetUp@RS stored from wreg
  2828  0E56  00F6               	movwf	LCD_SetUp@RS
  2829                           
  2830                           ;lcd.c: 142: LCDConfig.RS = RS;
  2831  0E57  0876               	movf	LCD_SetUp@RS,w
  2832  0E58  00F5               	movwf	??_LCD_SetUp
  2833  0E59  0875               	movf	??_LCD_SetUp,w
  2834  0E5A  1683               	bsf	3,5	;RP0=1, select bank1
  2835  0E5B  1303               	bcf	3,6	;RP1=0, select bank1
  2836  0E5C  00D7               	movwf	(_LCDConfig^(0+128)+3)
  2837                           
  2838                           ;lcd.c: 143: LCDConfig.RW = RW;
  2839  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  2840  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  2841  0E5F  0820               	movf	LCD_SetUp@RW,w
  2842  0E60  00F5               	movwf	??_LCD_SetUp
  2843  0E61  0875               	movf	??_LCD_SetUp,w
  2844  0E62  1683               	bsf	3,5	;RP0=1, select bank1
  2845  0E63  1303               	bcf	3,6	;RP1=0, select bank1
  2846  0E64  00D8               	movwf	(_LCDConfig^(0+128)+4)
  2847                           
  2848                           ;lcd.c: 144: LCDConfig.EN = EN;
  2849  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  2850  0E66  1303               	bcf	3,6	;RP1=0, select bank0
  2851  0E67  0821               	movf	LCD_SetUp@EN,w
  2852  0E68  00F5               	movwf	??_LCD_SetUp
  2853  0E69  0875               	movf	??_LCD_SetUp,w
  2854  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  2855  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  2856  0E6C  00D9               	movwf	(_LCDConfig^(0+128)+5)
  2857                           
  2858                           ;lcd.c: 146: LCDConfig.D0 = D0;
  2859  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0E6F  0822               	movf	LCD_SetUp@D0,w
  2862  0E70  00F5               	movwf	??_LCD_SetUp
  2863  0E71  0875               	movf	??_LCD_SetUp,w
  2864  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  2865  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  2866  0E74  00DA               	movwf	(_LCDConfig^(0+128)+6)
  2867                           
  2868                           ;lcd.c: 147: LCDConfig.D1 = D1;
  2869  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  2870  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  2871  0E77  0823               	movf	LCD_SetUp@D1,w
  2872  0E78  00F5               	movwf	??_LCD_SetUp
  2873  0E79  0875               	movf	??_LCD_SetUp,w
  2874  0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  2875  0E7B  1303               	bcf	3,6	;RP1=0, select bank1
  2876  0E7C  00DB               	movwf	(_LCDConfig^(0+128)+7)
  2877                           
  2878                           ;lcd.c: 148: LCDConfig.D2 = D2;
  2879  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  2881  0E7F  0824               	movf	LCD_SetUp@D2,w
  2882  0E80  00F5               	movwf	??_LCD_SetUp
  2883  0E81  0875               	movf	??_LCD_SetUp,w
  2884  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  2885  0E83  1303               	bcf	3,6	;RP1=0, select bank1
  2886  0E84  00DC               	movwf	(_LCDConfig^(0+128)+8)
  2887                           
  2888                           ;lcd.c: 149: LCDConfig.D3 = D3;
  2889  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  2890  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  2891  0E87  0825               	movf	LCD_SetUp@D3,w
  2892  0E88  00F5               	movwf	??_LCD_SetUp
  2893  0E89  0875               	movf	??_LCD_SetUp,w
  2894  0E8A  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0E8B  1303               	bcf	3,6	;RP1=0, select bank1
  2896  0E8C  00DD               	movwf	(_LCDConfig^(0+128)+9)
  2897                           
  2898                           ;lcd.c: 150: LCDConfig.D4 = D4;
  2899  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  2900  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  2901  0E8F  0826               	movf	LCD_SetUp@D4,w
  2902  0E90  00F5               	movwf	??_LCD_SetUp
  2903  0E91  0875               	movf	??_LCD_SetUp,w
  2904  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  2905  0E93  1303               	bcf	3,6	;RP1=0, select bank1
  2906  0E94  00DE               	movwf	(_LCDConfig^(0+128)+10)
  2907                           
  2908                           ;lcd.c: 151: LCDConfig.D5 = D5;
  2909  0E95  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0E96  1303               	bcf	3,6	;RP1=0, select bank0
  2911  0E97  0827               	movf	LCD_SetUp@D5,w
  2912  0E98  00F5               	movwf	??_LCD_SetUp
  2913  0E99  0875               	movf	??_LCD_SetUp,w
  2914  0E9A  1683               	bsf	3,5	;RP0=1, select bank1
  2915  0E9B  1303               	bcf	3,6	;RP1=0, select bank1
  2916  0E9C  00DF               	movwf	(_LCDConfig^(0+128)+11)
  2917                           
  2918                           ;lcd.c: 152: LCDConfig.D6 = D6;
  2919  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  2920  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  2921  0E9F  0828               	movf	LCD_SetUp@D6,w
  2922  0EA0  00F5               	movwf	??_LCD_SetUp
  2923  0EA1  0875               	movf	??_LCD_SetUp,w
  2924  0EA2  1683               	bsf	3,5	;RP0=1, select bank1
  2925  0EA3  1303               	bcf	3,6	;RP1=0, select bank1
  2926  0EA4  00E0               	movwf	(_LCDConfig^(0+128)+12)
  2927                           
  2928                           ;lcd.c: 153: LCDConfig.D7 = D7;
  2929  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0EA7  0829               	movf	LCD_SetUp@D7,w
  2932  0EA8  00F5               	movwf	??_LCD_SetUp
  2933  0EA9  0875               	movf	??_LCD_SetUp,w
  2934  0EAA  1683               	bsf	3,5	;RP0=1, select bank1
  2935  0EAB  1303               	bcf	3,6	;RP1=0, select bank1
  2936  0EAC  00E1               	movwf	(_LCDConfig^(0+128)+13)
  2937                           
  2938                           ;lcd.c: 156: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
  2939  0EAD  1283               	bcf	3,5	;RP0=0, select bank0
  2940  0EAE  1303               	bcf	3,6	;RP1=0, select bank0
  2941  0EAF  0A22               	incf	LCD_SetUp@D0,w
  2942  0EB0  1903               	btfsc	3,2
  2943  0EB1  2EBA               	goto	l2280
  2944  0EB2  0A23               	incf	LCD_SetUp@D1,w
  2945  0EB3  1903               	btfsc	3,2
  2946  0EB4  2EBA               	goto	l2280
  2947  0EB5  0A24               	incf	LCD_SetUp@D2,w
  2948  0EB6  1D03               	btfss	3,2
  2949  0EB7  0A25               	incf	LCD_SetUp@D3,w
  2950  0EB8  1D03               	btfss	3,2
  2951  0EB9  2EC1               	goto	l2282
  2952  0EBA                     l2280:	
  2953                           
  2954                           ;lcd.c: 157: {
  2955                           ;lcd.c: 158: LCDConfig.v_LcdMode_U8 = 4;
  2956  0EBA  3004               	movlw	4
  2957  0EBB  00F5               	movwf	??_LCD_SetUp
  2958  0EBC  0875               	movf	??_LCD_SetUp,w
  2959  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  2960  0EBE  1303               	bcf	3,6	;RP1=0, select bank1
  2961  0EBF  00D6               	movwf	(_LCDConfig^(0+128)+2)
  2962                           
  2963                           ;lcd.c: 159: }
  2964  0EC0  2EEB               	goto	l2292
  2965  0EC1                     l2282:	
  2966                           
  2967                           ;lcd.c: 160: else
  2968                           ;lcd.c: 161: {
  2969                           ;lcd.c: 162: LCDConfig.v_LcdMode_U8 = 8;
  2970  0EC1  3008               	movlw	8
  2971  0EC2  00F5               	movwf	??_LCD_SetUp
  2972  0EC3  0875               	movf	??_LCD_SetUp,w
  2973  0EC4  1683               	bsf	3,5	;RP0=1, select bank1
  2974  0EC5  1303               	bcf	3,6	;RP1=0, select bank1
  2975  0EC6  00D6               	movwf	(_LCDConfig^(0+128)+2)
  2976                           
  2977                           ;lcd.c: 163: GPIO_PinDirection(D0,0x00u);
  2978  0EC7  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  2979  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0ECA  0822               	movf	LCD_SetUp@D0,w
  2982  0ECB  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  2983                           
  2984                           ;lcd.c: 164: GPIO_PinDirection(D1,0x00u);
  2985  0ED0  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  2986  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0ED3  0823               	movf	LCD_SetUp@D1,w
  2989  0ED4  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  2990                           
  2991                           ;lcd.c: 165: GPIO_PinDirection(D2,0x00u);
  2992  0ED9  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  2993  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  2994  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  2995  0EDC  0824               	movf	LCD_SetUp@D2,w
  2996  0EDD  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  2997                           
  2998                           ;lcd.c: 166: GPIO_PinDirection(D3,0x00u);
  2999  0EE2  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3000  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0EE5  0825               	movf	LCD_SetUp@D3,w
  3003  0EE6  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3004  0EEB                     l2292:	
  3005                           
  3006                           ;lcd.c: 167: }
  3007                           ;lcd.c: 170: GPIO_PinDirection(RS,0x00u);
  3008  0EEB  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3009  0EEC  0876               	movf	LCD_SetUp@RS,w
  3010  0EED  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3011                           
  3012                           ;lcd.c: 171: GPIO_PinDirection(RW,0x00u);
  3013  0EF2  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3014  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  3015  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  3016  0EF5  0820               	movf	LCD_SetUp@RW,w
  3017  0EF6  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3018                           
  3019                           ;lcd.c: 172: GPIO_PinDirection(EN,0x00u);
  3020  0EFB  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3021  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  3022  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0EFE  0821               	movf	LCD_SetUp@EN,w
  3024  0EFF  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3025                           
  3026                           ;lcd.c: 174: GPIO_PinDirection(D4,0x00u);
  3027  0F04  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3028  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  3029  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  3030  0F07  0826               	movf	LCD_SetUp@D4,w
  3031  0F08  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3032                           
  3033                           ;lcd.c: 175: GPIO_PinDirection(D5,0x00u);
  3034  0F0D  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3035  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  3036  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  3037  0F10  0827               	movf	LCD_SetUp@D5,w
  3038  0F11  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3039                           
  3040                           ;lcd.c: 176: GPIO_PinDirection(D6,0x00u);
  3041  0F16  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3042  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0F19  0828               	movf	LCD_SetUp@D6,w
  3045  0F1A  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  3046                           
  3047                           ;lcd.c: 177: GPIO_PinDirection(D7,0x00u);
  3048  0F1F  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  3049  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  3050  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  3051  0F22  0829               	movf	LCD_SetUp@D7,w
  3052  0F23  120A  158A  2727   	fcall	_GPIO_PinDirection
  3053  0F26  0008               	return
  3054  0F27                     __end_of_LCD_SetUp:	
  3055                           
  3056                           	psect	text10
  3057  05BA                     __ptext10:	
  3058 ;; *************** function _LCD_Printf *****************
  3059 ;; Defined at:
  3060 ;;		line 669 in file "../00-libfiles/lcd.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  argList         1    wreg     PTR const unsigned char 
  3063 ;;		 -> STR_3(16), 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  argList         1   41[BANK0 ] PTR const unsigned char 
  3066 ;;		 -> STR_3(16), 
  3067 ;;  v_num_u32       4   48[BANK0 ] unsigned long 
  3068 ;;  v_num_s32       4   42[BANK0 ] long 
  3069 ;;  v_num_u16       2   52[BANK0 ] unsigned int 
  3070 ;;  v_num_s16       2   46[BANK0 ] int 
  3071 ;;  argp            1   57[BANK0 ] PTR void [1]
  3072 ;;		 -> ?_LCD_Printf(1), 
  3073 ;;  v_numOfDigit    1   56[BANK0 ] unsigned char 
  3074 ;;  ch              1   55[BANK0 ] unsigned char 
  3075 ;;  ptr             1   54[BANK0 ] PTR const unsigned char 
  3076 ;;		 -> STR_3(16), 
  3077 ;;  str             1   40[BANK0 ] PTR unsigned char 
  3078 ;;		 -> main@str(50), 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      void 
  3081 ;; Registers used:
  3082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3088 ;;      Params:         0       3       0       0       0
  3089 ;;      Locals:         0      18       0       0       0
  3090 ;;      Temps:          0       2       0       0       0
  3091 ;;      Totals:         0      23       0       0       0
  3092 ;;Total ram usage:       23 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    7
  3095 ;; This function calls:
  3096 ;;		_LCD_DisplayChar
  3097 ;;		_LCD_DisplayNumber
  3098 ;;		_LCD_DisplayString
  3099 ;;		___bmul
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _LCD_Printf
  3107  05BA                     _LCD_Printf:	
  3108                           
  3109                           ;incstack = 0
  3110 ;; using string table level
  3111                           ; Regs used in _LCD_Printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3112                           ;LCD_Printf@argList stored from wreg
  3113  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  3114  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  3115  05BC  00C9               	movwf	LCD_Printf@argList
  3116                           
  3117                           ;lcd.c: 671: const char *ptr;
  3118                           ;lcd.c: 672: va_list argp;
  3119                           ;lcd.c: 673: sint16_t v_num_s16;
  3120                           ;lcd.c: 674: sint32_t v_num_s32;
  3121                           ;lcd.c: 675: uint16_t v_num_u16;
  3122                           ;lcd.c: 676: uint32_t v_num_u32;
  3123                           ;lcd.c: 677: char *str;
  3124                           ;lcd.c: 678: char ch;
  3125                           ;lcd.c: 679: uint8_t v_numOfDigitsToDisp_u8;
  3126                           ;lcd.c: 684: *argp = __va_start();
  3127  05BD  3043               	movlw	(low (?_LCD_Printf| 0))& (0+255)
  3128  05BE  00C6               	movwf	??_LCD_Printf
  3129  05BF  0846               	movf	??_LCD_Printf,w
  3130  05C0  00D9               	movwf	LCD_Printf@argp
  3131                           
  3132                           ;lcd.c: 687: for(ptr = argList; *ptr != '\0'; ptr++)
  3133  05C1  0849               	movf	LCD_Printf@argList,w
  3134  05C2  00C6               	movwf	??_LCD_Printf
  3135  05C3  0846               	movf	??_LCD_Printf,w
  3136  05C4  00D6               	movwf	LCD_Printf@ptr
  3137  05C5                     l2436:	
  3138  05C5  0856               	movf	LCD_Printf@ptr,w
  3139  05C6  0084               	movwf	4
  3140  05C7  120A  158A  200A  120A  118A  	fcall	stringdir
  3141  05CC  3A00               	xorlw	0
  3142  05CD  1903               	btfsc	3,2
  3143  05CE  0008               	return
  3144                           
  3145                           ;lcd.c: 688: {
  3146                           ;lcd.c: 690: ch= *ptr;
  3147  05CF  0856               	movf	LCD_Printf@ptr,w
  3148  05D0  0084               	movwf	4
  3149  05D1  120A  158A  200A  120A  118A  	fcall	stringdir
  3150  05D6  00C6               	movwf	??_LCD_Printf
  3151  05D7  0846               	movf	??_LCD_Printf,w
  3152  05D8  00D7               	movwf	LCD_Printf@ch
  3153                           
  3154                           ;lcd.c: 691: if(ch == '%')
  3155  05D9  3025               	movlw	37
  3156  05DA  0657               	xorwf	LCD_Printf@ch,w
  3157  05DB  1D03               	btfss	3,2
  3158  05DC  2FC5               	goto	l2432
  3159                           
  3160                           ;lcd.c: 692: {
  3161                           ;lcd.c: 693: ptr++;
  3162  05DD  3001               	movlw	1
  3163  05DE  00C6               	movwf	??_LCD_Printf
  3164  05DF  0846               	movf	??_LCD_Printf,w
  3165  05E0  07D6               	addwf	LCD_Printf@ptr,f
  3166                           
  3167                           ;lcd.c: 694: ch = *ptr;
  3168  05E1  0856               	movf	LCD_Printf@ptr,w
  3169  05E2  0084               	movwf	4
  3170  05E3  120A  158A  200A  120A  118A  	fcall	stringdir
  3171  05E8  00C6               	movwf	??_LCD_Printf
  3172  05E9  0846               	movf	??_LCD_Printf,w
  3173  05EA  00D7               	movwf	LCD_Printf@ch
  3174                           
  3175                           ;lcd.c: 695: if((ch>=0x30) && (ch<=0x39))
  3176  05EB  3030               	movlw	48
  3177  05EC  0257               	subwf	LCD_Printf@ch,w
  3178  05ED  1C03               	skipc
  3179  05EE  2E1C               	goto	l2346
  3180  05EF  303A               	movlw	58
  3181  05F0  0257               	subwf	LCD_Printf@ch,w
  3182  05F1  1803               	skipnc
  3183  05F2  2E1C               	goto	l2346
  3184                           
  3185                           ;lcd.c: 696: {
  3186                           ;lcd.c: 697: v_numOfDigitsToDisp_u8 = 0;
  3187  05F3  01D8               	clrf	LCD_Printf@v_numOfDigitsToDisp_u8
  3188  05F4                     l2342:	
  3189                           ;lcd.c: 698: while((ch>=0x30) && (ch<=0x39))
  3190                           
  3191  05F4  3030               	movlw	48
  3192  05F5  0257               	subwf	LCD_Printf@ch,w
  3193  05F6  1C03               	skipc
  3194  05F7  2F93               	goto	l2430
  3195  05F8  303A               	movlw	58
  3196  05F9  0257               	subwf	LCD_Printf@ch,w
  3197  05FA  1803               	btfsc	3,0
  3198  05FB  2F93               	goto	l2430
  3199                           
  3200                           ;lcd.c: 699: {
  3201                           ;lcd.c: 700: v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
  3202  05FC  300A               	movlw	10
  3203  05FD  00C6               	movwf	??_LCD_Printf
  3204  05FE  0846               	movf	??_LCD_Printf,w
  3205  05FF  00A0               	movwf	___bmul@multiplicand
  3206  0600  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3207  0601  120A  158A  21BA  120A  118A  	fcall	___bmul
  3208  0606  1283               	bcf	3,5	;RP0=0, select bank0
  3209  0607  1303               	bcf	3,6	;RP1=0, select bank0
  3210  0608  0757               	addwf	LCD_Printf@ch,w
  3211  0609  3ED0               	addlw	208
  3212  060A  00C7               	movwf	??_LCD_Printf+1
  3213  060B  0847               	movf	??_LCD_Printf+1,w
  3214  060C  00D8               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8
  3215                           
  3216                           ;lcd.c: 701: ptr++;
  3217  060D  3001               	movlw	1
  3218  060E  00C6               	movwf	??_LCD_Printf
  3219  060F  0846               	movf	??_LCD_Printf,w
  3220  0610  07D6               	addwf	LCD_Printf@ptr,f
  3221                           
  3222                           ;lcd.c: 702: ch = *ptr;
  3223  0611  0856               	movf	LCD_Printf@ptr,w
  3224  0612  0084               	movwf	4
  3225  0613  120A  158A  200A  120A  118A  	fcall	stringdir
  3226  0618  00C6               	movwf	??_LCD_Printf
  3227  0619  0846               	movf	??_LCD_Printf,w
  3228  061A  00D7               	movwf	LCD_Printf@ch
  3229  061B  2DF4               	goto	l2342
  3230  061C                     l2346:	
  3231                           ;lcd.c: 703: }
  3232                           ;lcd.c: 704: }
  3233                           
  3234                           
  3235                           ;lcd.c: 705: else
  3236                           ;lcd.c: 706: {
  3237                           ;lcd.c: 707: v_numOfDigitsToDisp_u8 = 0xffu;
  3238  061C  30FF               	movlw	255
  3239  061D  00C6               	movwf	??_LCD_Printf
  3240  061E  0846               	movf	??_LCD_Printf,w
  3241  061F  00D8               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8
  3242                           
  3243                           ;lcd.c: 708: }
  3244                           ;lcd.c: 711: switch(ch)
  3245  0620  2F93               	goto	l2430
  3246  0621                     l2348:	
  3247                           ;lcd.c: 712: {
  3248                           ;lcd.c: 713: case 'C':
  3249                           
  3250                           
  3251                           ;lcd.c: 714: case 'c':
  3252                           ;lcd.c: 715: ch = (*(int *)__va_arg((*(int **)argp), (int)0));
  3253  0621  0859               	movf	LCD_Printf@argp,w
  3254  0622  0084               	movwf	4
  3255  0623  1383               	bcf	3,7	;select IRP bank0
  3256  0624  0800               	movf	0,w
  3257  0625  00C6               	movwf	??_LCD_Printf
  3258  0626  0846               	movf	??_LCD_Printf,w
  3259  0627  00D7               	movwf	LCD_Printf@ch
  3260  0628  3002               	movlw	2
  3261  0629  00C6               	movwf	??_LCD_Printf
  3262  062A  0846               	movf	??_LCD_Printf,w
  3263  062B  07D9               	addwf	LCD_Printf@argp,f
  3264  062C  2FC5               	goto	l2432
  3265  062D                     l2354:	
  3266                           ;lcd.c: 719: case 'd':
  3267                           
  3268                           ;lcd.c: 717: break;
  3269                           
  3270                           ;lcd.c: 716: LCD_DisplayChar(ch);
  3271                           
  3272                           
  3273                           ;lcd.c: 720: v_num_s16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  3274  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3275  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3276  062F  0859               	movf	LCD_Printf@argp,w
  3277  0630  0084               	movwf	4
  3278  0631  1383               	bcf	3,7	;select IRP bank0
  3279  0632  0800               	movf	0,w
  3280  0633  00CE               	movwf	LCD_Printf@v_num_s16
  3281  0634  0A84               	incf	4,f
  3282  0635  0800               	movf	0,w
  3283  0636  00CF               	movwf	LCD_Printf@v_num_s16+1
  3284  0637  3002               	movlw	2
  3285  0638  00C6               	movwf	??_LCD_Printf
  3286  0639  0846               	movf	??_LCD_Printf,w
  3287  063A  07D9               	addwf	LCD_Printf@argp,f
  3288                           
  3289                           ;lcd.c: 721: if(v_num_s16<0)
  3290  063B  1FCF               	btfss	LCD_Printf@v_num_s16+1,7
  3291  063C  2E48               	goto	l2364
  3292                           
  3293                           ;lcd.c: 722: {
  3294                           ;lcd.c: 723: v_num_s16 = -v_num_s16;
  3295  063D  09CE               	comf	LCD_Printf@v_num_s16,f
  3296  063E  09CF               	comf	LCD_Printf@v_num_s16+1,f
  3297  063F  0ACE               	incf	LCD_Printf@v_num_s16,f
  3298  0640  1903               	skipnz
  3299  0641  0ACF               	incf	LCD_Printf@v_num_s16+1,f
  3300                           
  3301                           ;lcd.c: 724: LCD_DisplayChar('-');
  3302  0642  302D               	movlw	45
  3303  0643  120A  118A  2005  120A  118A  	fcall	_LCD_DisplayChar
  3304  0648                     l2364:	
  3305                           
  3306                           ;lcd.c: 725: }
  3307                           ;lcd.c: 726: LCD_DisplayNumber(10u,v_num_s16,v_numOfDigitsToDisp_u8);
  3308  0648  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0649  1303               	bcf	3,6	;RP1=0, select bank0
  3310  064A  084E               	movf	LCD_Printf@v_num_s16,w
  3311  064B  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3312  064C  084F               	movf	LCD_Printf@v_num_s16+1,w
  3313  064D  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3314  064E  3000               	movlw	0
  3315  064F  1BA5               	btfsc	LCD_DisplayNumber@v_number_u32+1,7
  3316  0650  30FF               	movlw	255
  3317  0651  00A6               	movwf	LCD_DisplayNumber@v_number_u32+2
  3318  0652  00A7               	movwf	LCD_DisplayNumber@v_number_u32+3
  3319  0653  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3320  0654  00C6               	movwf	??_LCD_Printf
  3321  0655  0846               	movf	??_LCD_Printf,w
  3322  0656  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3323  0657  300A               	movlw	10
  3324  0658  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3325                           
  3326                           ;lcd.c: 727: break;
  3327  065D  2FCB               	goto	l2434
  3328  065E                     l2366:	
  3329                           ;lcd.c: 729: case 'D':
  3330                           
  3331                           
  3332                           ;lcd.c: 730: v_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  3333  065E  1283               	bcf	3,5	;RP0=0, select bank0
  3334  065F  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0660  0859               	movf	LCD_Printf@argp,w
  3336  0661  0084               	movwf	4
  3337  0662  1383               	bcf	3,7	;select IRP bank0
  3338  0663  0800               	movf	0,w
  3339  0664  00CA               	movwf	LCD_Printf@v_num_s32
  3340  0665  0A84               	incf	4,f
  3341  0666  0800               	movf	0,w
  3342  0667  00CB               	movwf	LCD_Printf@v_num_s32+1
  3343  0668  0A84               	incf	4,f
  3344  0669  0800               	movf	0,w
  3345  066A  00CC               	movwf	LCD_Printf@v_num_s32+2
  3346  066B  0A84               	incf	4,f
  3347  066C  0800               	movf	0,w
  3348  066D  00CD               	movwf	LCD_Printf@v_num_s32+3
  3349  066E  3004               	movlw	4
  3350  066F  00C6               	movwf	??_LCD_Printf
  3351  0670  0846               	movf	??_LCD_Printf,w
  3352  0671  07D9               	addwf	LCD_Printf@argp,f
  3353                           
  3354                           ;lcd.c: 731: if(v_num_s32<0)
  3355  0672  1FCD               	btfss	LCD_Printf@v_num_s32+3,7
  3356  0673  2E85               	goto	l278
  3357                           
  3358                           ;lcd.c: 732: {
  3359                           ;lcd.c: 733: v_num_s32 = -v_num_s32;
  3360  0674  09CA               	comf	LCD_Printf@v_num_s32,f
  3361  0675  09CB               	comf	LCD_Printf@v_num_s32+1,f
  3362  0676  09CC               	comf	LCD_Printf@v_num_s32+2,f
  3363  0677  09CD               	comf	LCD_Printf@v_num_s32+3,f
  3364  0678  0ACA               	incf	LCD_Printf@v_num_s32,f
  3365  0679  1903               	skipnz
  3366  067A  0ACB               	incf	LCD_Printf@v_num_s32+1,f
  3367  067B  1903               	skipnz
  3368  067C  0ACC               	incf	LCD_Printf@v_num_s32+2,f
  3369  067D  1903               	skipnz
  3370  067E  0ACD               	incf	LCD_Printf@v_num_s32+3,f
  3371                           
  3372                           ;lcd.c: 734: LCD_DisplayChar('-');
  3373  067F  302D               	movlw	45
  3374  0680  120A  118A  2005  120A  118A  	fcall	_LCD_DisplayChar
  3375  0685                     l278:	
  3376                           
  3377                           ;lcd.c: 735: }
  3378                           ;lcd.c: 736: LCD_DisplayNumber(10u,v_num_s32,v_numOfDigitsToDisp_u8);
  3379  0685  1283               	bcf	3,5	;RP0=0, select bank0
  3380  0686  1303               	bcf	3,6	;RP1=0, select bank0
  3381  0687  084D               	movf	LCD_Printf@v_num_s32+3,w
  3382  0688  00A7               	movwf	LCD_DisplayNumber@v_number_u32+3
  3383  0689  084C               	movf	LCD_Printf@v_num_s32+2,w
  3384  068A  00A6               	movwf	LCD_DisplayNumber@v_number_u32+2
  3385  068B  084B               	movf	LCD_Printf@v_num_s32+1,w
  3386  068C  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3387  068D  084A               	movf	LCD_Printf@v_num_s32,w
  3388  068E  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3389  068F  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3390  0690  00C6               	movwf	??_LCD_Printf
  3391  0691  0846               	movf	??_LCD_Printf,w
  3392  0692  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3393  0693  300A               	movlw	10
  3394  0694  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3395                           
  3396                           ;lcd.c: 737: break;
  3397  0699  2FCB               	goto	l2434
  3398  069A                     l2376:	
  3399                           ;lcd.c: 739: case 'u':
  3400                           
  3401                           
  3402                           ;lcd.c: 740: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  3403  069A  1283               	bcf	3,5	;RP0=0, select bank0
  3404  069B  1303               	bcf	3,6	;RP1=0, select bank0
  3405  069C  0859               	movf	LCD_Printf@argp,w
  3406  069D  0084               	movwf	4
  3407  069E  1383               	bcf	3,7	;select IRP bank0
  3408  069F  0800               	movf	0,w
  3409  06A0  00D4               	movwf	LCD_Printf@v_num_u16
  3410  06A1  0A84               	incf	4,f
  3411  06A2  0800               	movf	0,w
  3412  06A3  00D5               	movwf	LCD_Printf@v_num_u16+1
  3413  06A4  3002               	movlw	2
  3414  06A5  00C6               	movwf	??_LCD_Printf
  3415  06A6  0846               	movf	??_LCD_Printf,w
  3416  06A7  07D9               	addwf	LCD_Printf@argp,f
  3417                           
  3418                           ;lcd.c: 741: LCD_DisplayNumber(10u,v_num_u16,v_numOfDigitsToDisp_u8);
  3419  06A8  0854               	movf	LCD_Printf@v_num_u16,w
  3420  06A9  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3421  06AA  0855               	movf	LCD_Printf@v_num_u16+1,w
  3422  06AB  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3423  06AC  01A6               	clrf	LCD_DisplayNumber@v_number_u32+2
  3424  06AD  01A7               	clrf	LCD_DisplayNumber@v_number_u32+3
  3425  06AE  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3426  06AF  00C6               	movwf	??_LCD_Printf
  3427  06B0  0846               	movf	??_LCD_Printf,w
  3428  06B1  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3429  06B2  300A               	movlw	10
  3430  06B3  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3431                           
  3432                           ;lcd.c: 742: break;
  3433  06B8  2FCB               	goto	l2434
  3434  06B9                     l2382:	
  3435                           ;lcd.c: 744: case 'U':
  3436                           
  3437                           
  3438                           ;lcd.c: 745: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  3439  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  3440  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  3441  06BB  0859               	movf	LCD_Printf@argp,w
  3442  06BC  0084               	movwf	4
  3443  06BD  1383               	bcf	3,7	;select IRP bank0
  3444  06BE  0800               	movf	0,w
  3445  06BF  00D0               	movwf	LCD_Printf@v_num_u32
  3446  06C0  0A84               	incf	4,f
  3447  06C1  0800               	movf	0,w
  3448  06C2  00D1               	movwf	LCD_Printf@v_num_u32+1
  3449  06C3  0A84               	incf	4,f
  3450  06C4  0800               	movf	0,w
  3451  06C5  00D2               	movwf	LCD_Printf@v_num_u32+2
  3452  06C6  0A84               	incf	4,f
  3453  06C7  0800               	movf	0,w
  3454  06C8  00D3               	movwf	LCD_Printf@v_num_u32+3
  3455  06C9  3004               	movlw	4
  3456  06CA  00C6               	movwf	??_LCD_Printf
  3457  06CB  0846               	movf	??_LCD_Printf,w
  3458  06CC  07D9               	addwf	LCD_Printf@argp,f
  3459                           
  3460                           ;lcd.c: 746: LCD_DisplayNumber(10u,v_num_u32,v_numOfDigitsToDisp_u8);
  3461  06CD  0853               	movf	LCD_Printf@v_num_u32+3,w
  3462  06CE  00A7               	movwf	LCD_DisplayNumber@v_number_u32+3
  3463  06CF  0852               	movf	LCD_Printf@v_num_u32+2,w
  3464  06D0  00A6               	movwf	LCD_DisplayNumber@v_number_u32+2
  3465  06D1  0851               	movf	LCD_Printf@v_num_u32+1,w
  3466  06D2  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3467  06D3  0850               	movf	LCD_Printf@v_num_u32,w
  3468  06D4  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3469  06D5  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3470  06D6  00C6               	movwf	??_LCD_Printf
  3471  06D7  0846               	movf	??_LCD_Printf,w
  3472  06D8  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3473  06D9  300A               	movlw	10
  3474  06DA  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3475                           
  3476                           ;lcd.c: 747: break;
  3477  06DF  2FCB               	goto	l2434
  3478  06E0                     l2388:	
  3479                           ;lcd.c: 749: case 'x':
  3480                           
  3481                           
  3482                           ;lcd.c: 750: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  3483  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  3484  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  3485  06E2  0859               	movf	LCD_Printf@argp,w
  3486  06E3  0084               	movwf	4
  3487  06E4  1383               	bcf	3,7	;select IRP bank0
  3488  06E5  0800               	movf	0,w
  3489  06E6  00D4               	movwf	LCD_Printf@v_num_u16
  3490  06E7  0A84               	incf	4,f
  3491  06E8  0800               	movf	0,w
  3492  06E9  00D5               	movwf	LCD_Printf@v_num_u16+1
  3493  06EA  3002               	movlw	2
  3494  06EB  00C6               	movwf	??_LCD_Printf
  3495  06EC  0846               	movf	??_LCD_Printf,w
  3496  06ED  07D9               	addwf	LCD_Printf@argp,f
  3497                           
  3498                           ;lcd.c: 751: LCD_DisplayNumber(16u,v_num_u16,v_numOfDigitsToDisp_u8);
  3499  06EE  0854               	movf	LCD_Printf@v_num_u16,w
  3500  06EF  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3501  06F0  0855               	movf	LCD_Printf@v_num_u16+1,w
  3502  06F1  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3503  06F2  01A6               	clrf	LCD_DisplayNumber@v_number_u32+2
  3504  06F3  01A7               	clrf	LCD_DisplayNumber@v_number_u32+3
  3505  06F4  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3506  06F5  00C6               	movwf	??_LCD_Printf
  3507  06F6  0846               	movf	??_LCD_Printf,w
  3508  06F7  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3509  06F8  3010               	movlw	16
  3510  06F9  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3511                           
  3512                           ;lcd.c: 752: break;
  3513  06FE  2FCB               	goto	l2434
  3514  06FF                     l2394:	
  3515                           ;lcd.c: 754: case 'X':
  3516                           
  3517                           
  3518                           ;lcd.c: 755: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  3519  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0700  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0701  0859               	movf	LCD_Printf@argp,w
  3522  0702  0084               	movwf	4
  3523  0703  1383               	bcf	3,7	;select IRP bank0
  3524  0704  0800               	movf	0,w
  3525  0705  00D0               	movwf	LCD_Printf@v_num_u32
  3526  0706  0A84               	incf	4,f
  3527  0707  0800               	movf	0,w
  3528  0708  00D1               	movwf	LCD_Printf@v_num_u32+1
  3529  0709  0A84               	incf	4,f
  3530  070A  0800               	movf	0,w
  3531  070B  00D2               	movwf	LCD_Printf@v_num_u32+2
  3532  070C  0A84               	incf	4,f
  3533  070D  0800               	movf	0,w
  3534  070E  00D3               	movwf	LCD_Printf@v_num_u32+3
  3535  070F  3004               	movlw	4
  3536  0710  00C6               	movwf	??_LCD_Printf
  3537  0711  0846               	movf	??_LCD_Printf,w
  3538  0712  07D9               	addwf	LCD_Printf@argp,f
  3539                           
  3540                           ;lcd.c: 756: LCD_DisplayNumber(16u,v_num_u32,v_numOfDigitsToDisp_u8);
  3541  0713  0853               	movf	LCD_Printf@v_num_u32+3,w
  3542  0714  00A7               	movwf	LCD_DisplayNumber@v_number_u32+3
  3543  0715  0852               	movf	LCD_Printf@v_num_u32+2,w
  3544  0716  00A6               	movwf	LCD_DisplayNumber@v_number_u32+2
  3545  0717  0851               	movf	LCD_Printf@v_num_u32+1,w
  3546  0718  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3547  0719  0850               	movf	LCD_Printf@v_num_u32,w
  3548  071A  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3549  071B  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3550  071C  00C6               	movwf	??_LCD_Printf
  3551  071D  0846               	movf	??_LCD_Printf,w
  3552  071E  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3553  071F  3010               	movlw	16
  3554  0720  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3555                           
  3556                           ;lcd.c: 757: break;
  3557  0725  2FCB               	goto	l2434
  3558  0726                     l2400:	
  3559                           ;lcd.c: 760: case 'b':
  3560                           
  3561                           
  3562                           ;lcd.c: 761: v_num_u16 = (*(int *)__va_arg((*(int **)argp), (int)0));
  3563  0726  1283               	bcf	3,5	;RP0=0, select bank0
  3564  0727  1303               	bcf	3,6	;RP1=0, select bank0
  3565  0728  0859               	movf	LCD_Printf@argp,w
  3566  0729  0084               	movwf	4
  3567  072A  1383               	bcf	3,7	;select IRP bank0
  3568  072B  0800               	movf	0,w
  3569  072C  00D4               	movwf	LCD_Printf@v_num_u16
  3570  072D  0A84               	incf	4,f
  3571  072E  0800               	movf	0,w
  3572  072F  00D5               	movwf	LCD_Printf@v_num_u16+1
  3573  0730  3002               	movlw	2
  3574  0731  00C6               	movwf	??_LCD_Printf
  3575  0732  0846               	movf	??_LCD_Printf,w
  3576  0733  07D9               	addwf	LCD_Printf@argp,f
  3577                           
  3578                           ;lcd.c: 762: if(v_numOfDigitsToDisp_u8 == 0xffu)
  3579  0734  0A58               	incf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3580  0735  1D03               	btfss	3,2
  3581  0736  2F3B               	goto	l2408
  3582                           
  3583                           ;lcd.c: 763: v_numOfDigitsToDisp_u8 = 16;
  3584  0737  3010               	movlw	16
  3585  0738  00C6               	movwf	??_LCD_Printf
  3586  0739  0846               	movf	??_LCD_Printf,w
  3587  073A  00D8               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8
  3588  073B                     l2408:	
  3589                           
  3590                           ;lcd.c: 764: LCD_DisplayNumber(2u,v_num_u16,v_numOfDigitsToDisp_u8);
  3591  073B  0854               	movf	LCD_Printf@v_num_u16,w
  3592  073C  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3593  073D  0855               	movf	LCD_Printf@v_num_u16+1,w
  3594  073E  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3595  073F  01A6               	clrf	LCD_DisplayNumber@v_number_u32+2
  3596  0740  01A7               	clrf	LCD_DisplayNumber@v_number_u32+3
  3597  0741  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3598  0742  00C6               	movwf	??_LCD_Printf
  3599  0743  0846               	movf	??_LCD_Printf,w
  3600  0744  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3601  0745  3002               	movlw	2
  3602  0746  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3603                           
  3604                           ;lcd.c: 765: break;
  3605  074B  2FCB               	goto	l2434
  3606  074C                     l2410:	
  3607                           ;lcd.c: 767: case 'B':
  3608                           
  3609                           
  3610                           ;lcd.c: 768: v_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  3611  074C  1283               	bcf	3,5	;RP0=0, select bank0
  3612  074D  1303               	bcf	3,6	;RP1=0, select bank0
  3613  074E  0859               	movf	LCD_Printf@argp,w
  3614  074F  0084               	movwf	4
  3615  0750  1383               	bcf	3,7	;select IRP bank0
  3616  0751  0800               	movf	0,w
  3617  0752  00D0               	movwf	LCD_Printf@v_num_u32
  3618  0753  0A84               	incf	4,f
  3619  0754  0800               	movf	0,w
  3620  0755  00D1               	movwf	LCD_Printf@v_num_u32+1
  3621  0756  0A84               	incf	4,f
  3622  0757  0800               	movf	0,w
  3623  0758  00D2               	movwf	LCD_Printf@v_num_u32+2
  3624  0759  0A84               	incf	4,f
  3625  075A  0800               	movf	0,w
  3626  075B  00D3               	movwf	LCD_Printf@v_num_u32+3
  3627  075C  3004               	movlw	4
  3628  075D  00C6               	movwf	??_LCD_Printf
  3629  075E  0846               	movf	??_LCD_Printf,w
  3630  075F  07D9               	addwf	LCD_Printf@argp,f
  3631                           
  3632                           ;lcd.c: 769: if(v_numOfDigitsToDisp_u8 == 0xffu)
  3633  0760  0A58               	incf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3634  0761  1D03               	btfss	3,2
  3635  0762  2F67               	goto	l2418
  3636                           
  3637                           ;lcd.c: 770: v_numOfDigitsToDisp_u8 = 16;
  3638  0763  3010               	movlw	16
  3639  0764  00C6               	movwf	??_LCD_Printf
  3640  0765  0846               	movf	??_LCD_Printf,w
  3641  0766  00D8               	movwf	LCD_Printf@v_numOfDigitsToDisp_u8
  3642  0767                     l2418:	
  3643                           
  3644                           ;lcd.c: 771: LCD_DisplayNumber(2u,v_num_u32,v_numOfDigitsToDisp_u8);
  3645  0767  0853               	movf	LCD_Printf@v_num_u32+3,w
  3646  0768  00A7               	movwf	LCD_DisplayNumber@v_number_u32+3
  3647  0769  0852               	movf	LCD_Printf@v_num_u32+2,w
  3648  076A  00A6               	movwf	LCD_DisplayNumber@v_number_u32+2
  3649  076B  0851               	movf	LCD_Printf@v_num_u32+1,w
  3650  076C  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  3651  076D  0850               	movf	LCD_Printf@v_num_u32,w
  3652  076E  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  3653  076F  0858               	movf	LCD_Printf@v_numOfDigitsToDisp_u8,w
  3654  0770  00C6               	movwf	??_LCD_Printf
  3655  0771  0846               	movf	??_LCD_Printf,w
  3656  0772  00A8               	movwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8
  3657  0773  3002               	movlw	2
  3658  0774  120A  118A  21A3  120A  118A  	fcall	_LCD_DisplayNumber
  3659                           
  3660                           ;lcd.c: 776: case 'f':
  3661                           ;lcd.c: 781: break;
  3662                           
  3663                           ;lcd.c: 775: case 'F':
  3664                           
  3665                           ;lcd.c: 772: break;
  3666  0779  2FCB               	goto	l2434
  3667  077A                     l2420:	
  3668                           ;lcd.c: 784: case 'S':
  3669                           
  3670                           
  3671                           ;lcd.c: 785: case 's':
  3672                           ;lcd.c: 786: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  3673  077A  1283               	bcf	3,5	;RP0=0, select bank0
  3674  077B  1303               	bcf	3,6	;RP1=0, select bank0
  3675  077C  0859               	movf	LCD_Printf@argp,w
  3676  077D  0084               	movwf	4
  3677  077E  1383               	bcf	3,7	;select IRP bank0
  3678  077F  0800               	movf	0,w
  3679  0780  00C6               	movwf	??_LCD_Printf
  3680  0781  0846               	movf	??_LCD_Printf,w
  3681  0782  00C8               	movwf	LCD_Printf@str
  3682  0783  3001               	movlw	1
  3683  0784  00C6               	movwf	??_LCD_Printf
  3684  0785  0846               	movf	??_LCD_Printf,w
  3685  0786  07D9               	addwf	LCD_Printf@argp,f
  3686                           
  3687                           ;lcd.c: 787: LCD_DisplayString(str);
  3688  0787  0848               	movf	LCD_Printf@str,w
  3689  0788  00A0               	movwf	LCD_DisplayString@ptr_stringPointer_u8
  3690  0789  3000               	movlw	0
  3691  078A  00A1               	movwf	LCD_DisplayString@ptr_stringPointer_u8+1
  3692  078B  120A  158A  223B  120A  118A  	fcall	_LCD_DisplayString
  3693                           
  3694                           ;lcd.c: 788: break;
  3695  0790  2FCB               	goto	l2434
  3696  0791                     l2426:	
  3697                           ;lcd.c: 790: case '%':
  3698                           
  3699                           
  3700                           ;lcd.c: 791: LCD_DisplayChar('%');
  3701  0791  3025               	movlw	37
  3702  0792  2FC6               	goto	L4
  3703  0793                     l2430:	
  3704                           ;lcd.c: 793: }
  3705                           
  3706                           ;lcd.c: 792: break;
  3707                           
  3708  0793  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0794  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0795  0857               	movf	LCD_Printf@ch,w
  3711                           
  3712                           ; Switch size 1, requested type "space"
  3713                           ; Number of cases is 15, Range of values is 37 to 120
  3714                           ; switch strategies available:
  3715                           ; Name         Instructions Cycles
  3716                           ; simple_byte           46    24 (average)
  3717                           ; direct_byte          263    11 (fixed)
  3718                           ; jumptable            263     9 (fixed)
  3719                           ;	Chosen strategy is simple_byte
  3720  0796  3A25               	xorlw	37	; case 37
  3721  0797  1903               	skipnz
  3722  0798  2F91               	goto	l2426
  3723  0799  3A67               	xorlw	103	; case 66
  3724  079A  1903               	skipnz
  3725  079B  2F4C               	goto	l2410
  3726  079C  3A01               	xorlw	1	; case 67
  3727  079D  1903               	skipnz
  3728  079E  2E21               	goto	l2348
  3729  079F  3A07               	xorlw	7	; case 68
  3730  07A0  1903               	skipnz
  3731  07A1  2E5E               	goto	l2366
  3732  07A2  3A02               	xorlw	2	; case 70
  3733  07A3  1903               	skipnz
  3734  07A4  2FCB               	goto	l2434
  3735  07A5  3A15               	xorlw	21	; case 83
  3736  07A6  1903               	skipnz
  3737  07A7  2F7A               	goto	l2420
  3738  07A8  3A06               	xorlw	6	; case 85
  3739  07A9  1903               	skipnz
  3740  07AA  2EB9               	goto	l2382
  3741  07AB  3A0D               	xorlw	13	; case 88
  3742  07AC  1903               	skipnz
  3743  07AD  2EFF               	goto	l2394
  3744  07AE  3A3A               	xorlw	58	; case 98
  3745  07AF  1903               	skipnz
  3746  07B0  2F26               	goto	l2400
  3747  07B1  3A01               	xorlw	1	; case 99
  3748  07B2  1903               	skipnz
  3749  07B3  2E21               	goto	l2348
  3750  07B4  3A07               	xorlw	7	; case 100
  3751  07B5  1903               	skipnz
  3752  07B6  2E2D               	goto	l2354
  3753  07B7  3A02               	xorlw	2	; case 102
  3754  07B8  1903               	skipnz
  3755  07B9  2FCB               	goto	l2434
  3756  07BA  3A15               	xorlw	21	; case 115
  3757  07BB  1903               	skipnz
  3758  07BC  2F7A               	goto	l2420
  3759  07BD  3A06               	xorlw	6	; case 117
  3760  07BE  1903               	skipnz
  3761  07BF  2E9A               	goto	l2376
  3762  07C0  3A0D               	xorlw	13	; case 120
  3763  07C1  1903               	skipnz
  3764  07C2  2EE0               	goto	l2388
  3765  07C3  2FCB               	goto	l2434
  3766                           
  3767                           ;lcd.c: 794: }
  3768  07C4  2FCB               	goto	l2434
  3769  07C5                     l2432:	
  3770                           
  3771                           ;lcd.c: 795: else
  3772                           ;lcd.c: 796: {
  3773                           ;lcd.c: 798: LCD_DisplayChar(ch);
  3774  07C5  0857               	movf	LCD_Printf@ch,w
  3775  07C6                     L4:	
  3776  07C6  120A  118A  2005  120A  118A  	fcall	_LCD_DisplayChar
  3777  07CB                     l2434:	
  3778  07CB  3001               	movlw	1
  3779  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  3780  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  3781  07CE  00C6               	movwf	??_LCD_Printf
  3782  07CF  0846               	movf	??_LCD_Printf,w
  3783  07D0  07D6               	addwf	LCD_Printf@ptr,f
  3784  07D1  2DC5               	goto	l2436
  3785  07D2                     __end_of_LCD_Printf:	
  3786                           
  3787                           	psect	text11
  3788  0A3B                     __ptext11:	
  3789 ;; *************** function _LCD_DisplayString *****************
  3790 ;; Defined at:
  3791 ;;		line 421 in file "../00-libfiles/lcd.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  ptr_stringPo    2    0[BANK0 ] PTR const unsigned char 
  3794 ;;		 -> main@str(50), STR_1(32), 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         0       2       0       0       0
  3807 ;;      Locals:         0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0
  3809 ;;      Totals:         0       2       0       0       0
  3810 ;;Total ram usage:        2 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    6
  3813 ;; This function calls:
  3814 ;;		_LCD_DisplayChar
  3815 ;; This function is called by:
  3816 ;;		_LCD_Printf
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           
  3822                           ;psect for function _LCD_DisplayString
  3823  0A3B                     _LCD_DisplayString:	
  3824  0A3B                     l2058:	
  3825                           ;lcd.c: 423: while((*ptr_stringPointer_u8)!=0)
  3826                           
  3827                           ;incstack = 0
  3828 ;; using string table level
  3829                           ; Regs used in _LCD_DisplayString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3830                           
  3831  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  3833  0A3D  0821               	movf	LCD_DisplayString@ptr_stringPointer_u8+1,w
  3834  0A3E  00FF               	movwf	127
  3835  0A3F  0820               	movf	LCD_DisplayString@ptr_stringPointer_u8,w
  3836  0A40  0084               	movwf	4
  3837  0A41  120A  158A  2000  120A  158A  	fcall	stringtab
  3838  0A46  3A00               	xorlw	0
  3839  0A47  1903               	btfsc	3,2
  3840  0A48  0008               	return
  3841                           
  3842                           ;lcd.c: 424: LCD_DisplayChar(*ptr_stringPointer_u8++);
  3843  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  3844  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  3845  0A4B  0821               	movf	LCD_DisplayString@ptr_stringPointer_u8+1,w
  3846  0A4C  00FF               	movwf	127
  3847  0A4D  0820               	movf	LCD_DisplayString@ptr_stringPointer_u8,w
  3848  0A4E  0084               	movwf	4
  3849  0A4F  120A  158A  2000  120A  158A  	fcall	stringtab
  3850  0A54  120A  118A  2005  120A  158A  	fcall	_LCD_DisplayChar
  3851  0A59  3001               	movlw	1
  3852  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  3853  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  3854  0A5C  07A0               	addwf	LCD_DisplayString@ptr_stringPointer_u8,f
  3855  0A5D  1803               	skipnc
  3856  0A5E  0AA1               	incf	LCD_DisplayString@ptr_stringPointer_u8+1,f
  3857  0A5F  2A3B               	goto	l2058
  3858  0A60                     __end_of_LCD_DisplayString:	
  3859                           
  3860                           	psect	text12
  3861  01A3                     __ptext12:	
  3862 ;; *************** function _LCD_DisplayNumber *****************
  3863 ;; Defined at:
  3864 ;;		line 523 in file "../00-libfiles/lcd.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  v_numericSys    1    wreg     unsigned char 
  3867 ;;  v_number_u32    4    4[BANK0 ] unsigned long 
  3868 ;;  v_numOfDigit    1    8[BANK0 ] unsigned char 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  v_numericSys    1   33[BANK0 ] unsigned char 
  3871 ;;  a              10   21[BANK0 ] unsigned char [10]
  3872 ;;  i               1   34[BANK0 ] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3882 ;;      Params:         0       5       0       0       0
  3883 ;;      Locals:         0      14       0       0       0
  3884 ;;      Temps:          0      12       0       0       0
  3885 ;;      Totals:         0      31       0       0       0
  3886 ;;Total ram usage:       31 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    6
  3889 ;; This function calls:
  3890 ;;		_LCD_DisplayChar
  3891 ;;		___bmul
  3892 ;;		___lldiv
  3893 ;; This function is called by:
  3894 ;;		_LCD_Printf
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _LCD_DisplayNumber
  3900  01A3                     _LCD_DisplayNumber:	
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _LCD_DisplayNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3904                           ;LCD_DisplayNumber@v_numericSystem_u8 stored from wreg
  3905  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  3906  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  3907  01A5  00C1               	movwf	LCD_DisplayNumber@v_numericSystem_u8
  3908                           
  3909                           ;lcd.c: 525: uint8_t i=0,a[10];
  3910  01A6  01C2               	clrf	LCD_DisplayNumber@i
  3911                           
  3912                           ;lcd.c: 527: if(2u == v_numericSystem_u8)
  3913  01A7  3002               	movlw	2
  3914  01A8  0641               	xorwf	LCD_DisplayNumber@v_numericSystem_u8,w
  3915  01A9  1903               	btfsc	3,2
  3916  01AA  29EA               	goto	l2072
  3917  01AB  29EE               	goto	l2074
  3918  01AC                     l2066:	
  3919                           ;lcd.c: 528: {
  3920                           ;lcd.c: 529: while(v_numOfDigitsToDisplay_u8!=0)
  3921                           
  3922                           
  3923                           ;lcd.c: 530: {
  3924                           ;lcd.c: 533: i = (((v_number_u32)&((1<<((v_numOfDigitsToDisplay_u8-1)))))!=0u);
  3925  01AC  0824               	movf	LCD_DisplayNumber@v_number_u32,w
  3926  01AD  00A9               	movwf	??_LCD_DisplayNumber
  3927  01AE  0825               	movf	LCD_DisplayNumber@v_number_u32+1,w
  3928  01AF  00AA               	movwf	??_LCD_DisplayNumber+1
  3929  01B0  0826               	movf	LCD_DisplayNumber@v_number_u32+2,w
  3930  01B1  00AB               	movwf	??_LCD_DisplayNumber+2
  3931  01B2  0827               	movf	LCD_DisplayNumber@v_number_u32+3,w
  3932  01B3  00AC               	movwf	??_LCD_DisplayNumber+3
  3933  01B4  0828               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w
  3934  01B5  3EFF               	addlw	-1
  3935  01B6  00AD               	movwf	??_LCD_DisplayNumber+4
  3936  01B7  0AAD               	incf	??_LCD_DisplayNumber+4,f
  3937  01B8  3001               	movlw	1
  3938  01B9  00AE               	movwf	??_LCD_DisplayNumber+5
  3939  01BA  3000               	movlw	0
  3940  01BB  00AF               	movwf	??_LCD_DisplayNumber+6
  3941  01BC  29C0               	goto	u2704
  3942  01BD                     u2705:	
  3943  01BD  1003               	clrc
  3944  01BE  0DAE               	rlf	??_LCD_DisplayNumber+5,f
  3945  01BF  0DAF               	rlf	??_LCD_DisplayNumber+6,f
  3946  01C0                     u2704:	
  3947  01C0  0BAD               	decfsz	??_LCD_DisplayNumber+4,f
  3948  01C1  29BD               	goto	u2705
  3949  01C2  082E               	movf	??_LCD_DisplayNumber+5,w
  3950  01C3  00B0               	movwf	??_LCD_DisplayNumber+7
  3951  01C4  082F               	movf	??_LCD_DisplayNumber+6,w
  3952  01C5  00B1               	movwf	??_LCD_DisplayNumber+8
  3953  01C6  3000               	movlw	0
  3954  01C7  1BB1               	btfsc	??_LCD_DisplayNumber+8,7
  3955  01C8  30FF               	movlw	255
  3956  01C9  00B2               	movwf	??_LCD_DisplayNumber+9
  3957  01CA  00B3               	movwf	??_LCD_DisplayNumber+10
  3958  01CB  0830               	movf	??_LCD_DisplayNumber+7,w
  3959  01CC  05A9               	andwf	??_LCD_DisplayNumber,f
  3960  01CD  0831               	movf	??_LCD_DisplayNumber+8,w
  3961  01CE  05AA               	andwf	??_LCD_DisplayNumber+1,f
  3962  01CF  0832               	movf	??_LCD_DisplayNumber+9,w
  3963  01D0  05AB               	andwf	??_LCD_DisplayNumber+2,f
  3964  01D1  0833               	movf	??_LCD_DisplayNumber+10,w
  3965  01D2  05AC               	andwf	??_LCD_DisplayNumber+3,f
  3966  01D3  082C               	movf	??_LCD_DisplayNumber+3,w
  3967  01D4  042B               	iorwf	??_LCD_DisplayNumber+2,w
  3968  01D5  042A               	iorwf	??_LCD_DisplayNumber+1,w
  3969  01D6  0429               	iorwf	??_LCD_DisplayNumber,w
  3970  01D7  1903               	btfsc	3,2
  3971  01D8  29DB               	goto	u2710
  3972  01D9  3001               	movlw	1
  3973  01DA  29DC               	goto	u2720
  3974  01DB                     u2710:	
  3975  01DB  3000               	movlw	0
  3976  01DC                     u2720:	
  3977  01DC  00B4               	movwf	??_LCD_DisplayNumber+11
  3978  01DD  0834               	movf	??_LCD_DisplayNumber+11,w
  3979  01DE  00C2               	movwf	LCD_DisplayNumber@i
  3980                           
  3981                           ;lcd.c: 534: LCD_DisplayChar(((i)+0x30));
  3982  01DF  0842               	movf	LCD_DisplayNumber@i,w
  3983  01E0  3E30               	addlw	48
  3984  01E1  120A  118A  2005  120A  118A  	fcall	_LCD_DisplayChar
  3985                           
  3986                           ;lcd.c: 535: v_numOfDigitsToDisplay_u8--;
  3987  01E6  3001               	movlw	1
  3988  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  3989  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  3990  01E9  02A8               	subwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,f
  3991  01EA                     l2072:	
  3992  01EA  0828               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w
  3993  01EB  1903               	btfsc	3,2
  3994  01EC  0008               	return
  3995  01ED  29AC               	goto	l2066
  3996  01EE                     l2074:	
  3997                           ;lcd.c: 536: }
  3998                           ;lcd.c: 537: }
  3999                           
  4000                           
  4001                           ;lcd.c: 538: else if(v_number_u32==0)
  4002  01EE  0827               	movf	LCD_DisplayNumber@v_number_u32+3,w
  4003  01EF  0426               	iorwf	LCD_DisplayNumber@v_number_u32+2,w
  4004  01F0  0425               	iorwf	LCD_DisplayNumber@v_number_u32+1,w
  4005  01F1  0424               	iorwf	LCD_DisplayNumber@v_number_u32,w
  4006  01F2  1D03               	skipz
  4007  01F3  2A0A               	goto	l2086
  4008                           
  4009                           ;lcd.c: 539: {
  4010                           ;lcd.c: 541: for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<10u));i++)
  4011  01F4  01C2               	clrf	LCD_DisplayNumber@i
  4012  01F5                     l2082:	
  4013  01F5  0828               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w
  4014  01F6  0242               	subwf	LCD_DisplayNumber@i,w
  4015  01F7  1803               	skipnc
  4016  01F8  0008               	return
  4017  01F9  300A               	movlw	10
  4018  01FA  0242               	subwf	LCD_DisplayNumber@i,w
  4019  01FB  1803               	btfsc	3,0
  4020  01FC  0008               	return
  4021                           
  4022                           ;lcd.c: 542: LCD_DisplayChar('0');
  4023  01FD  3030               	movlw	48
  4024  01FE  120A  118A  2005  120A  118A  	fcall	_LCD_DisplayChar
  4025  0203  3001               	movlw	1
  4026  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4027  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4028  0206  00A9               	movwf	??_LCD_DisplayNumber
  4029  0207  0829               	movf	??_LCD_DisplayNumber,w
  4030  0208  07C2               	addwf	LCD_DisplayNumber@i,f
  4031  0209  29F5               	goto	l2082
  4032  020A                     l2086:	
  4033                           ;lcd.c: 543: }
  4034                           
  4035                           
  4036                           ;lcd.c: 544: else
  4037                           ;lcd.c: 545: {
  4038                           ;lcd.c: 546: for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
  4039  020A  01C2               	clrf	LCD_DisplayNumber@i
  4040  020B                     l2104:	
  4041  020B  0828               	movf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w
  4042  020C  0242               	subwf	LCD_DisplayNumber@i,w
  4043  020D  1803               	btfsc	3,0
  4044  020E  2AA0               	goto	l2116
  4045                           
  4046                           ;lcd.c: 547: {
  4047                           ;lcd.c: 550: if(v_number_u32!=0)
  4048  020F  0827               	movf	LCD_DisplayNumber@v_number_u32+3,w
  4049  0210  0426               	iorwf	LCD_DisplayNumber@v_number_u32+2,w
  4050  0211  0425               	iorwf	LCD_DisplayNumber@v_number_u32+1,w
  4051  0212  0424               	iorwf	LCD_DisplayNumber@v_number_u32,w
  4052  0213  1903               	skipnz
  4053  0214  2A6A               	goto	l2094
  4054                           
  4055                           ;lcd.c: 551: {
  4056                           ;lcd.c: 558: a[i]=(uint32_t)(v_number_u32 - (v_numericSystem_u8 * (uint32_t)(v_number_u3
      +                          2/v_numericSystem_u8)));
  4057  0215  0841               	movf	LCD_DisplayNumber@v_numericSystem_u8,w
  4058  0216  00A9               	movwf	??_LCD_DisplayNumber
  4059  0217  0829               	movf	??_LCD_DisplayNumber,w
  4060  0218  00A0               	movwf	___bmul@multiplicand
  4061  0219  0827               	movf	LCD_DisplayNumber@v_number_u32+3,w
  4062  021A  00F7               	movwf	___lldiv@dividend+3
  4063  021B  0826               	movf	LCD_DisplayNumber@v_number_u32+2,w
  4064  021C  00F6               	movwf	___lldiv@dividend+2
  4065  021D  0825               	movf	LCD_DisplayNumber@v_number_u32+1,w
  4066  021E  00F5               	movwf	___lldiv@dividend+1
  4067  021F  0824               	movf	LCD_DisplayNumber@v_number_u32,w
  4068  0220  00F4               	movwf	___lldiv@dividend
  4069  0221  0841               	movf	LCD_DisplayNumber@v_numericSystem_u8,w
  4070  0222  00AA               	movwf	??_LCD_DisplayNumber+1
  4071  0223  01AB               	clrf	??_LCD_DisplayNumber+2
  4072  0224  01AC               	clrf	??_LCD_DisplayNumber+3
  4073  0225  01AD               	clrf	??_LCD_DisplayNumber+4
  4074  0226  082D               	movf	??_LCD_DisplayNumber+4,w
  4075  0227  00F3               	movwf	___lldiv@divisor+3
  4076  0228  082C               	movf	??_LCD_DisplayNumber+3,w
  4077  0229  00F2               	movwf	___lldiv@divisor+2
  4078  022A  082B               	movf	??_LCD_DisplayNumber+2,w
  4079  022B  00F1               	movwf	___lldiv@divisor+1
  4080  022C  082A               	movf	??_LCD_DisplayNumber+1,w
  4081  022D  00F0               	movwf	___lldiv@divisor
  4082  022E  120A  158A  247D  120A  118A  	fcall	___lldiv
  4083  0233  0870               	movf	?___lldiv,w
  4084  0234  120A  158A  21BA  120A  118A  	fcall	___bmul
  4085  0239  3AFF               	xorlw	255
  4086  023A  3E01               	addlw	1
  4087  023B  1283               	bcf	3,5	;RP0=0, select bank0
  4088  023C  1303               	bcf	3,6	;RP1=0, select bank0
  4089  023D  0724               	addwf	LCD_DisplayNumber@v_number_u32,w
  4090  023E  00AE               	movwf	??_LCD_DisplayNumber+5
  4091  023F  0842               	movf	LCD_DisplayNumber@i,w
  4092  0240  3E35               	addlw	(low (LCD_DisplayNumber@a| 0))& (0+255)
  4093  0241  0084               	movwf	4
  4094  0242  082E               	movf	??_LCD_DisplayNumber+5,w
  4095  0243  1383               	bcf	3,7	;select IRP bank0
  4096  0244  0080               	movwf	0
  4097                           
  4098                           ;lcd.c: 559: v_number_u32=v_number_u32/v_numericSystem_u8;
  4099  0245  0841               	movf	LCD_DisplayNumber@v_numericSystem_u8,w
  4100  0246  00A9               	movwf	??_LCD_DisplayNumber
  4101  0247  01AA               	clrf	??_LCD_DisplayNumber+1
  4102  0248  01AB               	clrf	??_LCD_DisplayNumber+2
  4103  0249  01AC               	clrf	??_LCD_DisplayNumber+3
  4104  024A  082C               	movf	??_LCD_DisplayNumber+3,w
  4105  024B  00F3               	movwf	___lldiv@divisor+3
  4106  024C  082B               	movf	??_LCD_DisplayNumber+2,w
  4107  024D  00F2               	movwf	___lldiv@divisor+2
  4108  024E  082A               	movf	??_LCD_DisplayNumber+1,w
  4109  024F  00F1               	movwf	___lldiv@divisor+1
  4110  0250  0829               	movf	??_LCD_DisplayNumber,w
  4111  0251  00F0               	movwf	___lldiv@divisor
  4112  0252  0827               	movf	LCD_DisplayNumber@v_number_u32+3,w
  4113  0253  00F7               	movwf	___lldiv@dividend+3
  4114  0254  0826               	movf	LCD_DisplayNumber@v_number_u32+2,w
  4115  0255  00F6               	movwf	___lldiv@dividend+2
  4116  0256  0825               	movf	LCD_DisplayNumber@v_number_u32+1,w
  4117  0257  00F5               	movwf	___lldiv@dividend+1
  4118  0258  0824               	movf	LCD_DisplayNumber@v_number_u32,w
  4119  0259  00F4               	movwf	___lldiv@dividend
  4120  025A  120A  158A  247D  120A  118A  	fcall	___lldiv
  4121  025F  0873               	movf	?___lldiv+3,w
  4122  0260  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0261  1303               	bcf	3,6	;RP1=0, select bank0
  4124  0262  00A7               	movwf	LCD_DisplayNumber@v_number_u32+3
  4125  0263  0872               	movf	?___lldiv+2,w
  4126  0264  00A6               	movwf	LCD_DisplayNumber@v_number_u32+2
  4127  0265  0871               	movf	?___lldiv+1,w
  4128  0266  00A5               	movwf	LCD_DisplayNumber@v_number_u32+1
  4129  0267  0870               	movf	?___lldiv,w
  4130  0268  00A4               	movwf	LCD_DisplayNumber@v_number_u32
  4131                           
  4132                           ;lcd.c: 560: }
  4133  0269  2A76               	goto	l2102
  4134  026A                     l2094:	
  4135                           
  4136                           ;lcd.c: 561: else if( (v_numOfDigitsToDisplay_u8 == 0xffu) ||
  4137                           ;lcd.c: 562: (v_numOfDigitsToDisplay_u8 > 10u))
  4138  026A  0A28               	incf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w
  4139  026B  1903               	btfsc	3,2
  4140  026C  2AA0               	goto	l2116
  4141  026D  300B               	movlw	11
  4142  026E  0228               	subwf	LCD_DisplayNumber@v_numOfDigitsToDisplay_u8,w
  4143  026F  1803               	btfsc	3,0
  4144  0270  2AA0               	goto	l2116
  4145                           
  4146                           ;lcd.c: 568: else
  4147                           ;lcd.c: 569: {
  4148                           ;lcd.c: 573: a[i]=0;
  4149                           
  4150                           ;lcd.c: 567: }
  4151                           
  4152                           ;lcd.c: 563: {
  4153                           ;lcd.c: 566: break;
  4154  0271  0842               	movf	LCD_DisplayNumber@i,w
  4155  0272  3E35               	addlw	(low (LCD_DisplayNumber@a| 0))& (0+255)
  4156  0273  0084               	movwf	4
  4157  0274  1383               	bcf	3,7	;select IRP bank0
  4158  0275  0180               	clrf	0
  4159  0276                     l2102:	
  4160  0276  3001               	movlw	1
  4161  0277  00A9               	movwf	??_LCD_DisplayNumber
  4162  0278  0829               	movf	??_LCD_DisplayNumber,w
  4163  0279  07C2               	addwf	LCD_DisplayNumber@i,f
  4164  027A  2A0B               	goto	l2104
  4165  027B                     l2106:	
  4166                           ;lcd.c: 574: }
  4167                           ;lcd.c: 575: }
  4168                           ;lcd.c: 577: while(i!=0)
  4169                           
  4170                           
  4171                           ;lcd.c: 578: {
  4172                           ;lcd.c: 580: LCD_DisplayChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  4173  027B  0842               	movf	LCD_DisplayNumber@i,w
  4174  027C  3EFF               	addlw	255
  4175  027D  3E35               	addlw	(low (LCD_DisplayNumber@a| 0))& (0+255)
  4176  027E  0084               	movwf	4
  4177  027F  300A               	movlw	10
  4178  0280  1383               	bcf	3,7	;select IRP bank0
  4179  0281  0200               	subwf	0,w
  4180  0282  1803               	skipnc
  4181  0283  2A8B               	goto	l2110
  4182  0284  0842               	movf	LCD_DisplayNumber@i,w
  4183  0285  3EFF               	addlw	255
  4184  0286  3E35               	addlw	(low (LCD_DisplayNumber@a| 0))& (0+255)
  4185  0287  0084               	movwf	4
  4186  0288  0800               	movf	0,w
  4187  0289  3E30               	addlw	48
  4188  028A  2A91               	goto	L5
  4189  028B                     l2110:	
  4190  028B  0842               	movf	LCD_DisplayNumber@i,w
  4191  028C  3EFF               	addlw	255
  4192  028D  3E35               	addlw	(low (LCD_DisplayNumber@a| 0))& (0+255)
  4193  028E  0084               	movwf	4
  4194  028F  0800               	movf	0,w
  4195  0290  3E37               	addlw	55
  4196  0291                     L5:	
  4197  0291  00BF               	movwf	_LCD_DisplayNumber$268
  4198  0292  3000               	movlw	0
  4199  0293  1803               	skipnc
  4200  0294  3001               	movlw	1
  4201  0295  00C0               	movwf	_LCD_DisplayNumber$268+1
  4202  0296  083F               	movf	_LCD_DisplayNumber$268,w
  4203  0297  120A  118A  2005  120A  118A  	fcall	_LCD_DisplayChar
  4204                           
  4205                           ;lcd.c: 581: i--;
  4206  029C  3001               	movlw	1
  4207  029D  1283               	bcf	3,5	;RP0=0, select bank0
  4208  029E  1303               	bcf	3,6	;RP1=0, select bank0
  4209  029F  02C2               	subwf	LCD_DisplayNumber@i,f
  4210  02A0                     l2116:	
  4211  02A0  0842               	movf	LCD_DisplayNumber@i,w
  4212  02A1  1903               	btfsc	3,2
  4213  02A2  0008               	return
  4214  02A3  2A7B               	goto	l2106
  4215  02A4                     __end_of_LCD_DisplayNumber:	
  4216                           
  4217                           	psect	text13
  4218  0C7D                     __ptext13:	
  4219 ;; *************** function ___lldiv *****************
  4220 ;; Defined at:
  4221 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\lldiv.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  divisor         4    0[COMMON] unsigned long 
  4224 ;;  dividend        4    4[COMMON] unsigned long 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  quotient        4    9[COMMON] unsigned long 
  4227 ;;  counter         1   13[COMMON] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  4    0[COMMON] unsigned long 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4237 ;;      Params:         8       0       0       0       0
  4238 ;;      Locals:         5       0       0       0       0
  4239 ;;      Temps:          1       0       0       0       0
  4240 ;;      Totals:        14       0       0       0       0
  4241 ;;Total ram usage:       14 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_UART_SetBaudRate
  4247 ;;		_UART_TxNumber
  4248 ;;		_LCD_DisplayNumber
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function ___lldiv
  4254  0C7D                     ___lldiv:	
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4258  0C7D  3000               	movlw	0
  4259  0C7E  00FC               	movwf	___lldiv@quotient+3
  4260  0C7F  3000               	movlw	0
  4261  0C80  00FB               	movwf	___lldiv@quotient+2
  4262  0C81  3000               	movlw	0
  4263  0C82  00FA               	movwf	___lldiv@quotient+1
  4264  0C83  3000               	movlw	0
  4265  0C84  00F9               	movwf	___lldiv@quotient
  4266  0C85  0873               	movf	___lldiv@divisor+3,w
  4267  0C86  0472               	iorwf	___lldiv@divisor+2,w
  4268  0C87  0471               	iorwf	___lldiv@divisor+1,w
  4269  0C88  0470               	iorwf	___lldiv@divisor,w
  4270  0C89  1903               	skipnz
  4271  0C8A  2CD2               	goto	l1948
  4272  0C8B  01FD               	clrf	___lldiv@counter
  4273  0C8C  0AFD               	incf	___lldiv@counter,f
  4274  0C8D                     l1934:	
  4275  0C8D  1BF3               	btfsc	___lldiv@divisor+3,7
  4276  0C8E  2C9D               	goto	l1936
  4277  0C8F  3001               	movlw	1
  4278  0C90  00F8               	movwf	??___lldiv
  4279  0C91                     u2425:	
  4280  0C91  1003               	clrc
  4281  0C92  0DF0               	rlf	___lldiv@divisor,f
  4282  0C93  0DF1               	rlf	___lldiv@divisor+1,f
  4283  0C94  0DF2               	rlf	___lldiv@divisor+2,f
  4284  0C95  0DF3               	rlf	___lldiv@divisor+3,f
  4285  0C96  0BF8               	decfsz	??___lldiv,f
  4286  0C97  2C91               	goto	u2425
  4287  0C98  3001               	movlw	1
  4288  0C99  00F8               	movwf	??___lldiv
  4289  0C9A  0878               	movf	??___lldiv,w
  4290  0C9B  07FD               	addwf	___lldiv@counter,f
  4291  0C9C  2C8D               	goto	l1934
  4292  0C9D                     l1936:	
  4293  0C9D  3001               	movlw	1
  4294  0C9E  00F8               	movwf	??___lldiv
  4295  0C9F                     u2445:	
  4296  0C9F  1003               	clrc
  4297  0CA0  0DF9               	rlf	___lldiv@quotient,f
  4298  0CA1  0DFA               	rlf	___lldiv@quotient+1,f
  4299  0CA2  0DFB               	rlf	___lldiv@quotient+2,f
  4300  0CA3  0DFC               	rlf	___lldiv@quotient+3,f
  4301  0CA4  0BF8               	decfsz	??___lldiv,f
  4302  0CA5  2C9F               	goto	u2445
  4303  0CA6  0873               	movf	___lldiv@divisor+3,w
  4304  0CA7  0277               	subwf	___lldiv@dividend+3,w
  4305  0CA8  1D03               	skipz
  4306  0CA9  2CB4               	goto	u2455
  4307  0CAA  0872               	movf	___lldiv@divisor+2,w
  4308  0CAB  0276               	subwf	___lldiv@dividend+2,w
  4309  0CAC  1D03               	skipz
  4310  0CAD  2CB4               	goto	u2455
  4311  0CAE  0871               	movf	___lldiv@divisor+1,w
  4312  0CAF  0275               	subwf	___lldiv@dividend+1,w
  4313  0CB0  1D03               	skipz
  4314  0CB1  2CB4               	goto	u2455
  4315  0CB2  0870               	movf	___lldiv@divisor,w
  4316  0CB3  0274               	subwf	___lldiv@dividend,w
  4317  0CB4                     u2455:	
  4318  0CB4  1C03               	skipc
  4319  0CB5  2CC5               	goto	l1944
  4320  0CB6  0870               	movf	___lldiv@divisor,w
  4321  0CB7  02F4               	subwf	___lldiv@dividend,f
  4322  0CB8  0871               	movf	___lldiv@divisor+1,w
  4323  0CB9  1C03               	skipc
  4324  0CBA  0F71               	incfsz	___lldiv@divisor+1,w
  4325  0CBB  02F5               	subwf	___lldiv@dividend+1,f
  4326  0CBC  0872               	movf	___lldiv@divisor+2,w
  4327  0CBD  1C03               	skipc
  4328  0CBE  0F72               	incfsz	___lldiv@divisor+2,w
  4329  0CBF  02F6               	subwf	___lldiv@dividend+2,f
  4330  0CC0  0873               	movf	___lldiv@divisor+3,w
  4331  0CC1  1C03               	skipc
  4332  0CC2  0F73               	incfsz	___lldiv@divisor+3,w
  4333  0CC3  02F7               	subwf	___lldiv@dividend+3,f
  4334  0CC4  1479               	bsf	___lldiv@quotient,0
  4335  0CC5                     l1944:	
  4336  0CC5  3001               	movlw	1
  4337  0CC6                     u2465:	
  4338  0CC6  1003               	clrc
  4339  0CC7  0CF3               	rrf	___lldiv@divisor+3,f
  4340  0CC8  0CF2               	rrf	___lldiv@divisor+2,f
  4341  0CC9  0CF1               	rrf	___lldiv@divisor+1,f
  4342  0CCA  0CF0               	rrf	___lldiv@divisor,f
  4343  0CCB  3EFF               	addlw	-1
  4344  0CCC  1D03               	skipz
  4345  0CCD  2CC6               	goto	u2465
  4346  0CCE  3001               	movlw	1
  4347  0CCF  02FD               	subwf	___lldiv@counter,f
  4348  0CD0  1D03               	btfss	3,2
  4349  0CD1  2C9D               	goto	l1936
  4350  0CD2                     l1948:	
  4351  0CD2  087C               	movf	___lldiv@quotient+3,w
  4352  0CD3  00F3               	movwf	?___lldiv+3
  4353  0CD4  087B               	movf	___lldiv@quotient+2,w
  4354  0CD5  00F2               	movwf	?___lldiv+2
  4355  0CD6  087A               	movf	___lldiv@quotient+1,w
  4356  0CD7  00F1               	movwf	?___lldiv+1
  4357  0CD8  0879               	movf	___lldiv@quotient,w
  4358  0CD9  00F0               	movwf	?___lldiv
  4359  0CDA  0008               	return
  4360  0CDB                     __end_of___lldiv:	
  4361                           
  4362                           	psect	text14
  4363  09BA                     __ptext14:	
  4364 ;; *************** function ___bmul *****************
  4365 ;; Defined at:
  4366 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.36\sources\common\Umul8.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  multiplier      1    wreg     unsigned char 
  4369 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4372 ;;  product         1    2[BANK0 ] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      unsigned char 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4382 ;;      Params:         0       1       0       0       0
  4383 ;;      Locals:         0       2       0       0       0
  4384 ;;      Temps:          0       1       0       0       0
  4385 ;;      Totals:         0       4       0       0       0
  4386 ;;Total ram usage:        4 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_UART_TxNumber
  4392 ;;		_UART_Printf
  4393 ;;		_LCD_DisplayNumber
  4394 ;;		_LCD_Printf
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function ___bmul
  4400  09BA                     ___bmul:	
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4404                           ;___bmul@multiplier stored from wreg
  4405  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  4406  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  4407  09BC  00A3               	movwf	___bmul@multiplier
  4408  09BD  01A2               	clrf	___bmul@product
  4409  09BE                     l1916:	
  4410  09BE  1C23               	btfss	___bmul@multiplier,0
  4411  09BF  29C4               	goto	l1920
  4412  09C0  0820               	movf	___bmul@multiplicand,w
  4413  09C1  00A1               	movwf	??___bmul
  4414  09C2  0821               	movf	??___bmul,w
  4415  09C3  07A2               	addwf	___bmul@product,f
  4416  09C4                     l1920:	
  4417  09C4  1003               	clrc
  4418  09C5  0DA0               	rlf	___bmul@multiplicand,f
  4419  09C6  1003               	clrc
  4420  09C7  0CA3               	rrf	___bmul@multiplier,f
  4421  09C8  0823               	movf	___bmul@multiplier,w
  4422  09C9  1D03               	btfss	3,2
  4423  09CA  29BE               	goto	l1916
  4424  09CB  0822               	movf	___bmul@product,w
  4425  09CC  0008               	return
  4426  09CD                     __end_of___bmul:	
  4427                           
  4428                           	psect	text15
  4429  0005                     __ptext15:	
  4430 ;; *************** function _LCD_DisplayChar *****************
  4431 ;; Defined at:
  4432 ;;		line 386 in file "../00-libfiles/lcd.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  v_lcdData_u8    1    wreg     unsigned char 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  v_lcdData_u8    1   12[COMMON] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      void 
  4439 ;; Registers used:
  4440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4446 ;;      Params:         0       0       0       0       0
  4447 ;;      Locals:         1       0       0       0       0
  4448 ;;      Temps:          1       0       0       0       0
  4449 ;;      Totals:         2       0       0       0       0
  4450 ;;Total ram usage:        2 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    5
  4453 ;; This function calls:
  4454 ;;		_LCD_GoToNextLine
  4455 ;;		_lcd_DataWrite
  4456 ;; This function is called by:
  4457 ;;		_LCD_DisplayString
  4458 ;;		_LCD_DisplayNumber
  4459 ;;		_LCD_Printf
  4460 ;;		_LCD_ScrollMessage
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _LCD_DisplayChar
  4466  0005                     _LCD_DisplayChar:	
  4467                           
  4468                           ;incstack = 0
  4469                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4470                           ;LCD_DisplayChar@v_lcdData_u8 stored from wreg
  4471  0005  00FC               	movwf	LCD_DisplayChar@v_lcdData_u8
  4472                           
  4473                           ;lcd.c: 388: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData
      +                          _u8=='\n'))
  4474  0006  1683               	bsf	3,5	;RP0=1, select bank1
  4475  0007  1303               	bcf	3,6	;RP1=0, select bank1
  4476  0008  0855               	movf	(_LCDConfig^(0+128)+1),w
  4477  0009  1283               	bcf	3,5	;RP0=0, select bank0
  4478  000A  1303               	bcf	3,6	;RP1=0, select bank0
  4479  000B  0268               	subwf	_v_LcdTrackCursorPos_U8,w
  4480  000C  1803               	skipnc
  4481  000D  2812               	goto	l1906
  4482  000E  300A               	movlw	10
  4483  000F  067C               	xorwf	LCD_DisplayChar@v_lcdData_u8,w
  4484  0010  1D03               	btfss	3,2
  4485  0011  2817               	goto	l1908
  4486  0012                     l1906:	
  4487                           
  4488                           ;lcd.c: 389: {
  4489                           ;lcd.c: 392: LCD_GoToNextLine();
  4490  0012  120A  158A  2223  120A  118A  	fcall	_LCD_GoToNextLine
  4491  0017                     l1908:	
  4492                           
  4493                           ;lcd.c: 393: }
  4494                           ;lcd.c: 394: if(v_lcdData_u8!='\n')
  4495  0017  300A               	movlw	10
  4496  0018  067C               	xorwf	LCD_DisplayChar@v_lcdData_u8,w
  4497  0019  1903               	btfsc	3,2
  4498  001A  0008               	return
  4499                           
  4500                           ;lcd.c: 395: {
  4501                           ;lcd.c: 397: lcd_DataWrite(v_lcdData_u8);
  4502  001B  087C               	movf	LCD_DisplayChar@v_lcdData_u8,w
  4503  001C  120A  158A  22F0   	fcall	_lcd_DataWrite
  4504                           
  4505                           ;lcd.c: 398: v_LcdTrackCursorPos_U8++;
  4506  001F  3001               	movlw	1
  4507  0020  00FB               	movwf	??_LCD_DisplayChar
  4508  0021  087B               	movf	??_LCD_DisplayChar,w
  4509  0022  1283               	bcf	3,5	;RP0=0, select bank0
  4510  0023  1303               	bcf	3,6	;RP1=0, select bank0
  4511  0024  07E8               	addwf	_v_LcdTrackCursorPos_U8,f
  4512  0025  0008               	return
  4513  0026                     __end_of_LCD_DisplayChar:	
  4514                           
  4515                           	psect	text16
  4516  0AF0                     __ptext16:	
  4517 ;; *************** function _lcd_DataWrite *****************
  4518 ;; Defined at:
  4519 ;;		line 819 in file "../00-libfiles/lcd.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  dataByte        1    wreg     unsigned char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  dataByte        1    9[COMMON] unsigned char 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      void 
  4526 ;; Registers used:
  4527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4533 ;;      Params:         0       0       0       0       0
  4534 ;;      Locals:         1       0       0       0       0
  4535 ;;      Temps:          2       0       0       0       0
  4536 ;;      Totals:         3       0       0       0       0
  4537 ;;Total ram usage:        3 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    3
  4540 ;; This function calls:
  4541 ;;		_lcd_BusyCheck
  4542 ;;		_lcd_SendDataSignals
  4543 ;;		_lcd_SendHigherNibble
  4544 ;;		_lcd_SendLowerNibble
  4545 ;; This function is called by:
  4546 ;;		_LCD_DisplayChar
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           
  4551                           ;psect for function _lcd_DataWrite
  4552  0AF0                     _lcd_DataWrite:	
  4553                           
  4554                           ;incstack = 0
  4555                           ; Regs used in _lcd_DataWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4556                           ;lcd_DataWrite@dataByte stored from wreg
  4557  0AF0  00F9               	movwf	lcd_DataWrite@dataByte
  4558                           
  4559                           ;lcd.c: 821: lcd_BusyCheck();
  4560  0AF1  120A  158A  25CA  120A  158A  	fcall	_lcd_BusyCheck
  4561                           
  4562                           ;lcd.c: 822: if(LCDConfig.v_LcdMode_U8 == 8u)
  4563  0AF6  3008               	movlw	8
  4564  0AF7  1683               	bsf	3,5	;RP0=1, select bank1
  4565  0AF8  1303               	bcf	3,6	;RP1=0, select bank1
  4566  0AF9  0656               	xorwf	(_LCDConfig^(0+128)+2),w
  4567  0AFA  1D03               	btfss	3,2
  4568  0AFB  2B03               	goto	l1882
  4569                           
  4570                           ;lcd.c: 823: {
  4571                           ;lcd.c: 824: lcd_SendLowerNibble(dataByte);
  4572  0AFC  0879               	movf	lcd_DataWrite@dataByte,w
  4573  0AFD  120A  158A  239F  120A  158A  	fcall	_lcd_SendLowerNibble
  4574                           
  4575                           ;lcd.c: 825: }
  4576  0B02  2B1B               	goto	l1886
  4577  0B03                     l1882:	
  4578                           
  4579                           ;lcd.c: 826: else
  4580                           ;lcd.c: 827: {
  4581                           ;lcd.c: 828: lcd_SendHigherNibble(dataByte);
  4582  0B03  0879               	movf	lcd_DataWrite@dataByte,w
  4583  0B04  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  4584                           
  4585                           ;lcd.c: 829: lcd_SendDataSignals();
  4586  0B09  120A  158A  228D  120A  158A  	fcall	_lcd_SendDataSignals
  4587                           
  4588                           ;lcd.c: 830: dataByte = dataByte << 4;
  4589  0B0E  0879               	movf	lcd_DataWrite@dataByte,w
  4590  0B0F  00F7               	movwf	??_lcd_DataWrite
  4591  0B10  3003               	movlw	3
  4592  0B11                     u2335:	
  4593  0B11  1003               	clrc
  4594  0B12  0DF7               	rlf	??_lcd_DataWrite,f
  4595  0B13  3EFF               	addlw	-1
  4596  0B14  1D03               	skipz
  4597  0B15  2B11               	goto	u2335
  4598  0B16  1003               	clrc
  4599  0B17  0D77               	rlf	??_lcd_DataWrite,w
  4600  0B18  00F8               	movwf	??_lcd_DataWrite+1
  4601  0B19  0878               	movf	??_lcd_DataWrite+1,w
  4602  0B1A  00F9               	movwf	lcd_DataWrite@dataByte
  4603  0B1B                     l1886:	
  4604                           
  4605                           ;lcd.c: 831: }
  4606                           ;lcd.c: 833: lcd_SendHigherNibble(dataByte);
  4607  0B1B  0879               	movf	lcd_DataWrite@dataByte,w
  4608  0B1C  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  4609                           
  4610                           ;lcd.c: 834: lcd_SendDataSignals();
  4611  0B21  120A  158A  228D   	fcall	_lcd_SendDataSignals
  4612  0B24  0008               	return
  4613  0B25                     __end_of_lcd_DataWrite:	
  4614                           
  4615                           	psect	text17
  4616  0A8D                     __ptext17:	
  4617 ;; *************** function _lcd_SendDataSignals *****************
  4618 ;; Defined at:
  4619 ;;		line 995 in file "../00-libfiles/lcd.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4633 ;;      Params:         0       0       0       0       0
  4634 ;;      Locals:         0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0
  4636 ;;      Totals:         0       0       0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    1
  4640 ;; This function calls:
  4641 ;;		_DELAY_us
  4642 ;;		_GPIO_PinWrite
  4643 ;; This function is called by:
  4644 ;;		_lcd_DataWrite
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _lcd_SendDataSignals
  4650  0A8D                     _lcd_SendDataSignals:	
  4651                           
  4652                           ;lcd.c: 997: GPIO_PinWrite(LCDConfig.RS,1);
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _lcd_SendDataSignals: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4656  0A8D  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4657  0A8E  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  4658  0A8F  1683               	bsf	3,5	;RP0=1, select bank1
  4659  0A90  1303               	bcf	3,6	;RP1=0, select bank1
  4660  0A91  0857               	movf	(_LCDConfig^(0+128)+3),w
  4661  0A92  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  4662                           
  4663                           ;lcd.c: 998: GPIO_PinWrite(LCDConfig.RW,0);
  4664  0A97  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4665  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  4666  0A99  1303               	bcf	3,6	;RP1=0, select bank1
  4667  0A9A  0858               	movf	(_LCDConfig^(0+128)+4),w
  4668  0A9B  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  4669                           
  4670                           ;lcd.c: 999: GPIO_PinWrite(LCDConfig.EN,1);
  4671  0AA0  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4672  0AA1  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  4673  0AA2  1683               	bsf	3,5	;RP0=1, select bank1
  4674  0AA3  1303               	bcf	3,6	;RP1=0, select bank1
  4675  0AA4  0859               	movf	(_LCDConfig^(0+128)+5),w
  4676  0AA5  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  4677                           
  4678                           ;lcd.c: 1000: DELAY_us(10);
  4679  0AAA  300A               	movlw	10
  4680  0AAB  00F0               	movwf	DELAY_us@us_count
  4681  0AAC  3000               	movlw	0
  4682  0AAD  00F1               	movwf	DELAY_us@us_count+1
  4683  0AAE  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  4684                           
  4685                           ;lcd.c: 1001: GPIO_PinWrite(LCDConfig.EN,0);
  4686  0AB3  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  4687  0AB4  1683               	bsf	3,5	;RP0=1, select bank1
  4688  0AB5  1303               	bcf	3,6	;RP1=0, select bank1
  4689  0AB6  0859               	movf	(_LCDConfig^(0+128)+5),w
  4690  0AB7  120A  118A  20CA   	fcall	_GPIO_PinWrite
  4691  0ABA  0008               	return
  4692  0ABB                     __end_of_lcd_SendDataSignals:	
  4693                           
  4694                           	psect	text18
  4695  0A23                     __ptext18:	
  4696 ;; *************** function _LCD_GoToNextLine *****************
  4697 ;; Defined at:
  4698 ;;		line 286 in file "../00-libfiles/lcd.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4712 ;;      Params:         0       0       0       0       0
  4713 ;;      Locals:         0       0       0       0       0
  4714 ;;      Temps:          1       0       0       0       0
  4715 ;;      Totals:         1       0       0       0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    4
  4719 ;; This function calls:
  4720 ;;		_LCD_CmdWrite
  4721 ;; This function is called by:
  4722 ;;		_LCD_DisplayChar
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           
  4727                           ;psect for function _LCD_GoToNextLine
  4728  0A23                     _LCD_GoToNextLine:	
  4729                           
  4730                           ;lcd.c: 290: v_LcdTrackLineNum_U8++;
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4734  0A23  3001               	movlw	1
  4735  0A24  00FA               	movwf	??_LCD_GoToNextLine
  4736  0A25  087A               	movf	??_LCD_GoToNextLine,w
  4737  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  4738  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  4739  0A28  07E9               	addwf	_v_LcdTrackLineNum_U8,f
  4740                           
  4741                           ;lcd.c: 291: v_LcdTrackCursorPos_U8 = 0x00;
  4742  0A29  01E8               	clrf	_v_LcdTrackCursorPos_U8
  4743                           
  4744                           ;lcd.c: 292: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
  4745  0A2A  1683               	bsf	3,5	;RP0=1, select bank1
  4746  0A2B  1303               	bcf	3,6	;RP1=0, select bank1
  4747  0A2C  0854               	movf	_LCDConfig^(0+128),w
  4748  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  4749  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  4750  0A2F  0269               	subwf	_v_LcdTrackLineNum_U8,w
  4751  0A30  1803               	btfsc	3,0
  4752                           
  4753                           ;lcd.c: 293: v_LcdTrackLineNum_U8 = 0x00;
  4754  0A31  01E9               	clrf	_v_LcdTrackLineNum_U8
  4755                           
  4756                           ;lcd.c: 294: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
  4757  0A32  0869               	movf	_v_LcdTrackLineNum_U8,w
  4758  0A33  3E64               	addlw	(low (_ARR_LcdLineNumAddress_U8| 0))& (0+255)
  4759  0A34  0084               	movwf	4
  4760  0A35  1383               	bcf	3,7	;select IRP bank0
  4761  0A36  0800               	movf	0,w
  4762  0A37  120A  158A  22BB   	fcall	_LCD_CmdWrite
  4763  0A3A  0008               	return
  4764  0A3B                     __end_of_LCD_GoToNextLine:	
  4765                           
  4766                           	psect	text19
  4767  0C2E                     __ptext19:	
  4768 ;; *************** function _LCD_Init *****************
  4769 ;; Defined at:
  4770 ;;		line 192 in file "../00-libfiles/lcd.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  v_lcdNoOfLin    1    wreg     unsigned char 
  4773 ;;  v_MaxCharsPe    1   12[COMMON] unsigned char 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  v_lcdNoOfLin    1    0[BANK0 ] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4785 ;;      Params:         1       0       0       0       0
  4786 ;;      Locals:         0       1       0       0       0
  4787 ;;      Temps:          1       0       0       0       0
  4788 ;;      Totals:         2       1       0       0       0
  4789 ;;Total ram usage:        3 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    6
  4792 ;; This function calls:
  4793 ;;		_DELAY_ms
  4794 ;;		_LCD_Clear
  4795 ;;		_LCD_CmdWrite
  4796 ;;		_lcd_Reset
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _LCD_Init
  4804  0C2E                     _LCD_Init:	
  4805                           
  4806                           ;incstack = 0
  4807                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4808                           ;LCD_Init@v_lcdNoOfLines_u8 stored from wreg
  4809  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  4810  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0C30  00A0               	movwf	LCD_Init@v_lcdNoOfLines_u8
  4812                           
  4813                           ;lcd.c: 196: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
  4814  0C31  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  4815  0C32  00FD               	movwf	??_LCD_Init
  4816  0C33  087D               	movf	??_LCD_Init,w
  4817  0C34  1683               	bsf	3,5	;RP0=1, select bank1
  4818  0C35  1303               	bcf	3,6	;RP1=0, select bank1
  4819  0C36  00D5               	movwf	(_LCDConfig^(0+128)+1)
  4820                           
  4821                           ;lcd.c: 197: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
  4822  0C37  1283               	bcf	3,5	;RP0=0, select bank0
  4823  0C38  1303               	bcf	3,6	;RP1=0, select bank0
  4824  0C39  0820               	movf	LCD_Init@v_lcdNoOfLines_u8,w
  4825  0C3A  00FD               	movwf	??_LCD_Init
  4826  0C3B  087D               	movf	??_LCD_Init,w
  4827  0C3C  1683               	bsf	3,5	;RP0=1, select bank1
  4828  0C3D  1303               	bcf	3,6	;RP1=0, select bank1
  4829  0C3E  00D4               	movwf	_LCDConfig^(0+128)
  4830                           
  4831                           ;lcd.c: 198: if(v_lcdNoOfLines_u8 > 0x02)
  4832  0C3F  3003               	movlw	3
  4833  0C40  1283               	bcf	3,5	;RP0=0, select bank0
  4834  0C41  1303               	bcf	3,6	;RP1=0, select bank0
  4835  0C42  0220               	subwf	LCD_Init@v_lcdNoOfLines_u8,w
  4836  0C43  1C03               	skipc
  4837  0C44  2C51               	goto	l2310
  4838                           
  4839                           ;lcd.c: 199: {
  4840                           ;lcd.c: 200: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
  4841  0C45  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  4842  0C46  390F               	andlw	15
  4843  0C47  3E90               	addlw	144
  4844  0C48  00FD               	movwf	??_LCD_Init
  4845  0C49  087D               	movf	??_LCD_Init,w
  4846  0C4A  00E6               	movwf	_ARR_LcdLineNumAddress_U8+2
  4847                           
  4848                           ;lcd.c: 201: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
  4849  0C4B  087C               	movf	LCD_Init@v_MaxCharsPerLine_u8,w
  4850  0C4C  390F               	andlw	15
  4851  0C4D  3ED0               	addlw	208
  4852  0C4E  00FD               	movwf	??_LCD_Init
  4853  0C4F  087D               	movf	??_LCD_Init,w
  4854  0C50  00E7               	movwf	_ARR_LcdLineNumAddress_U8+3
  4855  0C51                     l2310:	
  4856                           
  4857                           ;lcd.c: 202: }
  4858                           ;lcd.c: 204: DELAY_ms(100);
  4859  0C51  3064               	movlw	100
  4860  0C52  00F2               	movwf	DELAY_ms@ms_count
  4861  0C53  3000               	movlw	0
  4862  0C54  00F3               	movwf	DELAY_ms@ms_count+1
  4863  0C55  120A  158A  21CD  120A  158A  	fcall	_DELAY_ms
  4864                           
  4865                           ;lcd.c: 206: if(LCDConfig.v_LcdMode_U8 == 8u)
  4866  0C5A  3008               	movlw	8
  4867  0C5B  1683               	bsf	3,5	;RP0=1, select bank1
  4868  0C5C  1303               	bcf	3,6	;RP1=0, select bank1
  4869  0C5D  0656               	xorwf	(_LCDConfig^(0+128)+2),w
  4870  0C5E  1D03               	btfss	3,2
  4871  0C5F  2C62               	goto	l2316
  4872                           
  4873                           ;lcd.c: 207: {
  4874                           ;lcd.c: 208: LCD_CmdWrite(0x38u);
  4875  0C60  3038               	movlw	56
  4876  0C61  2C6E               	goto	L6
  4877  0C62                     l2316:	
  4878                           ;lcd.c: 209: }
  4879                           
  4880                           
  4881                           ;lcd.c: 210: else if(LCDConfig.v_LcdMode_U8 == 4u)
  4882  0C62  3004               	movlw	4
  4883  0C63  1683               	bsf	3,5	;RP0=1, select bank1
  4884  0C64  1303               	bcf	3,6	;RP1=0, select bank1
  4885  0C65  0656               	xorwf	(_LCDConfig^(0+128)+2),w
  4886  0C66  1D03               	btfss	3,2
  4887  0C67  2C73               	goto	l181
  4888                           
  4889                           ;lcd.c: 211: {
  4890                           ;lcd.c: 212: lcd_Reset();
  4891  0C68  120A  158A  23DF  120A  158A  	fcall	_lcd_Reset
  4892                           
  4893                           ;lcd.c: 213: LCD_CmdWrite(0x28u);
  4894  0C6D  3028               	movlw	40
  4895  0C6E                     L6:	
  4896  0C6E  120A  158A  22BB  120A  158A  	fcall	_LCD_CmdWrite
  4897  0C73                     l181:	
  4898                           
  4899                           ;lcd.c: 214: }
  4900                           ;lcd.c: 216: LCD_CmdWrite(0x0Eu);
  4901  0C73  300E               	movlw	14
  4902  0C74  120A  158A  22BB  120A  158A  	fcall	_LCD_CmdWrite
  4903                           
  4904                           ;lcd.c: 217: LCD_Clear();
  4905  0C79  120A  158A  21AF   	fcall	_LCD_Clear
  4906  0C7C  0008               	return
  4907  0C7D                     __end_of_LCD_Init:	
  4908                           
  4909                           	psect	text20
  4910  0BDF                     __ptext20:	
  4911 ;; *************** function _lcd_Reset *****************
  4912 ;; Defined at:
  4913 ;;		line 906 in file "../00-libfiles/lcd.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;		None
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;		None
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4927 ;;      Params:         0       0       0       0       0
  4928 ;;      Locals:         0       0       0       0       0
  4929 ;;      Temps:          0       0       0       0       0
  4930 ;;      Totals:         0       0       0       0       0
  4931 ;;Total ram usage:        0 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    2
  4934 ;; This function calls:
  4935 ;;		_DELAY_ms
  4936 ;;		_DELAY_us
  4937 ;;		_lcd_SendCmdSignals
  4938 ;;		_lcd_SendHigherNibble
  4939 ;; This function is called by:
  4940 ;;		_LCD_Init
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _lcd_Reset
  4946  0BDF                     _lcd_Reset:	
  4947                           
  4948                           ;lcd.c: 909: lcd_SendHigherNibble(0x30);
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _lcd_Reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4952  0BDF  3030               	movlw	48
  4953  0BE0  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  4954                           
  4955                           ;lcd.c: 910: lcd_SendCmdSignals();
  4956  0BE5  120A  158A  2260  120A  158A  	fcall	_lcd_SendCmdSignals
  4957                           
  4958                           ;lcd.c: 911: DELAY_ms(100);
  4959  0BEA  3064               	movlw	100
  4960  0BEB  00F2               	movwf	DELAY_ms@ms_count
  4961  0BEC  3000               	movlw	0
  4962  0BED  00F3               	movwf	DELAY_ms@ms_count+1
  4963  0BEE  120A  158A  21CD  120A  158A  	fcall	_DELAY_ms
  4964                           
  4965                           ;lcd.c: 912: lcd_SendHigherNibble(0x30);
  4966  0BF3  3030               	movlw	48
  4967  0BF4  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  4968                           
  4969                           ;lcd.c: 913: lcd_SendCmdSignals();
  4970  0BF9  120A  158A  2260  120A  158A  	fcall	_lcd_SendCmdSignals
  4971                           
  4972                           ;lcd.c: 914: DELAY_us(200);
  4973  0BFE  30C8               	movlw	200
  4974  0BFF  00F0               	movwf	DELAY_us@us_count
  4975  0C00  3000               	movlw	0
  4976  0C01  00F1               	movwf	DELAY_us@us_count+1
  4977  0C02  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  4978                           
  4979                           ;lcd.c: 915: lcd_SendHigherNibble(0x30);
  4980  0C07  3030               	movlw	48
  4981  0C08  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  4982                           
  4983                           ;lcd.c: 916: lcd_SendCmdSignals();
  4984  0C0D  120A  158A  2260  120A  158A  	fcall	_lcd_SendCmdSignals
  4985                           
  4986                           ;lcd.c: 917: DELAY_us(200);
  4987  0C12  30C8               	movlw	200
  4988  0C13  00F0               	movwf	DELAY_us@us_count
  4989  0C14  3000               	movlw	0
  4990  0C15  00F1               	movwf	DELAY_us@us_count+1
  4991  0C16  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  4992                           
  4993                           ;lcd.c: 918: lcd_SendHigherNibble(0x20);
  4994  0C1B  3020               	movlw	32
  4995  0C1C  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  4996                           
  4997                           ;lcd.c: 919: lcd_SendCmdSignals();
  4998  0C21  120A  158A  2260  120A  158A  	fcall	_lcd_SendCmdSignals
  4999                           
  5000                           ;lcd.c: 920: DELAY_us(200);
  5001  0C26  30C8               	movlw	200
  5002  0C27  00F0               	movwf	DELAY_us@us_count
  5003  0C28  3000               	movlw	0
  5004  0C29  00F1               	movwf	DELAY_us@us_count+1
  5005  0C2A  120A  158A  21A4   	fcall	_DELAY_us
  5006  0C2D  0008               	return
  5007  0C2E                     __end_of_lcd_Reset:	
  5008                           
  5009                           	psect	text21
  5010  09AF                     __ptext21:	
  5011 ;; *************** function _LCD_Clear *****************
  5012 ;; Defined at:
  5013 ;;		line 231 in file "../00-libfiles/lcd.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5027 ;;      Params:         0       0       0       0       0
  5028 ;;      Locals:         0       0       0       0       0
  5029 ;;      Temps:          0       0       0       0       0
  5030 ;;      Totals:         0       0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    5
  5034 ;; This function calls:
  5035 ;;		_LCD_CmdWrite
  5036 ;;		_LCD_GoToLine
  5037 ;; This function is called by:
  5038 ;;		_LCD_Init
  5039 ;;		_main
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _LCD_Clear
  5045  09AF                     _LCD_Clear:	
  5046                           
  5047                           ;lcd.c: 233: LCD_CmdWrite(0x01u);
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5051  09AF  3001               	movlw	1
  5052  09B0  120A  158A  22BB  120A  158A  	fcall	_LCD_CmdWrite
  5053                           
  5054                           ;lcd.c: 234: LCD_GoToLine(0x00);
  5055  09B5  3000               	movlw	0
  5056  09B6  120A  158A  220C   	fcall	_LCD_GoToLine
  5057  09B9  0008               	return
  5058  09BA                     __end_of_LCD_Clear:	
  5059                           
  5060                           	psect	text22
  5061  0A0C                     __ptext22:	
  5062 ;; *************** function _LCD_GoToLine *****************
  5063 ;; Defined at:
  5064 ;;		line 259 in file "../00-libfiles/lcd.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  v_lineNumber    1    wreg     unsigned char 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  v_lineNumber    1   11[COMMON] unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5078 ;;      Params:         0       0       0       0       0
  5079 ;;      Locals:         1       0       0       0       0
  5080 ;;      Temps:          1       0       0       0       0
  5081 ;;      Totals:         2       0       0       0       0
  5082 ;;Total ram usage:        2 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    4
  5085 ;; This function calls:
  5086 ;;		_LCD_CmdWrite
  5087 ;; This function is called by:
  5088 ;;		_LCD_Clear
  5089 ;;		_LCD_ScrollMessage
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           
  5094                           ;psect for function _LCD_GoToLine
  5095  0A0C                     _LCD_GoToLine:	
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5099                           ;LCD_GoToLine@v_lineNumber_u8 stored from wreg
  5100  0A0C  00FB               	movwf	LCD_GoToLine@v_lineNumber_u8
  5101                           
  5102                           ;lcd.c: 261: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
  5103  0A0D  1683               	bsf	3,5	;RP0=1, select bank1
  5104  0A0E  1303               	bcf	3,6	;RP1=0, select bank1
  5105  0A0F  0854               	movf	_LCDConfig^(0+128),w
  5106  0A10  027B               	subwf	LCD_GoToLine@v_lineNumber_u8,w
  5107  0A11  1803               	skipnc
  5108  0A12  0008               	return
  5109                           
  5110                           ;lcd.c: 262: {
  5111                           ;lcd.c: 265: v_LcdTrackCursorPos_U8 = 0x00;
  5112  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  5113  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  5114  0A15  01E8               	clrf	_v_LcdTrackCursorPos_U8
  5115                           
  5116                           ;lcd.c: 266: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
  5117  0A16  087B               	movf	LCD_GoToLine@v_lineNumber_u8,w
  5118  0A17  00FA               	movwf	??_LCD_GoToLine
  5119  0A18  087A               	movf	??_LCD_GoToLine,w
  5120  0A19  00E9               	movwf	_v_LcdTrackLineNum_U8
  5121                           
  5122                           ;lcd.c: 267: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
  5123  0A1A  087B               	movf	LCD_GoToLine@v_lineNumber_u8,w
  5124  0A1B  3E64               	addlw	(low (_ARR_LcdLineNumAddress_U8| 0))& (0+255)
  5125  0A1C  0084               	movwf	4
  5126  0A1D  1383               	bcf	3,7	;select IRP bank0
  5127  0A1E  0800               	movf	0,w
  5128  0A1F  120A  158A  22BB   	fcall	_LCD_CmdWrite
  5129  0A22  0008               	return
  5130  0A23                     __end_of_LCD_GoToLine:	
  5131                           
  5132                           	psect	text23
  5133  0ABB                     __ptext23:	
  5134 ;; *************** function _LCD_CmdWrite *****************
  5135 ;; Defined at:
  5136 ;;		line 352 in file "../00-libfiles/lcd.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  v_lcdCmd_u8     1    wreg     unsigned char 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  v_lcdCmd_u8     1    9[COMMON] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5150 ;;      Params:         0       0       0       0       0
  5151 ;;      Locals:         1       0       0       0       0
  5152 ;;      Temps:          2       0       0       0       0
  5153 ;;      Totals:         3       0       0       0       0
  5154 ;;Total ram usage:        3 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    3
  5157 ;; This function calls:
  5158 ;;		_lcd_BusyCheck
  5159 ;;		_lcd_SendCmdSignals
  5160 ;;		_lcd_SendHigherNibble
  5161 ;;		_lcd_SendLowerNibble
  5162 ;; This function is called by:
  5163 ;;		_LCD_Init
  5164 ;;		_LCD_Clear
  5165 ;;		_LCD_GoToLine
  5166 ;;		_LCD_GoToNextLine
  5167 ;;		_LCD_ScrollMessage
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _LCD_CmdWrite
  5173  0ABB                     _LCD_CmdWrite:	
  5174                           
  5175                           ;incstack = 0
  5176                           ; Regs used in _LCD_CmdWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5177                           ;LCD_CmdWrite@v_lcdCmd_u8 stored from wreg
  5178  0ABB  00F9               	movwf	LCD_CmdWrite@v_lcdCmd_u8
  5179                           
  5180                           ;lcd.c: 354: lcd_BusyCheck();
  5181  0ABC  120A  158A  25CA  120A  158A  	fcall	_lcd_BusyCheck
  5182                           
  5183                           ;lcd.c: 355: if(LCDConfig.v_LcdMode_U8 == 8u)
  5184  0AC1  3008               	movlw	8
  5185  0AC2  1683               	bsf	3,5	;RP0=1, select bank1
  5186  0AC3  1303               	bcf	3,6	;RP1=0, select bank1
  5187  0AC4  0656               	xorwf	(_LCDConfig^(0+128)+2),w
  5188  0AC5  1D03               	btfss	3,2
  5189  0AC6  2ACE               	goto	l1852
  5190                           
  5191                           ;lcd.c: 356: {
  5192                           ;lcd.c: 357: lcd_SendLowerNibble(v_lcdCmd_u8);
  5193  0AC7  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  5194  0AC8  120A  158A  239F  120A  158A  	fcall	_lcd_SendLowerNibble
  5195                           
  5196                           ;lcd.c: 358: }
  5197  0ACD  2AE6               	goto	l1856
  5198  0ACE                     l1852:	
  5199                           
  5200                           ;lcd.c: 359: else
  5201                           ;lcd.c: 360: {
  5202                           ;lcd.c: 361: lcd_SendHigherNibble(v_lcdCmd_u8);
  5203  0ACE  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  5204  0ACF  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  5205                           
  5206                           ;lcd.c: 362: lcd_SendCmdSignals();
  5207  0AD4  120A  158A  2260  120A  158A  	fcall	_lcd_SendCmdSignals
  5208                           
  5209                           ;lcd.c: 363: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
  5210  0AD9  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  5211  0ADA  00F7               	movwf	??_LCD_CmdWrite
  5212  0ADB  3003               	movlw	3
  5213  0ADC                     u2305:	
  5214  0ADC  1003               	clrc
  5215  0ADD  0DF7               	rlf	??_LCD_CmdWrite,f
  5216  0ADE  3EFF               	addlw	-1
  5217  0ADF  1D03               	skipz
  5218  0AE0  2ADC               	goto	u2305
  5219  0AE1  1003               	clrc
  5220  0AE2  0D77               	rlf	??_LCD_CmdWrite,w
  5221  0AE3  00F8               	movwf	??_LCD_CmdWrite+1
  5222  0AE4  0878               	movf	??_LCD_CmdWrite+1,w
  5223  0AE5  00F9               	movwf	LCD_CmdWrite@v_lcdCmd_u8
  5224  0AE6                     l1856:	
  5225                           
  5226                           ;lcd.c: 364: }
  5227                           ;lcd.c: 366: lcd_SendHigherNibble(v_lcdCmd_u8);
  5228  0AE6  0879               	movf	LCD_CmdWrite@v_lcdCmd_u8,w
  5229  0AE7  120A  158A  235F  120A  158A  	fcall	_lcd_SendHigherNibble
  5230                           
  5231                           ;lcd.c: 367: lcd_SendCmdSignals();
  5232  0AEC  120A  158A  2260   	fcall	_lcd_SendCmdSignals
  5233  0AEF  0008               	return
  5234  0AF0                     __end_of_LCD_CmdWrite:	
  5235                           
  5236                           	psect	text24
  5237  0B9F                     __ptext24:	
  5238 ;; *************** function _lcd_SendLowerNibble *****************
  5239 ;; Defined at:
  5240 ;;		line 955 in file "../00-libfiles/lcd.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  dataByte        1    wreg     unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  dataByte        1    6[COMMON] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5254 ;;      Params:         0       0       0       0       0
  5255 ;;      Locals:         1       0       0       0       0
  5256 ;;      Temps:          1       0       0       0       0
  5257 ;;      Totals:         2       0       0       0       0
  5258 ;;Total ram usage:        2 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    1
  5261 ;; This function calls:
  5262 ;;		_GPIO_PinWrite
  5263 ;; This function is called by:
  5264 ;;		_LCD_CmdWrite
  5265 ;;		_lcd_DataWrite
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _lcd_SendLowerNibble
  5271  0B9F                     _lcd_SendLowerNibble:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _lcd_SendLowerNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5275                           ;lcd_SendLowerNibble@dataByte stored from wreg
  5276  0B9F  00F6               	movwf	lcd_SendLowerNibble@dataByte
  5277                           
  5278                           ;lcd.c: 957: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&((1<<(0))))!=0u));
  5279  0BA0  1C76               	btfss	lcd_SendLowerNibble@dataByte,0
  5280  0BA1  2BA4               	goto	u2130
  5281  0BA2  3001               	movlw	1
  5282  0BA3  2BA5               	goto	u2140
  5283  0BA4                     u2130:	
  5284  0BA4  3000               	movlw	0
  5285  0BA5                     u2140:	
  5286  0BA5  00F5               	movwf	??_lcd_SendLowerNibble
  5287  0BA6  0875               	movf	??_lcd_SendLowerNibble,w
  5288  0BA7  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5289  0BA8  1683               	bsf	3,5	;RP0=1, select bank1
  5290  0BA9  1303               	bcf	3,6	;RP1=0, select bank1
  5291  0BAA  085A               	movf	(_LCDConfig^(0+128)+6),w
  5292  0BAB  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5293                           
  5294                           ;lcd.c: 958: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&((1<<(1))))!=0u));
  5295  0BB0  1CF6               	btfss	lcd_SendLowerNibble@dataByte,1
  5296  0BB1  2BB4               	goto	u2150
  5297  0BB2  3001               	movlw	1
  5298  0BB3  2BB5               	goto	u2160
  5299  0BB4                     u2150:	
  5300  0BB4  3000               	movlw	0
  5301  0BB5                     u2160:	
  5302  0BB5  00F5               	movwf	??_lcd_SendLowerNibble
  5303  0BB6  0875               	movf	??_lcd_SendLowerNibble,w
  5304  0BB7  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5305  0BB8  1683               	bsf	3,5	;RP0=1, select bank1
  5306  0BB9  1303               	bcf	3,6	;RP1=0, select bank1
  5307  0BBA  085B               	movf	(_LCDConfig^(0+128)+7),w
  5308  0BBB  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5309                           
  5310                           ;lcd.c: 959: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&((1<<(2))))!=0u));
  5311  0BC0  1D76               	btfss	lcd_SendLowerNibble@dataByte,2
  5312  0BC1  2BC4               	goto	u2170
  5313  0BC2  3001               	movlw	1
  5314  0BC3  2BC5               	goto	u2180
  5315  0BC4                     u2170:	
  5316  0BC4  3000               	movlw	0
  5317  0BC5                     u2180:	
  5318  0BC5  00F5               	movwf	??_lcd_SendLowerNibble
  5319  0BC6  0875               	movf	??_lcd_SendLowerNibble,w
  5320  0BC7  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5321  0BC8  1683               	bsf	3,5	;RP0=1, select bank1
  5322  0BC9  1303               	bcf	3,6	;RP1=0, select bank1
  5323  0BCA  085C               	movf	(_LCDConfig^(0+128)+8),w
  5324  0BCB  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5325                           
  5326                           ;lcd.c: 960: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&((1<<(3))))!=0u));
  5327  0BD0  1DF6               	btfss	lcd_SendLowerNibble@dataByte,3
  5328  0BD1  2BD4               	goto	u2190
  5329  0BD2  3001               	movlw	1
  5330  0BD3  2BD5               	goto	u2200
  5331  0BD4                     u2190:	
  5332  0BD4  3000               	movlw	0
  5333  0BD5                     u2200:	
  5334  0BD5  00F5               	movwf	??_lcd_SendLowerNibble
  5335  0BD6  0875               	movf	??_lcd_SendLowerNibble,w
  5336  0BD7  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5337  0BD8  1683               	bsf	3,5	;RP0=1, select bank1
  5338  0BD9  1303               	bcf	3,6	;RP1=0, select bank1
  5339  0BDA  085D               	movf	(_LCDConfig^(0+128)+9),w
  5340  0BDB  120A  118A  20CA   	fcall	_GPIO_PinWrite
  5341  0BDE  0008               	return
  5342  0BDF                     __end_of_lcd_SendLowerNibble:	
  5343                           
  5344                           	psect	text25
  5345  0B5F                     __ptext25:	
  5346 ;; *************** function _lcd_SendHigherNibble *****************
  5347 ;; Defined at:
  5348 ;;		line 936 in file "../00-libfiles/lcd.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  dataByte        1    wreg     unsigned char 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  dataByte        1    6[COMMON] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5362 ;;      Params:         0       0       0       0       0
  5363 ;;      Locals:         1       0       0       0       0
  5364 ;;      Temps:          1       0       0       0       0
  5365 ;;      Totals:         2       0       0       0       0
  5366 ;;Total ram usage:        2 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    1
  5369 ;; This function calls:
  5370 ;;		_GPIO_PinWrite
  5371 ;; This function is called by:
  5372 ;;		_LCD_CmdWrite
  5373 ;;		_lcd_DataWrite
  5374 ;;		_lcd_Reset
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           
  5379                           ;psect for function _lcd_SendHigherNibble
  5380  0B5F                     _lcd_SendHigherNibble:	
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _lcd_SendHigherNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5384                           ;lcd_SendHigherNibble@dataByte stored from wreg
  5385  0B5F  00F6               	movwf	lcd_SendHigherNibble@dataByte
  5386                           
  5387                           ;lcd.c: 938: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&((1<<(4))))!=0u));
  5388  0B60  1E76               	btfss	lcd_SendHigherNibble@dataByte,4
  5389  0B61  2B64               	goto	u2210
  5390  0B62  3001               	movlw	1
  5391  0B63  2B65               	goto	u2220
  5392  0B64                     u2210:	
  5393  0B64  3000               	movlw	0
  5394  0B65                     u2220:	
  5395  0B65  00F5               	movwf	??_lcd_SendHigherNibble
  5396  0B66  0875               	movf	??_lcd_SendHigherNibble,w
  5397  0B67  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5398  0B68  1683               	bsf	3,5	;RP0=1, select bank1
  5399  0B69  1303               	bcf	3,6	;RP1=0, select bank1
  5400  0B6A  085E               	movf	(_LCDConfig^(0+128)+10),w
  5401  0B6B  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5402                           
  5403                           ;lcd.c: 939: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&((1<<(5))))!=0u));
  5404  0B70  1EF6               	btfss	lcd_SendHigherNibble@dataByte,5
  5405  0B71  2B74               	goto	u2230
  5406  0B72  3001               	movlw	1
  5407  0B73  2B75               	goto	u2240
  5408  0B74                     u2230:	
  5409  0B74  3000               	movlw	0
  5410  0B75                     u2240:	
  5411  0B75  00F5               	movwf	??_lcd_SendHigherNibble
  5412  0B76  0875               	movf	??_lcd_SendHigherNibble,w
  5413  0B77  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5414  0B78  1683               	bsf	3,5	;RP0=1, select bank1
  5415  0B79  1303               	bcf	3,6	;RP1=0, select bank1
  5416  0B7A  085F               	movf	(_LCDConfig^(0+128)+11),w
  5417  0B7B  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5418                           
  5419                           ;lcd.c: 940: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&((1<<(6))))!=0u));
  5420  0B80  1F76               	btfss	lcd_SendHigherNibble@dataByte,6
  5421  0B81  2B84               	goto	u2250
  5422  0B82  3001               	movlw	1
  5423  0B83  2B85               	goto	u2260
  5424  0B84                     u2250:	
  5425  0B84  3000               	movlw	0
  5426  0B85                     u2260:	
  5427  0B85  00F5               	movwf	??_lcd_SendHigherNibble
  5428  0B86  0875               	movf	??_lcd_SendHigherNibble,w
  5429  0B87  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5430  0B88  1683               	bsf	3,5	;RP0=1, select bank1
  5431  0B89  1303               	bcf	3,6	;RP1=0, select bank1
  5432  0B8A  0860               	movf	(_LCDConfig^(0+128)+12),w
  5433  0B8B  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5434                           
  5435                           ;lcd.c: 941: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&((1<<(7))))!=0u));
  5436  0B90  1FF6               	btfss	lcd_SendHigherNibble@dataByte,7
  5437  0B91  2B94               	goto	u2270
  5438  0B92  3001               	movlw	1
  5439  0B93  2B95               	goto	u2280
  5440  0B94                     u2270:	
  5441  0B94  3000               	movlw	0
  5442  0B95                     u2280:	
  5443  0B95  00F5               	movwf	??_lcd_SendHigherNibble
  5444  0B96  0875               	movf	??_lcd_SendHigherNibble,w
  5445  0B97  00F0               	movwf	GPIO_PinWrite@var_pinValue_u8
  5446  0B98  1683               	bsf	3,5	;RP0=1, select bank1
  5447  0B99  1303               	bcf	3,6	;RP1=0, select bank1
  5448  0B9A  0861               	movf	(_LCDConfig^(0+128)+13),w
  5449  0B9B  120A  118A  20CA   	fcall	_GPIO_PinWrite
  5450  0B9E  0008               	return
  5451  0B9F                     __end_of_lcd_SendHigherNibble:	
  5452                           
  5453                           	psect	text26
  5454  0A60                     __ptext26:	
  5455 ;; *************** function _lcd_SendCmdSignals *****************
  5456 ;; Defined at:
  5457 ;;		line 974 in file "../00-libfiles/lcd.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5471 ;;      Params:         0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0
  5474 ;;      Totals:         0       0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    1
  5478 ;; This function calls:
  5479 ;;		_DELAY_us
  5480 ;;		_GPIO_PinWrite
  5481 ;; This function is called by:
  5482 ;;		_LCD_CmdWrite
  5483 ;;		_lcd_Reset
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           
  5488                           ;psect for function _lcd_SendCmdSignals
  5489  0A60                     _lcd_SendCmdSignals:	
  5490                           
  5491                           ;lcd.c: 976: GPIO_PinWrite(LCDConfig.RS,0);
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _lcd_SendCmdSignals: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5495  0A60  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5496  0A61  1683               	bsf	3,5	;RP0=1, select bank1
  5497  0A62  1303               	bcf	3,6	;RP1=0, select bank1
  5498  0A63  0857               	movf	(_LCDConfig^(0+128)+3),w
  5499  0A64  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5500                           
  5501                           ;lcd.c: 977: GPIO_PinWrite(LCDConfig.RW,0);
  5502  0A69  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5503  0A6A  1683               	bsf	3,5	;RP0=1, select bank1
  5504  0A6B  1303               	bcf	3,6	;RP1=0, select bank1
  5505  0A6C  0858               	movf	(_LCDConfig^(0+128)+4),w
  5506  0A6D  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5507                           
  5508                           ;lcd.c: 978: GPIO_PinWrite(LCDConfig.EN,1);
  5509  0A72  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5510  0A73  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  5511  0A74  1683               	bsf	3,5	;RP0=1, select bank1
  5512  0A75  1303               	bcf	3,6	;RP1=0, select bank1
  5513  0A76  0859               	movf	(_LCDConfig^(0+128)+5),w
  5514  0A77  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5515                           
  5516                           ;lcd.c: 979: DELAY_us(10);
  5517  0A7C  300A               	movlw	10
  5518  0A7D  00F0               	movwf	DELAY_us@us_count
  5519  0A7E  3000               	movlw	0
  5520  0A7F  00F1               	movwf	DELAY_us@us_count+1
  5521  0A80  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  5522                           
  5523                           ;lcd.c: 980: GPIO_PinWrite(LCDConfig.EN,0);
  5524  0A85  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5525  0A86  1683               	bsf	3,5	;RP0=1, select bank1
  5526  0A87  1303               	bcf	3,6	;RP1=0, select bank1
  5527  0A88  0859               	movf	(_LCDConfig^(0+128)+5),w
  5528  0A89  120A  118A  20CA   	fcall	_GPIO_PinWrite
  5529  0A8C  0008               	return
  5530  0A8D                     __end_of_lcd_SendCmdSignals:	
  5531                           
  5532                           	psect	text27
  5533  0DCA                     __ptext27:	
  5534 ;; *************** function _lcd_BusyCheck *****************
  5535 ;; Defined at:
  5536 ;;		line 853 in file "../00-libfiles/lcd.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  busyflag        1    6[COMMON] unsigned char 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5550 ;;      Params:         0       0       0       0       0
  5551 ;;      Locals:         1       0       0       0       0
  5552 ;;      Temps:          1       0       0       0       0
  5553 ;;      Totals:         2       0       0       0       0
  5554 ;;Total ram usage:        2 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    2
  5557 ;; This function calls:
  5558 ;;		_DELAY_ms
  5559 ;;		_DELAY_us
  5560 ;;		_GPIO_PinDirection
  5561 ;;		_GPIO_PinRead
  5562 ;;		_GPIO_PinWrite
  5563 ;; This function is called by:
  5564 ;;		_LCD_CmdWrite
  5565 ;;		_lcd_DataWrite
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           
  5570                           ;psect for function _lcd_BusyCheck
  5571  0DCA                     _lcd_BusyCheck:	
  5572                           
  5573                           ;lcd.c: 855: uint8_t busyflag;
  5574                           ;lcd.c: 857: if(LCDConfig.RW == P_NC)
  5575                           
  5576                           ;incstack = 0
  5577                           ; Regs used in _lcd_BusyCheck: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5578  0DCA  1683               	bsf	3,5	;RP0=1, select bank1
  5579  0DCB  1303               	bcf	3,6	;RP1=0, select bank1
  5580  0DCC  0A58               	incf	(_LCDConfig^(0+128)+4),w
  5581  0DCD  1D03               	btfss	3,2
  5582  0DCE  2E4E               	goto	l1834
  5583                           
  5584                           ;lcd.c: 858: {
  5585                           ;lcd.c: 859: GPIO_PinDirection(LCDConfig.D7,0x01u);
  5586  0DCF  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  5587  0DD0  0AF0               	incf	GPIO_PinDirection@var_pinDirn_u8,f
  5588  0DD1  0861               	movf	(_LCDConfig^(0+128)+13),w
  5589  0DD2  120A  158A  2727  120A  158A  	fcall	_GPIO_PinDirection
  5590                           
  5591                           ;lcd.c: 860: GPIO_PinWrite(LCDConfig.RS,0);
  5592  0DD7  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5593  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
  5594  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
  5595  0DDA  0857               	movf	(_LCDConfig^(0+128)+3),w
  5596  0DDB  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5597                           
  5598                           ;lcd.c: 861: GPIO_PinWrite(LCDConfig.RW,1);
  5599  0DE0  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5600  0DE1  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  5601  0DE2  1683               	bsf	3,5	;RP0=1, select bank1
  5602  0DE3  1303               	bcf	3,6	;RP1=0, select bank1
  5603  0DE4  0858               	movf	(_LCDConfig^(0+128)+4),w
  5604  0DE5  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5605  0DEA                     l303:	
  5606                           ;lcd.c: 862: do
  5607                           
  5608                           
  5609                           ;lcd.c: 863: {
  5610                           ;lcd.c: 865: GPIO_PinWrite(LCDConfig.EN,0);
  5611  0DEA  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5612  0DEB  1683               	bsf	3,5	;RP0=1, select bank1
  5613  0DEC  1303               	bcf	3,6	;RP1=0, select bank1
  5614  0DED  0859               	movf	(_LCDConfig^(0+128)+5),w
  5615  0DEE  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5616                           
  5617                           ;lcd.c: 866: DELAY_us(10);
  5618  0DF3  300A               	movlw	10
  5619  0DF4  00F0               	movwf	DELAY_us@us_count
  5620  0DF5  3000               	movlw	0
  5621  0DF6  00F1               	movwf	DELAY_us@us_count+1
  5622  0DF7  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  5623                           
  5624                           ;lcd.c: 867: GPIO_PinWrite(LCDConfig.EN,1);
  5625  0DFC  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5626  0DFD  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  5627  0DFE  1683               	bsf	3,5	;RP0=1, select bank1
  5628  0DFF  1303               	bcf	3,6	;RP1=0, select bank1
  5629  0E00  0859               	movf	(_LCDConfig^(0+128)+5),w
  5630  0E01  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5631                           
  5632                           ;lcd.c: 868: DELAY_us(10);
  5633  0E06  300A               	movlw	10
  5634  0E07  00F0               	movwf	DELAY_us@us_count
  5635  0E08  3000               	movlw	0
  5636  0E09  00F1               	movwf	DELAY_us@us_count+1
  5637  0E0A  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  5638                           
  5639                           ;lcd.c: 869: busyflag = GPIO_PinRead(LCDConfig.D7);
  5640  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  5641  0E10  1303               	bcf	3,6	;RP1=0, select bank1
  5642  0E11  0861               	movf	(_LCDConfig^(0+128)+13),w
  5643  0E12  120A  158A  24DB  120A  158A  	fcall	_GPIO_PinRead
  5644  0E17  00F5               	movwf	??_lcd_BusyCheck
  5645  0E18  0875               	movf	??_lcd_BusyCheck,w
  5646  0E19  00F6               	movwf	lcd_BusyCheck@busyflag
  5647                           
  5648                           ;lcd.c: 872: if(LCDConfig.v_LcdMode_U8 == 4)
  5649  0E1A  3004               	movlw	4
  5650  0E1B  1683               	bsf	3,5	;RP0=1, select bank1
  5651  0E1C  1303               	bcf	3,6	;RP1=0, select bank1
  5652  0E1D  0656               	xorwf	(_LCDConfig^(0+128)+2),w
  5653  0E1E  1D03               	btfss	3,2
  5654  0E1F  2E43               	goto	l1830
  5655                           
  5656                           ;lcd.c: 873: {
  5657                           ;lcd.c: 875: GPIO_PinWrite(LCDConfig.EN,0);
  5658  0E20  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5659  0E21  0859               	movf	(_LCDConfig^(0+128)+5),w
  5660  0E22  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5661                           
  5662                           ;lcd.c: 876: DELAY_us(10);
  5663  0E27  300A               	movlw	10
  5664  0E28  00F0               	movwf	DELAY_us@us_count
  5665  0E29  3000               	movlw	0
  5666  0E2A  00F1               	movwf	DELAY_us@us_count+1
  5667  0E2B  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  5668                           
  5669                           ;lcd.c: 877: GPIO_PinWrite(LCDConfig.EN,1);
  5670  0E30  01F0               	clrf	GPIO_PinWrite@var_pinValue_u8
  5671  0E31  0AF0               	incf	GPIO_PinWrite@var_pinValue_u8,f
  5672  0E32  1683               	bsf	3,5	;RP0=1, select bank1
  5673  0E33  1303               	bcf	3,6	;RP1=0, select bank1
  5674  0E34  0859               	movf	(_LCDConfig^(0+128)+5),w
  5675  0E35  120A  118A  20CA  120A  158A  	fcall	_GPIO_PinWrite
  5676                           
  5677                           ;lcd.c: 878: DELAY_us(10);
  5678  0E3A  300A               	movlw	10
  5679  0E3B  00F0               	movwf	DELAY_us@us_count
  5680  0E3C  3000               	movlw	0
  5681  0E3D  00F1               	movwf	DELAY_us@us_count+1
  5682  0E3E  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  5683  0E43                     l1830:	
  5684                           
  5685                           ;lcd.c: 879: }
  5686                           ;lcd.c: 880: }while(busyflag!=0);
  5687  0E43  0876               	movf	lcd_BusyCheck@busyflag,w
  5688  0E44  1D03               	btfss	3,2
  5689  0E45  2DEA               	goto	l303
  5690                           
  5691                           ;lcd.c: 882: GPIO_PinDirection(LCDConfig.D7,0x00u);
  5692  0E46  01F0               	clrf	GPIO_PinDirection@var_pinDirn_u8
  5693  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  5694  0E48  1303               	bcf	3,6	;RP1=0, select bank1
  5695  0E49  0861               	movf	(_LCDConfig^(0+128)+13),w
  5696  0E4A  120A  158A  2727   	fcall	_GPIO_PinDirection
  5697                           
  5698                           ;lcd.c: 883: }
  5699  0E4D  0008               	return
  5700  0E4E                     l1834:	
  5701                           
  5702                           ;lcd.c: 884: else
  5703                           ;lcd.c: 885: {
  5704                           ;lcd.c: 888: DELAY_ms(1);
  5705  0E4E  3001               	movlw	1
  5706  0E4F  00F2               	movwf	DELAY_ms@ms_count
  5707  0E50  3000               	movlw	0
  5708  0E51  00F3               	movwf	DELAY_ms@ms_count+1
  5709  0E52  120A  158A  21CD   	fcall	_DELAY_ms
  5710  0E55  0008               	return
  5711  0E56                     __end_of_lcd_BusyCheck:	
  5712                           
  5713                           	psect	text28
  5714  00CA                     __ptext28:	
  5715 ;; *************** function _GPIO_PinWrite *****************
  5716 ;; Defined at:
  5717 ;;		line 127 in file "../00-libfiles/gpio.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  enm_pinNumbe    1    wreg     enum E1088
  5720 ;;  var_pinValue    1    0[COMMON] unsigned char 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  5723 ;;  var_portNumb    1    3[COMMON] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5733 ;;      Params:         1       0       0       0       0
  5734 ;;      Locals:         2       0       0       0       0
  5735 ;;      Temps:          2       0       0       0       0
  5736 ;;      Totals:         5       0       0       0       0
  5737 ;;Total ram usage:        5 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_lcd_BusyCheck
  5743 ;;		_lcd_SendHigherNibble
  5744 ;;		_lcd_SendLowerNibble
  5745 ;;		_lcd_SendCmdSignals
  5746 ;;		_lcd_SendDataSignals
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function _GPIO_PinWrite
  5752  00CA                     _GPIO_PinWrite:	
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in _GPIO_PinWrite: [wreg-fsr0h+status,2+status,0]
  5756                           ;GPIO_PinWrite@enm_pinNumber stored from wreg
  5757  00CA  00F4               	movwf	GPIO_PinWrite@enm_pinNumber
  5758                           
  5759                           ;gpio.c: 130: uint8_t var_portNumber_u8;
  5760                           ;gpio.c: 133: var_portNumber_u8 = (enm_pinNumber>>3);
  5761  00CB  0874               	movf	GPIO_PinWrite@enm_pinNumber,w
  5762  00CC  00F1               	movwf	??_GPIO_PinWrite
  5763  00CD  3003               	movlw	3
  5764  00CE                     u1785:	
  5765  00CE  1003               	clrc
  5766  00CF  0CF1               	rrf	??_GPIO_PinWrite,f
  5767  00D0  3EFF               	addlw	-1
  5768  00D1  1D03               	skipz
  5769  00D2  28CE               	goto	u1785
  5770  00D3  0871               	movf	??_GPIO_PinWrite,w
  5771  00D4  00F2               	movwf	??_GPIO_PinWrite+1
  5772  00D5  0872               	movf	??_GPIO_PinWrite+1,w
  5773  00D6  00F3               	movwf	GPIO_PinWrite@var_portNumber_u8
  5774                           
  5775                           ;gpio.c: 134: enm_pinNumber = enm_pinNumber & 0x07;
  5776  00D7  0874               	movf	GPIO_PinWrite@enm_pinNumber,w
  5777  00D8  3907               	andlw	7
  5778  00D9  00F1               	movwf	??_GPIO_PinWrite
  5779  00DA  0871               	movf	??_GPIO_PinWrite,w
  5780  00DB  00F4               	movwf	GPIO_PinWrite@enm_pinNumber
  5781                           
  5782                           ;gpio.c: 138: switch(var_portNumber_u8)
  5783  00DC  2991               	goto	l1786
  5784  00DD                     l1754:	
  5785                           ;gpio.c: 139: {
  5786                           ;gpio.c: 141: case 0:
  5787                           
  5788                           
  5789                           ;gpio.c: 142: ((var_pinValue_u8)? ((PORTA) |= (1<<(enm_pinNumber))): ((PORTA) &= ~(1<<(e
      +                          nm_pinNumber))));
  5790  00DD  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  5791  00DE  1903               	btfsc	3,2
  5792  00DF  28F0               	goto	l1758
  5793  00E0  3001               	movlw	1
  5794  00E1  00F1               	movwf	??_GPIO_PinWrite
  5795  00E2  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5796  00E3  28E6               	goto	u1804
  5797  00E4                     u1805:	
  5798  00E4  1003               	clrc
  5799  00E5  0DF1               	rlf	??_GPIO_PinWrite,f
  5800  00E6                     u1804:	
  5801  00E6  3EFF               	addlw	-1
  5802  00E7  1D03               	skipz
  5803  00E8  28E4               	goto	u1805
  5804  00E9  0871               	movf	??_GPIO_PinWrite,w
  5805  00EA  00F2               	movwf	??_GPIO_PinWrite+1
  5806  00EB  0872               	movf	??_GPIO_PinWrite+1,w
  5807  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  5808  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  5809  00EE  0485               	iorwf	5,f	;volatile
  5810  00EF  0008               	return
  5811  00F0                     l1758:	
  5812  00F0  3001               	movlw	1
  5813  00F1  00F1               	movwf	??_GPIO_PinWrite
  5814  00F2  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5815  00F3  28F6               	goto	u1814
  5816  00F4                     u1815:	
  5817  00F4  1003               	clrc
  5818  00F5  0DF1               	rlf	??_GPIO_PinWrite,f
  5819  00F6                     u1814:	
  5820  00F6  3EFF               	addlw	-1
  5821  00F7  1D03               	skipz
  5822  00F8  28F4               	goto	u1815
  5823  00F9  0871               	movf	??_GPIO_PinWrite,w
  5824  00FA  3AFF               	xorlw	255
  5825  00FB  00F2               	movwf	??_GPIO_PinWrite+1
  5826  00FC  0872               	movf	??_GPIO_PinWrite+1,w
  5827  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  5828  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  5829  00FF  0585               	andwf	5,f	;volatile
  5830                           
  5831                           ;gpio.c: 143: break;
  5832  0100  0008               	return
  5833  0101                     l1760:	
  5834                           ;gpio.c: 147: case 1:
  5835                           
  5836                           
  5837                           ;gpio.c: 148: ((var_pinValue_u8)? ((PORTB) |= (1<<(enm_pinNumber))): ((PORTB) &= ~(1<<(e
      +                          nm_pinNumber))));
  5838  0101  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  5839  0102  1903               	btfsc	3,2
  5840  0103  2914               	goto	l1764
  5841  0104  3001               	movlw	1
  5842  0105  00F1               	movwf	??_GPIO_PinWrite
  5843  0106  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5844  0107  290A               	goto	u1834
  5845  0108                     u1835:	
  5846  0108  1003               	clrc
  5847  0109  0DF1               	rlf	??_GPIO_PinWrite,f
  5848  010A                     u1834:	
  5849  010A  3EFF               	addlw	-1
  5850  010B  1D03               	skipz
  5851  010C  2908               	goto	u1835
  5852  010D  0871               	movf	??_GPIO_PinWrite,w
  5853  010E  00F2               	movwf	??_GPIO_PinWrite+1
  5854  010F  0872               	movf	??_GPIO_PinWrite+1,w
  5855  0110  1283               	bcf	3,5	;RP0=0, select bank0
  5856  0111  1303               	bcf	3,6	;RP1=0, select bank0
  5857  0112  0486               	iorwf	6,f	;volatile
  5858  0113  0008               	return
  5859  0114                     l1764:	
  5860  0114  3001               	movlw	1
  5861  0115  00F1               	movwf	??_GPIO_PinWrite
  5862  0116  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5863  0117  291A               	goto	u1844
  5864  0118                     u1845:	
  5865  0118  1003               	clrc
  5866  0119  0DF1               	rlf	??_GPIO_PinWrite,f
  5867  011A                     u1844:	
  5868  011A  3EFF               	addlw	-1
  5869  011B  1D03               	skipz
  5870  011C  2918               	goto	u1845
  5871  011D  0871               	movf	??_GPIO_PinWrite,w
  5872  011E  3AFF               	xorlw	255
  5873  011F  00F2               	movwf	??_GPIO_PinWrite+1
  5874  0120  0872               	movf	??_GPIO_PinWrite+1,w
  5875  0121  1283               	bcf	3,5	;RP0=0, select bank0
  5876  0122  1303               	bcf	3,6	;RP1=0, select bank0
  5877  0123  0586               	andwf	6,f	;volatile
  5878                           
  5879                           ;gpio.c: 149: break;
  5880  0124  0008               	return
  5881  0125                     l1766:	
  5882                           ;gpio.c: 153: case 2:
  5883                           
  5884                           
  5885                           ;gpio.c: 154: ((var_pinValue_u8)? ((PORTC) |= (1<<(enm_pinNumber))): ((PORTC) &= ~(1<<(e
      +                          nm_pinNumber))));
  5886  0125  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  5887  0126  1903               	btfsc	3,2
  5888  0127  2938               	goto	l1770
  5889  0128  3001               	movlw	1
  5890  0129  00F1               	movwf	??_GPIO_PinWrite
  5891  012A  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5892  012B  292E               	goto	u1864
  5893  012C                     u1865:	
  5894  012C  1003               	clrc
  5895  012D  0DF1               	rlf	??_GPIO_PinWrite,f
  5896  012E                     u1864:	
  5897  012E  3EFF               	addlw	-1
  5898  012F  1D03               	skipz
  5899  0130  292C               	goto	u1865
  5900  0131  0871               	movf	??_GPIO_PinWrite,w
  5901  0132  00F2               	movwf	??_GPIO_PinWrite+1
  5902  0133  0872               	movf	??_GPIO_PinWrite+1,w
  5903  0134  1283               	bcf	3,5	;RP0=0, select bank0
  5904  0135  1303               	bcf	3,6	;RP1=0, select bank0
  5905  0136  0487               	iorwf	7,f	;volatile
  5906  0137  0008               	return
  5907  0138                     l1770:	
  5908  0138  3001               	movlw	1
  5909  0139  00F1               	movwf	??_GPIO_PinWrite
  5910  013A  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5911  013B  293E               	goto	u1874
  5912  013C                     u1875:	
  5913  013C  1003               	clrc
  5914  013D  0DF1               	rlf	??_GPIO_PinWrite,f
  5915  013E                     u1874:	
  5916  013E  3EFF               	addlw	-1
  5917  013F  1D03               	skipz
  5918  0140  293C               	goto	u1875
  5919  0141  0871               	movf	??_GPIO_PinWrite,w
  5920  0142  3AFF               	xorlw	255
  5921  0143  00F2               	movwf	??_GPIO_PinWrite+1
  5922  0144  0872               	movf	??_GPIO_PinWrite+1,w
  5923  0145  1283               	bcf	3,5	;RP0=0, select bank0
  5924  0146  1303               	bcf	3,6	;RP1=0, select bank0
  5925  0147  0587               	andwf	7,f	;volatile
  5926                           
  5927                           ;gpio.c: 155: break;
  5928  0148  0008               	return
  5929  0149                     l1772:	
  5930                           ;gpio.c: 159: case 3:
  5931                           
  5932                           
  5933                           ;gpio.c: 160: ((var_pinValue_u8)? ((PORTD) |= (1<<(enm_pinNumber))): ((PORTD) &= ~(1<<(e
      +                          nm_pinNumber))));
  5934  0149  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  5935  014A  1903               	btfsc	3,2
  5936  014B  295C               	goto	l1776
  5937  014C  3001               	movlw	1
  5938  014D  00F1               	movwf	??_GPIO_PinWrite
  5939  014E  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5940  014F  2952               	goto	u1894
  5941  0150                     u1895:	
  5942  0150  1003               	clrc
  5943  0151  0DF1               	rlf	??_GPIO_PinWrite,f
  5944  0152                     u1894:	
  5945  0152  3EFF               	addlw	-1
  5946  0153  1D03               	skipz
  5947  0154  2950               	goto	u1895
  5948  0155  0871               	movf	??_GPIO_PinWrite,w
  5949  0156  00F2               	movwf	??_GPIO_PinWrite+1
  5950  0157  0872               	movf	??_GPIO_PinWrite+1,w
  5951  0158  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0159  1303               	bcf	3,6	;RP1=0, select bank0
  5953  015A  0488               	iorwf	8,f	;volatile
  5954  015B  0008               	return
  5955  015C                     l1776:	
  5956  015C  3001               	movlw	1
  5957  015D  00F1               	movwf	??_GPIO_PinWrite
  5958  015E  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5959  015F  2962               	goto	u1904
  5960  0160                     u1905:	
  5961  0160  1003               	clrc
  5962  0161  0DF1               	rlf	??_GPIO_PinWrite,f
  5963  0162                     u1904:	
  5964  0162  3EFF               	addlw	-1
  5965  0163  1D03               	skipz
  5966  0164  2960               	goto	u1905
  5967  0165  0871               	movf	??_GPIO_PinWrite,w
  5968  0166  3AFF               	xorlw	255
  5969  0167  00F2               	movwf	??_GPIO_PinWrite+1
  5970  0168  0872               	movf	??_GPIO_PinWrite+1,w
  5971  0169  1283               	bcf	3,5	;RP0=0, select bank0
  5972  016A  1303               	bcf	3,6	;RP1=0, select bank0
  5973  016B  0588               	andwf	8,f	;volatile
  5974                           
  5975                           ;gpio.c: 161: break;
  5976  016C  0008               	return
  5977  016D                     l1778:	
  5978                           ;gpio.c: 165: case 4:
  5979                           
  5980                           
  5981                           ;gpio.c: 166: ((var_pinValue_u8)? ((PORTE) |= (1<<(enm_pinNumber))): ((PORTE) &= ~(1<<(e
      +                          nm_pinNumber))));
  5982  016D  0870               	movf	GPIO_PinWrite@var_pinValue_u8,w
  5983  016E  1903               	btfsc	3,2
  5984  016F  2980               	goto	l1782
  5985  0170  3001               	movlw	1
  5986  0171  00F1               	movwf	??_GPIO_PinWrite
  5987  0172  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  5988  0173  2976               	goto	u1924
  5989  0174                     u1925:	
  5990  0174  1003               	clrc
  5991  0175  0DF1               	rlf	??_GPIO_PinWrite,f
  5992  0176                     u1924:	
  5993  0176  3EFF               	addlw	-1
  5994  0177  1D03               	skipz
  5995  0178  2974               	goto	u1925
  5996  0179  0871               	movf	??_GPIO_PinWrite,w
  5997  017A  00F2               	movwf	??_GPIO_PinWrite+1
  5998  017B  0872               	movf	??_GPIO_PinWrite+1,w
  5999  017C  1283               	bcf	3,5	;RP0=0, select bank0
  6000  017D  1303               	bcf	3,6	;RP1=0, select bank0
  6001  017E  0489               	iorwf	9,f	;volatile
  6002  017F  0008               	return
  6003  0180                     l1782:	
  6004  0180  3001               	movlw	1
  6005  0181  00F1               	movwf	??_GPIO_PinWrite
  6006  0182  0A74               	incf	GPIO_PinWrite@enm_pinNumber,w
  6007  0183  2986               	goto	u1934
  6008  0184                     u1935:	
  6009  0184  1003               	clrc
  6010  0185  0DF1               	rlf	??_GPIO_PinWrite,f
  6011  0186                     u1934:	
  6012  0186  3EFF               	addlw	-1
  6013  0187  1D03               	skipz
  6014  0188  2984               	goto	u1935
  6015  0189  0871               	movf	??_GPIO_PinWrite,w
  6016  018A  3AFF               	xorlw	255
  6017  018B  00F2               	movwf	??_GPIO_PinWrite+1
  6018  018C  0872               	movf	??_GPIO_PinWrite+1,w
  6019  018D  1283               	bcf	3,5	;RP0=0, select bank0
  6020  018E  1303               	bcf	3,6	;RP1=0, select bank0
  6021  018F  0589               	andwf	9,f	;volatile
  6022                           
  6023                           ;gpio.c: 169: }
  6024                           
  6025                           ;gpio.c: 167: break;
  6026  0190  0008               	return
  6027  0191                     l1786:	
  6028  0191  0873               	movf	GPIO_PinWrite@var_portNumber_u8,w
  6029                           
  6030                           ; Switch size 1, requested type "space"
  6031                           ; Number of cases is 5, Range of values is 0 to 4
  6032                           ; switch strategies available:
  6033                           ; Name         Instructions Cycles
  6034                           ; simple_byte           16     9 (average)
  6035                           ; direct_byte           23     8 (fixed)
  6036                           ; jumptable            260     6 (fixed)
  6037                           ;	Chosen strategy is simple_byte
  6038  0192  3A00               	xorlw	0	; case 0
  6039  0193  1903               	skipnz
  6040  0194  28DD               	goto	l1754
  6041  0195  3A01               	xorlw	1	; case 1
  6042  0196  1903               	skipnz
  6043  0197  2901               	goto	l1760
  6044  0198  3A03               	xorlw	3	; case 2
  6045  0199  1903               	skipnz
  6046  019A  2925               	goto	l1766
  6047  019B  3A01               	xorlw	1	; case 3
  6048  019C  1903               	skipnz
  6049  019D  2949               	goto	l1772
  6050  019E  3A07               	xorlw	7	; case 4
  6051  019F  1903               	skipnz
  6052  01A0  296D               	goto	l1778
  6053  01A1  29A2               	goto	l402
  6054  01A2                     l402:	
  6055  01A2  0008               	return
  6056  01A3                     __end_of_GPIO_PinWrite:	
  6057                           
  6058                           	psect	text29
  6059  0CDB                     __ptext29:	
  6060 ;; *************** function _GPIO_PinRead *****************
  6061 ;; Defined at:
  6062 ;;		line 192 in file "../00-libfiles/gpio.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  enm_pinNumbe    1    wreg     enum E1088
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  6067 ;;  returnStatus    1    3[COMMON] unsigned char 
  6068 ;;  var_portNumb    1    2[COMMON] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      unsigned char 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6078 ;;      Params:         0       0       0       0       0
  6079 ;;      Locals:         3       0       0       0       0
  6080 ;;      Temps:          2       0       0       0       0
  6081 ;;      Totals:         5       0       0       0       0
  6082 ;;Total ram usage:        5 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_lcd_BusyCheck
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function _GPIO_PinRead
  6093  0CDB                     _GPIO_PinRead:	
  6094                           
  6095                           ;incstack = 0
  6096                           ; Regs used in _GPIO_PinRead: [wreg-fsr0h+status,2+status,0]
  6097                           ;GPIO_PinRead@enm_pinNumber stored from wreg
  6098  0CDB  00F4               	movwf	GPIO_PinRead@enm_pinNumber
  6099                           
  6100                           ;gpio.c: 194: uint8_t var_portNumber_u8;
  6101                           ;gpio.c: 195: uint8_t returnStatus = 0;
  6102  0CDC  01F3               	clrf	GPIO_PinRead@returnStatus
  6103                           
  6104                           ;gpio.c: 197: var_portNumber_u8 = (enm_pinNumber>>3);
  6105  0CDD  0874               	movf	GPIO_PinRead@enm_pinNumber,w
  6106  0CDE  00F0               	movwf	??_GPIO_PinRead
  6107  0CDF  3003               	movlw	3
  6108  0CE0                     u1945:	
  6109  0CE0  1003               	clrc
  6110  0CE1  0CF0               	rrf	??_GPIO_PinRead,f
  6111  0CE2  3EFF               	addlw	-1
  6112  0CE3  1D03               	skipz
  6113  0CE4  2CE0               	goto	u1945
  6114  0CE5  0870               	movf	??_GPIO_PinRead,w
  6115  0CE6  00F1               	movwf	??_GPIO_PinRead+1
  6116  0CE7  0871               	movf	??_GPIO_PinRead+1,w
  6117  0CE8  00F2               	movwf	GPIO_PinRead@var_portNumber_u8
  6118                           
  6119                           ;gpio.c: 198: enm_pinNumber = enm_pinNumber & 0x07;
  6120  0CE9  0874               	movf	GPIO_PinRead@enm_pinNumber,w
  6121  0CEA  3907               	andlw	7
  6122  0CEB  00F0               	movwf	??_GPIO_PinRead
  6123  0CEC  0870               	movf	??_GPIO_PinRead,w
  6124  0CED  00F4               	movwf	GPIO_PinRead@enm_pinNumber
  6125                           
  6126                           ;gpio.c: 201: switch(var_portNumber_u8)
  6127  0CEE  2D3D               	goto	l1806
  6128  0CEF                     l1794:	
  6129                           ;gpio.c: 202: {
  6130                           ;gpio.c: 204: case 0:
  6131                           
  6132                           
  6133                           ;gpio.c: 205: returnStatus = (((PORTA)&((1<<(enm_pinNumber))))!=0u);
  6134  0CEF  3001               	movlw	1
  6135  0CF0  00F0               	movwf	??_GPIO_PinRead
  6136  0CF1  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  6137  0CF2  2CF5               	goto	u1954
  6138  0CF3                     u1955:	
  6139  0CF3  1003               	clrc
  6140  0CF4  0DF0               	rlf	??_GPIO_PinRead,f
  6141  0CF5                     u1954:	
  6142  0CF5  3EFF               	addlw	-1
  6143  0CF6  1D03               	skipz
  6144  0CF7  2CF3               	goto	u1955
  6145  0CF8  0870               	movf	??_GPIO_PinRead,w
  6146  0CF9  1283               	bcf	3,5	;RP0=0, select bank0
  6147  0CFA  1303               	bcf	3,6	;RP1=0, select bank0
  6148  0CFB  0505               	andwf	5,w	;volatile
  6149  0CFC  2D34               	goto	L10
  6150  0CFD                     l1796:	
  6151                           ;gpio.c: 209: case 1:
  6152                           
  6153                           ;gpio.c: 206: break;
  6154                           
  6155                           
  6156                           ;gpio.c: 210: returnStatus = (((PORTB)&((1<<(enm_pinNumber))))!=0u);
  6157  0CFD  3001               	movlw	1
  6158  0CFE  00F0               	movwf	??_GPIO_PinRead
  6159  0CFF  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  6160  0D00  2D03               	goto	u1984
  6161  0D01                     u1985:	
  6162  0D01  1003               	clrc
  6163  0D02  0DF0               	rlf	??_GPIO_PinRead,f
  6164  0D03                     u1984:	
  6165  0D03  3EFF               	addlw	-1
  6166  0D04  1D03               	skipz
  6167  0D05  2D01               	goto	u1985
  6168  0D06  0870               	movf	??_GPIO_PinRead,w
  6169  0D07  1283               	bcf	3,5	;RP0=0, select bank0
  6170  0D08  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0D09  0506               	andwf	6,w	;volatile
  6172  0D0A  2D34               	goto	L10
  6173  0D0B                     l1798:	
  6174                           ;gpio.c: 214: case 2:
  6175                           
  6176                           ;gpio.c: 211: break;
  6177                           
  6178                           
  6179                           ;gpio.c: 215: returnStatus = (((PORTC)&((1<<(enm_pinNumber))))!=0u);
  6180  0D0B  3001               	movlw	1
  6181  0D0C  00F0               	movwf	??_GPIO_PinRead
  6182  0D0D  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  6183  0D0E  2D11               	goto	u2014
  6184  0D0F                     u2015:	
  6185  0D0F  1003               	clrc
  6186  0D10  0DF0               	rlf	??_GPIO_PinRead,f
  6187  0D11                     u2014:	
  6188  0D11  3EFF               	addlw	-1
  6189  0D12  1D03               	skipz
  6190  0D13  2D0F               	goto	u2015
  6191  0D14  0870               	movf	??_GPIO_PinRead,w
  6192  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  6193  0D16  1303               	bcf	3,6	;RP1=0, select bank0
  6194  0D17  0507               	andwf	7,w	;volatile
  6195  0D18  2D34               	goto	L10
  6196  0D19                     l1800:	
  6197                           ;gpio.c: 220: case 3:
  6198                           
  6199                           ;gpio.c: 216: break;
  6200                           
  6201                           
  6202                           ;gpio.c: 221: returnStatus = (((PORTD)&((1<<(enm_pinNumber))))!=0u);
  6203  0D19  3001               	movlw	1
  6204  0D1A  00F0               	movwf	??_GPIO_PinRead
  6205  0D1B  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  6206  0D1C  2D1F               	goto	u2044
  6207  0D1D                     u2045:	
  6208  0D1D  1003               	clrc
  6209  0D1E  0DF0               	rlf	??_GPIO_PinRead,f
  6210  0D1F                     u2044:	
  6211  0D1F  3EFF               	addlw	-1
  6212  0D20  1D03               	skipz
  6213  0D21  2D1D               	goto	u2045
  6214  0D22  0870               	movf	??_GPIO_PinRead,w
  6215  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  6216  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  6217  0D25  0508               	andwf	8,w	;volatile
  6218  0D26  2D34               	goto	L10
  6219  0D27                     l1802:	
  6220                           ;gpio.c: 226: case 4:
  6221                           
  6222                           ;gpio.c: 222: break;
  6223                           
  6224                           
  6225                           ;gpio.c: 227: returnStatus = (((PORTE)&((1<<(enm_pinNumber))))!=0u);
  6226  0D27  3001               	movlw	1
  6227  0D28  00F0               	movwf	??_GPIO_PinRead
  6228  0D29  0A74               	incf	GPIO_PinRead@enm_pinNumber,w
  6229  0D2A  2D2D               	goto	u2074
  6230  0D2B                     u2075:	
  6231  0D2B  1003               	clrc
  6232  0D2C  0DF0               	rlf	??_GPIO_PinRead,f
  6233  0D2D                     u2074:	
  6234  0D2D  3EFF               	addlw	-1
  6235  0D2E  1D03               	skipz
  6236  0D2F  2D2B               	goto	u2075
  6237  0D30  0870               	movf	??_GPIO_PinRead,w
  6238  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  6239  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  6240  0D33  0509               	andwf	9,w	;volatile
  6241  0D34                     L10:	
  6242  0D34  1903               	btfsc	3,2
  6243  0D35  2D38               	goto	u2080
  6244  0D36  3001               	movlw	1
  6245  0D37  2D39               	goto	u2090
  6246  0D38                     u2080:	
  6247  0D38  3000               	movlw	0
  6248  0D39                     u2090:	
  6249  0D39  00F1               	movwf	??_GPIO_PinRead+1
  6250  0D3A  0871               	movf	??_GPIO_PinRead+1,w
  6251  0D3B  00F3               	movwf	GPIO_PinRead@returnStatus
  6252                           
  6253                           ;gpio.c: 229: }
  6254                           
  6255                           ;gpio.c: 228: break;
  6256  0D3C  2D4E               	goto	l1808
  6257  0D3D                     l1806:	
  6258  0D3D  0872               	movf	GPIO_PinRead@var_portNumber_u8,w
  6259                           
  6260                           ; Switch size 1, requested type "space"
  6261                           ; Number of cases is 5, Range of values is 0 to 4
  6262                           ; switch strategies available:
  6263                           ; Name         Instructions Cycles
  6264                           ; simple_byte           16     9 (average)
  6265                           ; direct_byte           23     8 (fixed)
  6266                           ; jumptable            260     6 (fixed)
  6267                           ;	Chosen strategy is simple_byte
  6268  0D3E  3A00               	xorlw	0	; case 0
  6269  0D3F  1903               	skipnz
  6270  0D40  2CEF               	goto	l1794
  6271  0D41  3A01               	xorlw	1	; case 1
  6272  0D42  1903               	skipnz
  6273  0D43  2CFD               	goto	l1796
  6274  0D44  3A03               	xorlw	3	; case 2
  6275  0D45  1903               	skipnz
  6276  0D46  2D0B               	goto	l1798
  6277  0D47  3A01               	xorlw	1	; case 3
  6278  0D48  1903               	skipnz
  6279  0D49  2D19               	goto	l1800
  6280  0D4A  3A07               	xorlw	7	; case 4
  6281  0D4B  1903               	skipnz
  6282  0D4C  2D27               	goto	l1802
  6283  0D4D  2D4E               	goto	l1808
  6284  0D4E                     l1808:	
  6285                           
  6286                           ;gpio.c: 230: return returnStatus;
  6287  0D4E  0873               	movf	GPIO_PinRead@returnStatus,w
  6288  0D4F  0008               	return
  6289  0D50                     __end_of_GPIO_PinRead:	
  6290                           
  6291                           	psect	text30
  6292  0F27                     __ptext30:	
  6293 ;; *************** function _GPIO_PinDirection *****************
  6294 ;; Defined at:
  6295 ;;		line 60 in file "../00-libfiles/gpio.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  enm_pinNumbe    1    wreg     enum E1088
  6298 ;;  var_pinDirn_    1    0[COMMON] unsigned char 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  enm_pinNumbe    1    4[COMMON] enum E1088
  6301 ;;  var_portNumb    1    3[COMMON] unsigned char 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6311 ;;      Params:         1       0       0       0       0
  6312 ;;      Locals:         2       0       0       0       0
  6313 ;;      Temps:          2       0       0       0       0
  6314 ;;      Totals:         5       0       0       0       0
  6315 ;;Total ram usage:        5 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_LCD_SetUp
  6321 ;;		_lcd_BusyCheck
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _GPIO_PinDirection
  6327  0F27                     _GPIO_PinDirection:	
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in _GPIO_PinDirection: [wreg-fsr0h+status,2+status,0]
  6331                           ;GPIO_PinDirection@enm_pinNumber stored from wreg
  6332  0F27  00F4               	movwf	GPIO_PinDirection@enm_pinNumber
  6333                           
  6334                           ;gpio.c: 63: uint8_t var_portNumber_u8;
  6335                           ;gpio.c: 66: var_portNumber_u8 = (enm_pinNumber>>3);
  6336  0F28  0874               	movf	GPIO_PinDirection@enm_pinNumber,w
  6337  0F29  00F1               	movwf	??_GPIO_PinDirection
  6338  0F2A  3003               	movlw	3
  6339  0F2B                     u1615:	
  6340  0F2B  1003               	clrc
  6341  0F2C  0CF1               	rrf	??_GPIO_PinDirection,f
  6342  0F2D  3EFF               	addlw	-1
  6343  0F2E  1D03               	skipz
  6344  0F2F  2F2B               	goto	u1615
  6345  0F30  0871               	movf	??_GPIO_PinDirection,w
  6346  0F31  00F2               	movwf	??_GPIO_PinDirection+1
  6347  0F32  0872               	movf	??_GPIO_PinDirection+1,w
  6348  0F33  00F3               	movwf	GPIO_PinDirection@var_portNumber_u8
  6349                           
  6350                           ;gpio.c: 67: enm_pinNumber = enm_pinNumber & 0x07;
  6351  0F34  0874               	movf	GPIO_PinDirection@enm_pinNumber,w
  6352  0F35  3907               	andlw	7
  6353  0F36  00F1               	movwf	??_GPIO_PinDirection
  6354  0F37  0871               	movf	??_GPIO_PinDirection,w
  6355  0F38  00F4               	movwf	GPIO_PinDirection@enm_pinNumber
  6356                           
  6357                           ;gpio.c: 71: switch(var_portNumber_u8)
  6358  0F39  2FEE               	goto	l1740
  6359  0F3A                     l1708:	
  6360                           ;gpio.c: 72: {
  6361                           ;gpio.c: 74: case 0:
  6362                           
  6363                           
  6364                           ;gpio.c: 75: ((var_pinDirn_u8)? ((TRISA) |= (1<<(enm_pinNumber))): ((TRISA) &= ~(1<<(enm
      +                          _pinNumber))));
  6365  0F3A  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  6366  0F3B  1903               	btfsc	3,2
  6367  0F3C  2F4D               	goto	l1712
  6368  0F3D  3001               	movlw	1
  6369  0F3E  00F1               	movwf	??_GPIO_PinDirection
  6370  0F3F  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6371  0F40  2F43               	goto	u1634
  6372  0F41                     u1635:	
  6373  0F41  1003               	clrc
  6374  0F42  0DF1               	rlf	??_GPIO_PinDirection,f
  6375  0F43                     u1634:	
  6376  0F43  3EFF               	addlw	-1
  6377  0F44  1D03               	skipz
  6378  0F45  2F41               	goto	u1635
  6379  0F46  0871               	movf	??_GPIO_PinDirection,w
  6380  0F47  00F2               	movwf	??_GPIO_PinDirection+1
  6381  0F48  0872               	movf	??_GPIO_PinDirection+1,w
  6382  0F49  1683               	bsf	3,5	;RP0=1, select bank1
  6383  0F4A  1303               	bcf	3,6	;RP1=0, select bank1
  6384  0F4B  0485               	iorwf	5,f	;volatile
  6385  0F4C  0008               	return
  6386  0F4D                     l1712:	
  6387  0F4D  3001               	movlw	1
  6388  0F4E  00F1               	movwf	??_GPIO_PinDirection
  6389  0F4F  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6390  0F50  2F53               	goto	u1644
  6391  0F51                     u1645:	
  6392  0F51  1003               	clrc
  6393  0F52  0DF1               	rlf	??_GPIO_PinDirection,f
  6394  0F53                     u1644:	
  6395  0F53  3EFF               	addlw	-1
  6396  0F54  1D03               	skipz
  6397  0F55  2F51               	goto	u1645
  6398  0F56  0871               	movf	??_GPIO_PinDirection,w
  6399  0F57  3AFF               	xorlw	255
  6400  0F58  00F2               	movwf	??_GPIO_PinDirection+1
  6401  0F59  0872               	movf	??_GPIO_PinDirection+1,w
  6402  0F5A  1683               	bsf	3,5	;RP0=1, select bank1
  6403  0F5B  1303               	bcf	3,6	;RP1=0, select bank1
  6404  0F5C  0585               	andwf	5,f	;volatile
  6405                           
  6406                           ;gpio.c: 76: break;
  6407  0F5D  0008               	return
  6408  0F5E                     l1714:	
  6409                           ;gpio.c: 80: case 1:
  6410                           
  6411                           
  6412                           ;gpio.c: 81: ((var_pinDirn_u8)? ((TRISB) |= (1<<(enm_pinNumber))): ((TRISB) &= ~(1<<(enm
      +                          _pinNumber))));
  6413  0F5E  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  6414  0F5F  1903               	btfsc	3,2
  6415  0F60  2F71               	goto	l1718
  6416  0F61  3001               	movlw	1
  6417  0F62  00F1               	movwf	??_GPIO_PinDirection
  6418  0F63  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6419  0F64  2F67               	goto	u1664
  6420  0F65                     u1665:	
  6421  0F65  1003               	clrc
  6422  0F66  0DF1               	rlf	??_GPIO_PinDirection,f
  6423  0F67                     u1664:	
  6424  0F67  3EFF               	addlw	-1
  6425  0F68  1D03               	skipz
  6426  0F69  2F65               	goto	u1665
  6427  0F6A  0871               	movf	??_GPIO_PinDirection,w
  6428  0F6B  00F2               	movwf	??_GPIO_PinDirection+1
  6429  0F6C  0872               	movf	??_GPIO_PinDirection+1,w
  6430  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  6431  0F6E  1303               	bcf	3,6	;RP1=0, select bank1
  6432  0F6F  0486               	iorwf	6,f	;volatile
  6433  0F70  0008               	return
  6434  0F71                     l1718:	
  6435  0F71  3001               	movlw	1
  6436  0F72  00F1               	movwf	??_GPIO_PinDirection
  6437  0F73  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6438  0F74  2F77               	goto	u1674
  6439  0F75                     u1675:	
  6440  0F75  1003               	clrc
  6441  0F76  0DF1               	rlf	??_GPIO_PinDirection,f
  6442  0F77                     u1674:	
  6443  0F77  3EFF               	addlw	-1
  6444  0F78  1D03               	skipz
  6445  0F79  2F75               	goto	u1675
  6446  0F7A  0871               	movf	??_GPIO_PinDirection,w
  6447  0F7B  3AFF               	xorlw	255
  6448  0F7C  00F2               	movwf	??_GPIO_PinDirection+1
  6449  0F7D  0872               	movf	??_GPIO_PinDirection+1,w
  6450  0F7E  1683               	bsf	3,5	;RP0=1, select bank1
  6451  0F7F  1303               	bcf	3,6	;RP1=0, select bank1
  6452  0F80  0586               	andwf	6,f	;volatile
  6453                           
  6454                           ;gpio.c: 82: break;
  6455  0F81  0008               	return
  6456  0F82                     l1720:	
  6457                           ;gpio.c: 86: case 2:
  6458                           
  6459                           
  6460                           ;gpio.c: 87: ((var_pinDirn_u8)? ((TRISC) |= (1<<(enm_pinNumber))): ((TRISC) &= ~(1<<(enm
      +                          _pinNumber))));
  6461  0F82  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  6462  0F83  1903               	btfsc	3,2
  6463  0F84  2F95               	goto	l1724
  6464  0F85  3001               	movlw	1
  6465  0F86  00F1               	movwf	??_GPIO_PinDirection
  6466  0F87  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6467  0F88  2F8B               	goto	u1694
  6468  0F89                     u1695:	
  6469  0F89  1003               	clrc
  6470  0F8A  0DF1               	rlf	??_GPIO_PinDirection,f
  6471  0F8B                     u1694:	
  6472  0F8B  3EFF               	addlw	-1
  6473  0F8C  1D03               	skipz
  6474  0F8D  2F89               	goto	u1695
  6475  0F8E  0871               	movf	??_GPIO_PinDirection,w
  6476  0F8F  00F2               	movwf	??_GPIO_PinDirection+1
  6477  0F90  0872               	movf	??_GPIO_PinDirection+1,w
  6478  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  6479  0F92  1303               	bcf	3,6	;RP1=0, select bank1
  6480  0F93  0487               	iorwf	7,f	;volatile
  6481  0F94  0008               	return
  6482  0F95                     l1724:	
  6483  0F95  3001               	movlw	1
  6484  0F96  00F1               	movwf	??_GPIO_PinDirection
  6485  0F97  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6486  0F98  2F9B               	goto	u1704
  6487  0F99                     u1705:	
  6488  0F99  1003               	clrc
  6489  0F9A  0DF1               	rlf	??_GPIO_PinDirection,f
  6490  0F9B                     u1704:	
  6491  0F9B  3EFF               	addlw	-1
  6492  0F9C  1D03               	skipz
  6493  0F9D  2F99               	goto	u1705
  6494  0F9E  0871               	movf	??_GPIO_PinDirection,w
  6495  0F9F  3AFF               	xorlw	255
  6496  0FA0  00F2               	movwf	??_GPIO_PinDirection+1
  6497  0FA1  0872               	movf	??_GPIO_PinDirection+1,w
  6498  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  6499  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  6500  0FA4  0587               	andwf	7,f	;volatile
  6501                           
  6502                           ;gpio.c: 88: break;
  6503  0FA5  0008               	return
  6504  0FA6                     l1726:	
  6505                           ;gpio.c: 92: case 3:
  6506                           
  6507                           
  6508                           ;gpio.c: 93: ((var_pinDirn_u8)? ((TRISD) |= (1<<(enm_pinNumber))): ((TRISD) &= ~(1<<(enm
      +                          _pinNumber))));
  6509  0FA6  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  6510  0FA7  1903               	btfsc	3,2
  6511  0FA8  2FB9               	goto	l1730
  6512  0FA9  3001               	movlw	1
  6513  0FAA  00F1               	movwf	??_GPIO_PinDirection
  6514  0FAB  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6515  0FAC  2FAF               	goto	u1724
  6516  0FAD                     u1725:	
  6517  0FAD  1003               	clrc
  6518  0FAE  0DF1               	rlf	??_GPIO_PinDirection,f
  6519  0FAF                     u1724:	
  6520  0FAF  3EFF               	addlw	-1
  6521  0FB0  1D03               	skipz
  6522  0FB1  2FAD               	goto	u1725
  6523  0FB2  0871               	movf	??_GPIO_PinDirection,w
  6524  0FB3  00F2               	movwf	??_GPIO_PinDirection+1
  6525  0FB4  0872               	movf	??_GPIO_PinDirection+1,w
  6526  0FB5  1683               	bsf	3,5	;RP0=1, select bank1
  6527  0FB6  1303               	bcf	3,6	;RP1=0, select bank1
  6528  0FB7  0488               	iorwf	8,f	;volatile
  6529  0FB8  0008               	return
  6530  0FB9                     l1730:	
  6531  0FB9  3001               	movlw	1
  6532  0FBA  00F1               	movwf	??_GPIO_PinDirection
  6533  0FBB  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6534  0FBC  2FBF               	goto	u1734
  6535  0FBD                     u1735:	
  6536  0FBD  1003               	clrc
  6537  0FBE  0DF1               	rlf	??_GPIO_PinDirection,f
  6538  0FBF                     u1734:	
  6539  0FBF  3EFF               	addlw	-1
  6540  0FC0  1D03               	skipz
  6541  0FC1  2FBD               	goto	u1735
  6542  0FC2  0871               	movf	??_GPIO_PinDirection,w
  6543  0FC3  3AFF               	xorlw	255
  6544  0FC4  00F2               	movwf	??_GPIO_PinDirection+1
  6545  0FC5  0872               	movf	??_GPIO_PinDirection+1,w
  6546  0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  6547  0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  6548  0FC8  0588               	andwf	8,f	;volatile
  6549                           
  6550                           ;gpio.c: 94: break;
  6551  0FC9  0008               	return
  6552  0FCA                     l1732:	
  6553                           ;gpio.c: 97: case 4:
  6554                           
  6555                           
  6556                           ;gpio.c: 98: ((var_pinDirn_u8)? ((TRISE) |= (1<<(enm_pinNumber))): ((TRISE) &= ~(1<<(enm
      +                          _pinNumber))));
  6557  0FCA  0870               	movf	GPIO_PinDirection@var_pinDirn_u8,w
  6558  0FCB  1903               	btfsc	3,2
  6559  0FCC  2FDD               	goto	l1736
  6560  0FCD  3001               	movlw	1
  6561  0FCE  00F1               	movwf	??_GPIO_PinDirection
  6562  0FCF  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6563  0FD0  2FD3               	goto	u1754
  6564  0FD1                     u1755:	
  6565  0FD1  1003               	clrc
  6566  0FD2  0DF1               	rlf	??_GPIO_PinDirection,f
  6567  0FD3                     u1754:	
  6568  0FD3  3EFF               	addlw	-1
  6569  0FD4  1D03               	skipz
  6570  0FD5  2FD1               	goto	u1755
  6571  0FD6  0871               	movf	??_GPIO_PinDirection,w
  6572  0FD7  00F2               	movwf	??_GPIO_PinDirection+1
  6573  0FD8  0872               	movf	??_GPIO_PinDirection+1,w
  6574  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  6575  0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  6576  0FDB  0489               	iorwf	9,f	;volatile
  6577  0FDC  0008               	return
  6578  0FDD                     l1736:	
  6579  0FDD  3001               	movlw	1
  6580  0FDE  00F1               	movwf	??_GPIO_PinDirection
  6581  0FDF  0A74               	incf	GPIO_PinDirection@enm_pinNumber,w
  6582  0FE0  2FE3               	goto	u1764
  6583  0FE1                     u1765:	
  6584  0FE1  1003               	clrc
  6585  0FE2  0DF1               	rlf	??_GPIO_PinDirection,f
  6586  0FE3                     u1764:	
  6587  0FE3  3EFF               	addlw	-1
  6588  0FE4  1D03               	skipz
  6589  0FE5  2FE1               	goto	u1765
  6590  0FE6  0871               	movf	??_GPIO_PinDirection,w
  6591  0FE7  3AFF               	xorlw	255
  6592  0FE8  00F2               	movwf	??_GPIO_PinDirection+1
  6593  0FE9  0872               	movf	??_GPIO_PinDirection+1,w
  6594  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  6595  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  6596  0FEC  0589               	andwf	9,f	;volatile
  6597                           
  6598                           ;gpio.c: 101: }
  6599                           
  6600                           ;gpio.c: 99: break;
  6601  0FED  0008               	return
  6602  0FEE                     l1740:	
  6603  0FEE  0873               	movf	GPIO_PinDirection@var_portNumber_u8,w
  6604                           
  6605                           ; Switch size 1, requested type "space"
  6606                           ; Number of cases is 5, Range of values is 0 to 4
  6607                           ; switch strategies available:
  6608                           ; Name         Instructions Cycles
  6609                           ; simple_byte           16     9 (average)
  6610                           ; direct_byte           23     8 (fixed)
  6611                           ; jumptable            260     6 (fixed)
  6612                           ;	Chosen strategy is simple_byte
  6613  0FEF  3A00               	xorlw	0	; case 0
  6614  0FF0  1903               	skipnz
  6615  0FF1  2F3A               	goto	l1708
  6616  0FF2  3A01               	xorlw	1	; case 1
  6617  0FF3  1903               	skipnz
  6618  0FF4  2F5E               	goto	l1714
  6619  0FF5  3A03               	xorlw	3	; case 2
  6620  0FF6  1903               	skipnz
  6621  0FF7  2F82               	goto	l1720
  6622  0FF8  3A01               	xorlw	1	; case 3
  6623  0FF9  1903               	skipnz
  6624  0FFA  2FA6               	goto	l1726
  6625  0FFB  3A07               	xorlw	7	; case 4
  6626  0FFC  1903               	skipnz
  6627  0FFD  2FCA               	goto	l1732
  6628  0FFE  2FFF               	goto	l372
  6629  0FFF                     l372:	
  6630  0FFF  0008               	return
  6631  1000                     __end_of_GPIO_PinDirection:	
  6632                           
  6633                           	psect	text31
  6634  09CD                     __ptext31:	
  6635 ;; *************** function _DELAY_ms *****************
  6636 ;; Defined at:
  6637 ;;		line 75 in file "../00-libfiles/delay.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  ms_count        2    2[COMMON] unsigned int 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6651 ;;      Params:         2       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0
  6654 ;;      Totals:         2       0       0       0       0
  6655 ;;Total ram usage:        2 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    1
  6658 ;; This function calls:
  6659 ;;		_DELAY_us
  6660 ;; This function is called by:
  6661 ;;		_LCD_Init
  6662 ;;		_lcd_BusyCheck
  6663 ;;		_lcd_Reset
  6664 ;;		_LCD_ScrollMessage
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _DELAY_ms
  6670  09CD                     _DELAY_ms:	
  6671  09CD                     l1748:	
  6672                           ;delay.c: 77: while (ms_count != 0)
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  6676                           
  6677  09CD  0872               	movf	DELAY_ms@ms_count,w
  6678  09CE  0473               	iorwf	DELAY_ms@ms_count+1,w
  6679  09CF  1903               	btfsc	3,2
  6680  09D0  0008               	return
  6681                           
  6682                           ;delay.c: 78: {
  6683                           ;delay.c: 79: DELAY_us(300u);
  6684  09D1  302C               	movlw	44
  6685  09D2  00F0               	movwf	DELAY_us@us_count
  6686  09D3  3001               	movlw	1
  6687  09D4  00F1               	movwf	DELAY_us@us_count+1
  6688  09D5  120A  158A  21A4  120A  158A  	fcall	_DELAY_us
  6689                           
  6690                           ;delay.c: 80: ms_count--;
  6691  09DA  3001               	movlw	1
  6692  09DB  02F2               	subwf	DELAY_ms@ms_count,f
  6693  09DC  3000               	movlw	0
  6694  09DD  1C03               	skipc
  6695  09DE  03F3               	decf	DELAY_ms@ms_count+1,f
  6696  09DF  02F3               	subwf	DELAY_ms@ms_count+1,f
  6697  09E0  29CD               	goto	l1748
  6698  09E1                     __end_of_DELAY_ms:	
  6699                           
  6700                           	psect	text32
  6701  09A4                     __ptext32:	
  6702 ;; *************** function _DELAY_us *****************
  6703 ;; Defined at:
  6704 ;;		line 56 in file "../00-libfiles/delay.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  us_count        2    0[COMMON] unsigned int 
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  1    wreg      void 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6718 ;;      Params:         2       0       0       0       0
  6719 ;;      Locals:         0       0       0       0       0
  6720 ;;      Temps:          0       0       0       0       0
  6721 ;;      Totals:         2       0       0       0       0
  6722 ;;Total ram usage:        2 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_lcd_BusyCheck
  6728 ;;		_lcd_Reset
  6729 ;;		_lcd_SendCmdSignals
  6730 ;;		_lcd_SendDataSignals
  6731 ;;		_DELAY_ms
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _DELAY_us
  6737  09A4                     _DELAY_us:	
  6738  09A4                     l1702:	
  6739                           ;delay.c: 58: while (us_count != 0)
  6740                           
  6741                           ;incstack = 0
  6742                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  6743                           
  6744  09A4  0870               	movf	DELAY_us@us_count,w
  6745  09A5  0471               	iorwf	DELAY_us@us_count+1,w
  6746  09A6  1903               	btfsc	3,2
  6747  09A7  0008               	return
  6748                           
  6749                           ;delay.c: 59: {
  6750                           ;delay.c: 60: us_count--;
  6751  09A8  3001               	movlw	1
  6752  09A9  02F0               	subwf	DELAY_us@us_count,f
  6753  09AA  3000               	movlw	0
  6754  09AB  1C03               	skipc
  6755  09AC  03F1               	decf	DELAY_us@us_count+1,f
  6756  09AD  02F1               	subwf	DELAY_us@us_count+1,f
  6757  09AE  29A4               	goto	l1702
  6758  09AF                     __end_of_DELAY_us:	
  6759  007E                     btemp	set	126	;btemp
  6760  007E                     wtemp	set	126
  6761  007E                     wtemp0	set	126
  6762  0080                     wtemp1	set	128
  6763  0082                     wtemp2	set	130
  6764  0084                     wtemp3	set	132
  6765  0086                     wtemp4	set	134
  6766  0088                     wtemp5	set	136
  6767  007F                     wtemp6	set	127
  6768  007E                     ttemp	set	126
  6769  007E                     ttemp0	set	126
  6770  0081                     ttemp1	set	129
  6771  0084                     ttemp2	set	132
  6772  0087                     ttemp3	set	135
  6773  007F                     ttemp4	set	127
  6774  007E                     ltemp	set	126
  6775  007E                     ltemp0	set	126
  6776  0082                     ltemp1	set	130
  6777  0086                     ltemp2	set	134
  6778  0080                     ltemp3	set	128


Data Sizes:
    Strings     80
    Constant    0
    Data        4
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     68      74
    BANK1            80     52      66
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Printf@str	PTR unsigned char  size(1) Largest target is 50
		 -> main@str(BANK1[50]), 

    LCD_Printf@argList	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_3(CODE[16]), 

    LCD_Printf@ptr	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_3(CODE[16]), 

    LCD_Printf@argp	PTR void [1] size(1) Largest target is 1
		 -> ?_LCD_Printf(BANK0[1]), 

    LCD_DisplayString@ptr_stringPointer_u8	PTR const unsigned char  size(2) Largest target is 50
		 -> main@str(BANK1[50]), STR_1(CODE[32]), 

    UART_Printf@str	PTR unsigned char  size(1) Largest target is 50
		 -> main@str(BANK1[50]), 

    UART_Printf@argList	PTR const unsigned char  size(1) Largest target is 32
		 -> STR_2(CODE[32]), 

    UART_Printf@ptr	PTR const unsigned char  size(1) Largest target is 32
		 -> STR_2(CODE[32]), 

    UART_Printf@argp	PTR void [1] size(1) Largest target is 1
		 -> ?_UART_Printf(BANK0[1]), 

    UART_RxString@ptr_string	PTR unsigned char  size(1) Largest target is 50
		 -> main@str(BANK1[50]), 

    UART_TxString@ptr_string	PTR unsigned char  size(1) Largest target is 50
		 -> main@str(BANK1[50]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _UART_RxString->_UART_TxChar
    _UART_TxString->_UART_TxChar
    _UART_TxNumber->___lldiv
    _UART_SetBaudRate->___lldiv
    _LCD_SetUp->_GPIO_PinDirection
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayNumber->___lldiv
    ___bmul->___lldiv
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_DataWrite->_lcd_SendHigherNibble
    _lcd_DataWrite->_lcd_SendLowerNibble
    _lcd_SendDataSignals->_GPIO_PinWrite
    _LCD_GoToNextLine->_LCD_CmdWrite
    _lcd_Reset->_lcd_SendHigherNibble
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _LCD_CmdWrite->_lcd_SendHigherNibble
    _LCD_CmdWrite->_lcd_SendLowerNibble
    _lcd_SendLowerNibble->_GPIO_PinWrite
    _lcd_SendHigherNibble->_GPIO_PinWrite
    _lcd_SendCmdSignals->_GPIO_PinWrite
    _lcd_BusyCheck->_GPIO_PinDirection
    _lcd_BusyCheck->_GPIO_PinRead
    _lcd_BusyCheck->_GPIO_PinWrite
    _DELAY_ms->_DELAY_us

Critical Paths under _main in BANK0

    _main->_LCD_Printf
    _main->_UART_Printf
    _UART_Printf->_UART_TxNumber
    _UART_TxNumber->___bmul
    _UART_Init->_UART_SetBaudRate
    _LCD_Printf->_LCD_DisplayNumber
    _LCD_DisplayNumber->___bmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                62    62      0  144890
                                             58 BANK0     10    10      0
                                              0 BANK1     52    52      0
                          _LCD_Clear
                  _LCD_DisplayString
                           _LCD_Init
                         _LCD_Printf
                          _LCD_SetUp
                          _UART_Init
                        _UART_Printf
                      _UART_RxString
 ---------------------------------------------------------------------------------
 (1) _UART_RxString                                        5     5      0     295
                                              1 COMMON     5     5      0
                        _UART_RxChar
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Printf                                         23    20      3    4126
                                             35 BANK0     23    20      3
                        _UART_TxChar
                      _UART_TxNumber
                      _UART_TxString
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     2      0      94
                                              1 COMMON     2     2      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxNumber                                       31    26      5    2588
                                              4 BANK0     31    26      5
                        _UART_TxChar
                             ___bmul
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4     910
                                             16 BANK0      4     0      4
                   _UART_SetBaudRate
 ---------------------------------------------------------------------------------
 (2) _UART_SetBaudRate                                    16    12      4     835
                                              0 BANK0     16    12      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _LCD_SetUp                                           12     2     10    2189
                                              5 COMMON     2     2      0
                                              0 BANK0     10     0     10
                  _GPIO_PinDirection
 ---------------------------------------------------------------------------------
 (1) _LCD_Printf                                          23    20      3   62723
                                             35 BANK0     23    20      3
                    _LCD_DisplayChar
                  _LCD_DisplayNumber
                  _LCD_DisplayString
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayString                                    2     0      2   19679
                                              0 BANK0      2     0      2
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayNumber                                   31    26      5   22094
                                              4 BANK0     31    26      5
                    _LCD_DisplayChar
                             ___bmul
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     692
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     304
                                              0 BANK0      4     3      1
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      2     2      0   19528
                                             11 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        3     3      0    9731
                                              7 COMMON     3     3      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  0     0      0    2117
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     1     1      0    9731
                                             10 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     2      1   35320
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    5110
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0   19528
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         2     2      0    9797
                                             10 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (5) _LCD_CmdWrite                                         3     3      0    9731
                                              7 COMMON     3     3      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
               _lcd_SendHigherNibble
                _lcd_SendLowerNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendLowerNibble                                  2     2      0    1652
                                              5 COMMON     2     2      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _lcd_SendHigherNibble                                 2     2      0    1652
                                              5 COMMON     2     2      0
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (6) _lcd_SendCmdSignals                                   0     0      0    2117
                           _DELAY_us
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (5) _lcd_BusyCheck                                        2     2      0    4221
                                              5 COMMON     2     2      0
                           _DELAY_ms
                           _DELAY_us
                  _GPIO_PinDirection
                       _GPIO_PinRead
                      _GPIO_PinWrite
 ---------------------------------------------------------------------------------
 (6) _GPIO_PinWrite                                        5     4      1    1564
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (6) _GPIO_PinRead                                         5     5      0     206
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PinDirection                                    5     4      1    1087
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (6) _DELAY_ms                                             2     0      2     788
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (6) _DELAY_us                                             2     0      2     553
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _LCD_GoToLine
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
   _LCD_DisplayString
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendCmdSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_ms
           _DELAY_us
         _DELAY_us
         _GPIO_PinDirection
         _GPIO_PinRead
         _GPIO_PinWrite
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
       _lcd_SendLowerNibble
         _GPIO_PinWrite
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
         _GPIO_PinWrite
       _lcd_SendHigherNibble
         _GPIO_PinWrite
   _LCD_Printf
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendCmdSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_ms
             _DELAY_us
           _DELAY_us
           _GPIO_PinDirection
           _GPIO_PinRead
           _GPIO_PinWrite
         _lcd_SendDataSignals
           _DELAY_us
           _GPIO_PinWrite
         _lcd_SendHigherNibble
           _GPIO_PinWrite
         _lcd_SendLowerNibble
           _GPIO_PinWrite
     _LCD_DisplayNumber
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
       ___bmul
         ___lldiv (ARG)
       ___lldiv
     _LCD_DisplayString
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_ms
                 _DELAY_us
               _DELAY_us
               _GPIO_PinDirection
               _GPIO_PinRead
               _GPIO_PinWrite
             _lcd_SendCmdSignals
               _DELAY_us
               _GPIO_PinWrite
             _lcd_SendHigherNibble
               _GPIO_PinWrite
             _lcd_SendLowerNibble
               _GPIO_PinWrite
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_ms
               _DELAY_us
             _DELAY_us
             _GPIO_PinDirection
             _GPIO_PinRead
             _GPIO_PinWrite
           _lcd_SendDataSignals
             _DELAY_us
             _GPIO_PinWrite
           _lcd_SendHigherNibble
             _GPIO_PinWrite
           _lcd_SendLowerNibble
             _GPIO_PinWrite
     ___bmul
       ___lldiv (ARG)
   _LCD_SetUp
     _GPIO_PinDirection
   _UART_Init
     _UART_SetBaudRate
       ___lldiv
   _UART_Printf
     _UART_TxChar
     _UART_TxNumber
       _UART_TxChar
       ___bmul
         ___lldiv (ARG)
       ___lldiv
     _UART_TxString
       _UART_TxChar
     ___bmul
       ___lldiv (ARG)
   _UART_RxString
     _UART_RxChar
     _UART_TxChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     34      42       7       82.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9A      12        0.0%
ABS                  0      0      9A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Feb 20 15:54:38 2016

          UART_SetBaudRate@var_baudRate_u32 0020                                           pc 0002  
                            ___bmul@product 0022                                 __CFG_CP$OFF 0000  
                             ?_LCD_CmdWrite 0070                                          l33 0994  
                                        l39 099C                                 ?_LCD_Printf 0043  
                                        fsr 0004                               ?_LCD_GoToLine 0070  
                               __CFG_LVP$ON 0000                                         l303 0DEA  
                                       l402 01A2                                         l181 0C73  
                                       l372 0FFF                                         l278 0685  
                              __CFG_CPD$OFF 0000                                         fsr0 0004  
                                       indf 0000                                __CFG_FOSC$HS 0000  
                   __end_of_LCD_DisplayChar 0026                                        l2000 030B  
                                      l2020 037C                                        l2110 028B  
                                      l2102 0276                                        l2030 03A1  
                                      l2104 020B                                        l2024 038C  
                                      l2016 0377                                        l2008 036B  
                                      l2106 027B                                        l2018 030C  
                                      l2116 02A0                                        l2220 04CB  
                                      l2132 0B56                                        l2124 0B40  
                                      l2310 0C51                                        l2214 04A4  
                                      l2206 0470                                        l2142 0B32  
                                      l2072 01EA                                        l2400 0726  
                                      l2240 0526                                        l2232 0511  
                                      l2208 0485                                        l2136 0B28  
                                      l2082 01F5                                        l2066 01AC  
                                      l2074 01EE                                        l2058 0A3B  
                                      l2410 074C                                        l2250 0552  
                                      l2242 0537                                        l2226 04EA  
                                      l2316 0C62                                        l2420 077A  
                                      l2252 0565                                        l2172 03DF  
                                      l1702 09A4                                        l2094 026A  
                                      l2086 020A                                        l2430 0793  
                                      l2342 05F4                                        l2262 057B  
                                      l1720 0F82                                        l1712 0F4D  
                                      l1800 0D19                                        l2408 073B  
                                      l2432 07C5                                        l2280 0EBA  
                                      l2184 0418                                        l2176 0407  
                                      l2264 05AD                                        l1730 0FB9  
                                      l1714 0F5E                                        l1802 0D27  
                                      l2426 0791                                        l2418 0767  
                                      l2354 062D                                        l2434 07CB  
                                      l2346 061C                                        l2282 0EC1  
                                      l2258 0579                                        l2194 0433  
                                      l2266 05B3                                        l2178 040C  
                                      l1732 0FCA                                        l1724 0F95  
                                      l1708 0F3A                                        l1740 0FEE  
                                      l2364 0648                                        l2348 0621  
                                      l2436 05C5                                        l2292 0EEB  
                                      l2196 0449                                        l2268 03B0  
                                      l1726 0FA6                                        l1718 0F71  
                                      l1806 0D3D                                        l1830 0E43  
                                      l2382 06B9                                        l2366 065E  
                                      l1736 0FDD                                        l1808 0D4E  
                                      l1760 0101                                        l1920 09C4  
                                      l2376 069A                                        l1770 0138  
                                      l1754 00DD                                        l1834 0E4E  
                                      l1906 0012                                        l2394 06FF  
                                      l2482 0080                                        l1748 09CD  
                                      l1772 0149                                        l1764 0114  
                                      l1852 0ACE                                        l1908 0017  
                                      l1916 09BE                                        l2388 06E0  
                                      l1782 0180                                        l1766 0125  
                                      l1758 00F0                                        l1934 0C8D  
                                      l1776 015C                                        l1856 0AE6  
                                      l1944 0CC5                                        l1936 0C9D  
                                      l1794 0CEF                                        l1778 016D  
                                      l1786 0191                                        l1882 0B03  
                                      l1954 0D62                                        l1796 0CFD  
                                      l1948 0CD2                                        l1980 02AD  
                                      l1972 09E2                                        l1798 0D0B  
                                      l1886 0B1B                                        l1958 0DBD  
                                      l1986 02EB                                        l1996 02F6  
                                      l1988 02EF                                        STR_1 0830  
                                      STR_2 0810                                        STR_3 0850  
                                      u2014 0D11                                        u2015 0D0F  
                                      u2200 0BD5                                        u2210 0B64  
                                      u2130 0BA4                                        u2044 0D1F  
                                      u2220 0B65                                        u2140 0BA5  
                                      u2045 0D1D                                        u2230 0B74  
                                      u2150 0BB4                                        u2080 0D38  
                                      u2240 0B75                                        u2160 0BB5  
                                      u2305 0ADC                                        u2090 0D39  
                                      u2074 0D2D                                        u2250 0B84  
                                      u2170 0BC4                                        u2075 0D2B  
                                      u2260 0B85                                        u2180 0BC5  
                                      u2270 0B94                                        u2190 0BD4  
                                      u2510 0DAA                                        u1615 0F2B  
                                      u2335 0B11                                        u2511 0DAB  
                                      u1704 0F9B                                        u2280 0B95  
                                      u2512 0DB0                                        u1705 0F99  
                                      u2425 0C91                                        u2513 0DB1  
                                      u2505 0D84                                        u1634 0F43  
                                      u1635 0F41                                        u1724 0FAF  
                                      u1644 0F53                                        u1804 00E6  
                                      u1725 0FAD                                        u1645 0F51  
                                      u1805 00E4                                        u2445 0C9F  
                                      u1734 0FBF                                        u1814 00F6  
                                      u2710 01DB                                        u1735 0FBD  
                                      u1815 00F4                                        u2455 0CB4  
                                      u1664 0F67                                        u1904 0162  
                                      u2720 01DC                                        u2704 01C0  
                                      u2560 02DC                                        u1665 0F65  
                                      u1905 0160                                        u2465 0CC6  
                                      u2705 01BD                                        u1754 0FD3  
                                      u1674 0F77                                        u1834 010A  
                                      u2570 02DD                                        u2554 02C1  
                                      u1755 0FD1                                        u1675 0F75  
                                      u1835 0108                                        u2483 0D60  
                                      u2555 02BE                                        u1764 0FE3  
                                      u1924 0176                                        u1844 011A  
                                      u1765 0FE1                                        u1925 0174  
                                      u1845 0118                                        u2493 0D71  
                                      u1694 0F8B                                        u1934 0186  
                                      u1695 0F89                                        u1935 0184  
                                      u1864 012E                                        u1945 0CE0  
                                      u1865 012C                                        u1785 00CE  
                                      u1954 0CF5                                        u1874 013E  
                                      u1955 0CF3                                        u1875 013C  
                                      u1894 0152                                        u1895 0150  
                                      u1984 0D03                                        u1985 0D01  
                                      _RCIF 0065                                        _TXIF 0064  
                              __CFG_WRT$OFF 0000                                        _main 0026  
                        __size_of_LCD_Clear 000B                                        btemp 007E  
                                      ltemp 007E                          __size_of_LCD_SetUp 00D1  
                                      start 0000                                        ttemp 007E  
                                      wtemp 007E                            __end_of_DELAY_ms 09E1  
                          __end_of_DELAY_us 09AF                           ___bmul@multiplier 0023  
                             ?_GPIO_PinRead 0070                              ??_LCD_CmdWrite 0077  
                               LCD_SetUp@D0 0022                                 LCD_SetUp@D1 0023  
                               LCD_SetUp@D2 0024                                 LCD_SetUp@D3 0025  
                               LCD_SetUp@D4 0026                                 LCD_SetUp@D5 0027  
                               LCD_SetUp@D6 0028                                 LCD_SetUp@D7 0029  
                               LCD_SetUp@EN 0021                                 LCD_SetUp@RS 0076  
                               LCD_SetUp@RW 0020                              ??_LCD_GoToLine 007A  
                             _GPIO_PinWrite 00CA                            __end_of_LCD_Init 0C7D  
                   UART_RxString@ptr_string 0073            LCD_Printf@v_numOfDigitsToDisp_u8 0058  
                   LCD_CmdWrite@v_lcdCmd_u8 0079                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             __end_of___lldiv 0CDB  
                     _LCD_DisplayNumber$268 003F                                       _RCREG 001A  
                                     _RCSTA 0018                                       _SPBRG 0099  
                                     _PORTA 0005                                       _PORTB 0006  
                                     _PORTC 0007                                       _PORTD 0008  
                                     _PORTE 0009                                       _TRISA 0085  
                                     _TRISB 0086                                       _TRISC 0087  
                                     _TRISD 0088                                       _TRISE 0089  
                                     _TXREG 0019                                       _TXSTA 0098  
                        __size_of_UART_Init 0016       LCD_DisplayString@ptr_stringPointer_u8 0020  
                            __CFG_BOREN$OFF 0000                                       pclath 000A  
                                     ltemp0 007E                                       ltemp1 0082  
                                     ltemp2 0086                                       ltemp3 0080  
              __end_of_lcd_SendHigherNibble 0B9F                         __size_of_LCD_Printf 0218  
                                     ttemp0 007E                                       ttemp1 0081  
                                     ttemp2 0084                                       ttemp3 0087  
                                     ttemp4 007F                                       status 0003  
                                     wtemp0 007E                                       wtemp1 0080  
                                     wtemp2 0082                                       wtemp3 0084  
                                     wtemp4 0086                                       wtemp5 0088  
                                     wtemp6 007F                              ??_GPIO_PinRead 0070  
                           __initialization 07D2                  GPIO_PinWrite@enm_pinNumber 0074  
                              __end_of_main 00CA                              ?_GPIO_PinWrite 0070  
                         _GPIO_PinDirection 0F27                                      ??_main 005A  
               __size_of_lcd_SendCmdSignals 002D                           __end_of_LCD_Clear 09BA  
                        ?_GPIO_PinDirection 0070                           __end_of_LCD_SetUp 0F27  
                          ?_LCD_DisplayChar 0070                 LCD_DisplayChar@v_lcdData_u8 007C  
                              LCD_Printf@ch 0057                         ??_GPIO_PinDirection 0071  
                         ?_UART_SetBaudRate 0020                       lcd_BusyCheck@busyflag 0076  
                        ??_UART_SetBaudRate 0024                                ?_UART_RxChar 0070  
                            __CFG_PWRTE$OFF 0000                                ?_UART_TxChar 0070  
                              ?_UART_Printf 0043                   GPIO_PinRead@enm_pinNumber 0074  
                         __end_of_UART_Init 0A0C                                      ___bmul 09BA  
                                 ??___lldiv 0078                   __end_of_GPIO_PinDirection 1000  
            GPIO_PinDirection@enm_pinNumber 0074                            DELAY_ms@ms_count 0072  
   UART_TxNumber@v_numOfDigitsToTransmit_u8 0028                           ?_LCD_GoToNextLine 0070  
                                 ?_DELAY_ms 0072                                   ?_DELAY_us 0070  
               __end_of_lcd_SendLowerNibble 0BDF                          ??_LCD_GoToNextLine 007A  
                      __end_of_LCD_CmdWrite 0AF0                        __end_of_LCD_GoToLine 0A23  
               lcd_SendLowerNibble@dataByte 0076                     __end_of__initialization 07FC  
                                 ?_LCD_Init 007C                       __end_of_UART_RxString 0B5F  
                     __end_of_UART_TxNumber 03A5                       __end_of_UART_TxString 09F6  
                       ___bmul@multiplicand 0020                             ??_GPIO_PinWrite 0071  
                            __pcstackCOMMON 0070                                __pidataBANK0 0990  
                     __end_of_lcd_DataWrite 0B25                                ??_LCD_Printf 0046  
                      _lcd_SendHigherNibble 0B5F                         LCD_Printf@v_num_s16 004E  
                       LCD_Printf@v_num_s32 004A                         LCD_Printf@v_num_u16 0054  
                       LCD_Printf@v_num_u32 0050                          __size_of_lcd_Reset 004F  
              __size_of_lcd_SendDataSignals 002E                                  ??_DELAY_ms 0074  
                                ??_DELAY_us 0072                        __end_of_GPIO_PinRead 0D50  
            GPIO_PinWrite@var_portNumber_u8 0073                                  __pbssBANK0 0068  
                                __pbssBANK1 00D4                       __end_of_lcd_BusyCheck 0E56  
              lcd_SendHigherNibble@dataByte 0076                GPIO_PinWrite@var_pinValue_u8 0070  
                                ??_LCD_Init 007D                          __end_of_LCD_Printf 07D2  
                                __pmaintext 0026                                     ?___bmul 0020  
                __size_of_GPIO_PinDirection 00D9                               LCD_Printf@ptr 0056  
                             LCD_Printf@str 0048                       ?_lcd_SendHigherNibble 0070  
                          DELAY_us@us_count 0070                                  __stringtab 0800  
                         __end_of_lcd_Reset 0C2E                        __size_of_UART_RxChar 0007  
                      __size_of_UART_TxChar 0009                             __size_of___bmul 0013  
                      __size_of_UART_Printf 0215                   LCD_Init@v_lcdNoOfLines_u8 0020  
                                   ___lldiv 0C7D                          LCD_DisplayNumber@a 0035  
                        LCD_DisplayNumber@i 0042                                     __ptext1 0B25  
                                   __ptext2 0994                                     __ptext3 03A5  
                                   __ptext4 09E1                                     __ptext5 02A4  
                                   __ptext6 099B                                     __ptext7 09F6  
                                   __ptext8 0D50                                     __ptext9 0E56  
                     __size_of_LCD_CmdWrite 0035                                   _LCDConfig 00D4  
                     __size_of_LCD_GoToLine 0017                                   _LCD_Clear 09AF  
                            UART_Printf@ptr 0056                              UART_Printf@str 0048  
                                 _LCD_SetUp 0E56                                     main@len 00D2  
                                   main@str 00A0                        end_of_initialization 07FC  
                            UART_TxNumber@a 0035                              UART_TxNumber@i 0042  
              LCD_Init@v_MaxCharsPerLine_u8 007C                  UART_TxChar@var_uartData_u8 0070  
                           ___lldiv@divisor 0070                             ___lldiv@counter 007D  
                    ??_lcd_SendHigherNibble 0075                  __end_of_lcd_SendCmdSignals 0A8D  
                              _LCD_CmdWrite 0ABB                                   _UART_Init 09F6  
                 __size_of_UART_SetBaudRate 007A                                _LCD_GoToLine 0A0C  
                     __size_of_GPIO_PinRead 0075                                  ?_LCD_Clear 0070  
                                ?_LCD_SetUp 0020                           __size_of_DELAY_ms 0014  
                         __size_of_DELAY_us 000B                    __size_of_LCD_DisplayChar 0021  
                         __size_of_LCD_Init 004F                   __size_of_LCD_GoToNextLine 0018  
                       _lcd_SendDataSignals 0A8D             UART_TxNumber@v_numericSystem_u8 0041  
        GPIO_PinDirection@var_portNumber_u8 0073                                _GPIO_PinRead 0CDB  
                            __end_of___bmul 09CD                                  ?_UART_Init 0030  
                         LCD_Printf@argList 0049                    _ARR_LcdLineNumAddress_U8 0064  
                       start_initialization 07D2                        ?_lcd_SendDataSignals 0070  
                    _v_LcdTrackCursorPos_U8 0068               GPIO_PinRead@var_portNumber_u8 0072  
              __size_of_lcd_SendLowerNibble 0040             GPIO_PinDirection@var_pinDirn_u8 0070  
                                  ??___bmul 0021                       __end_of_GPIO_PinWrite 01A3  
                               __pdataBANK0 0064                      __size_of_UART_RxString 003A  
                     ??_lcd_SendDataSignals 0075                        _v_LcdTrackLineNum_U8 0069  
                    __size_of_UART_TxNumber 0101                                   ___latbits 0002  
                     lcd_DataWrite@dataByte 0079                      __size_of_UART_TxString 0015  
                             __pcstackBANK0 0020                               __pcstackBANK1 00A0  
                               ??_LCD_Clear 007C                                 ??_LCD_SetUp 0075  
                    __size_of_lcd_DataWrite 0035                 LCD_GoToLine@v_lineNumber_u8 007B  
                 UART_Init@var_baudRate_u32 0030                                    ?___lldiv 0070  
                                 _lcd_Reset 0BDF                           ??_LCD_DisplayChar 007B  
                               ??_UART_Init 007E                            _UART_SetBaudRate 0D50  
                                 __pstrings 0800                      __size_of_lcd_BusyCheck 008C  
                         _LCD_DisplayNumber 01A3                              LCD_Printf@argp 0059  
                         _LCD_DisplayString 0A3B                                    _DELAY_ms 09CD  
                                  _DELAY_us 09A4                          ?_LCD_DisplayNumber 0024  
                        ?_LCD_DisplayString 0020                         ??_LCD_DisplayNumber 0029  
                             UART_Printf@ch 0057                                    _LCD_Init 0C2E  
                       ??_LCD_DisplayString 007D                               ??_UART_RxChar 0070  
                             _UART_RxString 0B25                               ??_UART_TxChar 0070  
                             _UART_TxNumber 02A4                            _LCD_GoToNextLine 0A23  
                             ??_UART_Printf 0046                               _UART_TxString 09E1  
                                ?_lcd_Reset 0070                               _lcd_DataWrite 0AF0  
                   UART_TxString@ptr_string 0072                    GPIO_PinRead@returnStatus 0073  
                 __end_of_LCD_DisplayNumber 02A4                                 __stringbase 080F  
                 __end_of_LCD_DisplayString 0A60                          _lcd_SendCmdSignals 0A60  
                          UART_RxString@len 0074                               _lcd_BusyCheck 0DCA  
                       ?_lcd_SendCmdSignals 0070                   UART_TxNumber@v_number_u32 0024  
                            ?_UART_RxString 0070                              ?_UART_TxNumber 0024  
                            ?_UART_TxString 0070                            _UART_TxNumber$63 003F  
                            ?_lcd_DataWrite 0070                         __end_of_UART_RxChar 099B  
                       __end_of_UART_TxChar 09A4                            __size_of___lldiv 005E  
                       __end_of_UART_Printf 05BA                          __end_of__stringtab 0810  
                      ??_lcd_SendCmdSignals 0075               __size_of_lcd_SendHigherNibble 0040  
                       _lcd_SendLowerNibble 0B9F                                    __ptext10 05BA  
                                  __ptext11 0A3B                                    __ptext20 0BDF  
                                  __ptext12 01A3                                    __ptext21 09AF  
                                  __ptext13 0C7D                                    __ptext30 0F27  
                                  __ptext22 0A0C                                    __ptext14 09BA  
                                  __ptext31 09CD                                    __ptext23 0ABB  
                                  __ptext15 0005                                    __ptext32 09A4  
                                  __ptext24 0B9F                                    __ptext16 0AF0  
                                  __ptext25 0B5F                                    __ptext17 0A8D  
                                  __ptext26 0A60                                    __ptext18 0A23  
                                  __ptext27 0DCA                                    __ptext19 0C2E  
                                  __ptext28 00CA                                    __ptext29 0CDB  
                            ?_lcd_BusyCheck 0070         LCD_DisplayNumber@v_numericSystem_u8 0041  
                             __size_of_main 00A4                        ?_lcd_SendLowerNibble 0070  
                           UART_Printf@argp 0059                                 ??_lcd_Reset 0077  
                  UART_SetBaudRate@RegValue 002C                                  _LCD_Printf 05BA  
                __size_of_LCD_DisplayNumber 0101                             UART_RxString@ch 0075  
                __size_of_LCD_DisplayString 0025                             ??_UART_RxString 0071  
                           ??_UART_TxNumber 0029                    __end_of_UART_SetBaudRate 0DCA  
                           ??_UART_TxString 0071                       ??_lcd_SendLowerNibble 0075  
                          ___lldiv@dividend 0074                             _LCD_DisplayChar 0005  
                               _UART_RxChar 0994                                   stringcode 080A  
                               _UART_TxChar 099B                                 _UART_Printf 03A5  
                           ??_lcd_DataWrite 0077                 __end_of_lcd_SendDataSignals 0ABB  
                          ___lldiv@quotient 0079                    __end_of_LCD_GoToNextLine 0A3B  
                                  stringdir 080A                                    stringtab 0800  
LCD_DisplayNumber@v_numOfDigitsToDisplay_u8 0028                             ??_lcd_BusyCheck 0075  
                    __size_of_GPIO_PinWrite 00D9       UART_Printf@v_numOfDigitsToTransmit_u8 0058  
                        UART_Printf@argList 0049               LCD_DisplayNumber@v_number_u32 0024  
                      UART_Printf@v_num_s16 004E                        UART_Printf@v_num_s32 004A  
                      UART_Printf@v_num_u16 0054                        UART_Printf@v_num_u32 0050  
