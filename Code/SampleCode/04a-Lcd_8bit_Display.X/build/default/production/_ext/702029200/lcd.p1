Version 3.2 HI-TECH Software Intermediate Code
"83 ../00-libfiles/lcd.c
[c E33 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 255 .. ]
[n E33 . PA_0 PA_1 PA_2 PA_3 PA_4 PA_5 PA_6 PA_7 PB_0 PB_1 PB_2 PB_3 PB_4 PB_5 PB_6 PB_7 PC_0 PC_1 PC_2 PC_3 PC_4 PC_5 PC_6 PC_7 PD_0 PD_1 PD_2 PD_3 PD_4 PD_5 PD_6 PD_7 PE_0 PE_1 PE_2 PE_3 PE_4 PE_5 PE_6 PE_7 P_NC  ]
"124 ../00-libfiles/lcd.h
[s S1 `uc 1 `uc 1 `uc 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 `E33 1 ]
[n S1 . v_MaxSupportedLines_U8 v_MaxSupportedChars_U8 v_LcdMode_U8 RS RW EN D0 D1 D2 D3 D4 D5 D6 D7 ]
"66 ../00-libfiles/gpio.h
[v _GPIO_PinDirection `(v ~T0 @X0 0 ef2`E33`uc ]
"68 ../00-libfiles/delay.h
[v _DELAY_ms `(v ~T0 @X0 0 ef1`ui ]
"151 ../00-libfiles/lcd.h
[v _LCD_CmdWrite `(v ~T0 @X0 0 ef1`uc ]
"95 ../00-libfiles/lcd.c
[v _lcd_Reset `(v ~T0 @X0 0 sf ]
"153 ../00-libfiles/lcd.h
[v _LCD_Clear `(v ~T0 @X0 0 ef ]
"154
[v _LCD_GoToLine `(v ~T0 @X0 0 ef1`uc ]
"94 ../00-libfiles/lcd.c
[v _lcd_BusyCheck `(v ~T0 @X0 0 sf ]
"99
[v _lcd_SendLowerNibble `(v ~T0 @X0 0 sf1`uc ]
"98
[v _lcd_SendHigherNibble `(v ~T0 @X0 0 sf1`uc ]
"96
[v _lcd_SendCmdSignals `(v ~T0 @X0 0 sf ]
"93
[v _lcd_DataWrite `(v ~T0 @X0 0 sf1`uc ]
"97
[v _lcd_SendDataSignals `(v ~T0 @X0 0 sf ]
"67 ../00-libfiles/gpio.h
[v _GPIO_PinWrite `(v ~T0 @X0 0 ef2`E33`uc ]
"67 ../00-libfiles/delay.h
[v _DELAY_us `(v ~T0 @X0 0 ef1`ui ]
"68 ../00-libfiles/gpio.h
[v _GPIO_PinRead `(uc ~T0 @X0 0 ef1`E33 ]
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdutils.h: 68: typedef signed char sint8_t;
[; ;stdutils.h: 69: typedef unsigned char uint8_t;
[; ;stdutils.h: 71: typedef signed int sint16_t;
[; ;stdutils.h: 72: typedef unsigned int uint16_t;
[; ;stdutils.h: 74: typedef signed long int sint32_t;
[; ;stdutils.h: 75: typedef unsigned long int uint32_t;
[; ;stdutils.h: 177: typedef enum
[; ;stdutils.h: 178: {
[; ;stdutils.h: 179: E_FALSE,
[; ;stdutils.h: 180: E_TRUE
[; ;stdutils.h: 181: }Boolean_et;
[; ;stdutils.h: 184: typedef enum
[; ;stdutils.h: 185: {
[; ;stdutils.h: 186: E_FAILED,
[; ;stdutils.h: 187: E_SUCCESS,
[; ;stdutils.h: 188: E_BUSY,
[; ;stdutils.h: 189: E_TIMEOUT
[; ;stdutils.h: 190: }Status_et;
[; ;stdutils.h: 193: typedef enum
[; ;stdutils.h: 194: {
[; ;stdutils.h: 195: E_BINARY=2,
[; ;stdutils.h: 196: E_DECIMAL = 10,
[; ;stdutils.h: 197: E_HEX = 16
[; ;stdutils.h: 198: }NumericSystem_et;
"299 ../00-libfiles/stdutils.h
[p x FOSC=HS ]
"300
[p x WDTE=OFF ]
"301
[p x PWRTE=OFF ]
"302
[p x BOREN=OFF ]
"303
[p x LVP=ON ]
"304
[p x CPD=OFF ]
"305
[p x WRT=OFF ]
"306
[p x CP=OFF ]
[; ;delay.h: 67: void DELAY_us(uint16_t us_count);
[; ;delay.h: 68: void DELAY_ms(uint16_t ms_count);
[; ;delay.h: 69: void DELAY_sec(uint16_t var_delaySecCount_u16);
[; ;gpio.h: 48: typedef enum
[; ;gpio.h: 49: {
[; ;gpio.h: 50: PA_0,PA_1,PA_2,PA_3,PA_4,PA_5,PA_6,PA_7,
[; ;gpio.h: 51: PB_0,PB_1,PB_2,PB_3,PB_4,PB_5,PB_6,PB_7,
[; ;gpio.h: 52: PC_0,PC_1,PC_2,PC_3,PC_4,PC_5,PC_6,PC_7,
[; ;gpio.h: 53: PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7,
[; ;gpio.h: 54: PE_0,PE_1,PE_2,PE_3,PE_4,PE_5,PE_6,PE_7,
[; ;gpio.h: 55: P_NC = 0xff
[; ;gpio.h: 56: }gpioPins_et;
[; ;gpio.h: 66: void GPIO_PinDirection(gpioPins_et enm_pinNumber, uint8_t var_pinDirn_u8);
[; ;gpio.h: 67: void GPIO_PinWrite(gpioPins_et enm_pinNumber, uint8_t var_pinValue_u8);
[; ;gpio.h: 68: uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber);
[; ;lcd.h: 123: typedef struct
[; ;lcd.h: 124: {
[; ;lcd.h: 125: uint8_t v_MaxSupportedLines_U8;
[; ;lcd.h: 126: uint8_t v_MaxSupportedChars_U8;
[; ;lcd.h: 127: uint8_t v_LcdMode_U8;
[; ;lcd.h: 128: gpioPins_et RS;
[; ;lcd.h: 129: gpioPins_et RW;
[; ;lcd.h: 130: gpioPins_et EN;
[; ;lcd.h: 131: gpioPins_et D0;
[; ;lcd.h: 132: gpioPins_et D1;
[; ;lcd.h: 133: gpioPins_et D2;
[; ;lcd.h: 134: gpioPins_et D3;
[; ;lcd.h: 135: gpioPins_et D4;
[; ;lcd.h: 136: gpioPins_et D5;
[; ;lcd.h: 137: gpioPins_et D6;
[; ;lcd.h: 138: gpioPins_et D7;
[; ;lcd.h: 139: }LcdConfig_st;
[; ;lcd.h: 150: void LCD_Init(uint8_t v_lcdNoOfLines_u8, uint8_t v_MaxCharsPerLine_u8);
[; ;lcd.h: 151: void LCD_CmdWrite( uint8_t v_lcdCmd_u8);
[; ;lcd.h: 152: void LCD_DisplayChar( char v_lcdData_u8);
[; ;lcd.h: 153: void LCD_Clear();
[; ;lcd.h: 154: void LCD_GoToLine(uint8_t v_lineNumber_u8);
[; ;lcd.h: 155: void LCD_GoToNextLine();
[; ;lcd.h: 156: void LCD_SetCursor(uint8_t v_lineNumber_u8, uint8_t v_charNumber_u8);
[; ;lcd.h: 157: void LCD_DisplayString(const char *ptr_stringPointer_u8);
[; ;lcd.h: 158: void LCD_ScrollMessage(uint8_t v_lineNumber_u8, char *ptr_msgPointer_u8);
[; ;lcd.h: 159: void LCD_DisplayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8);
[; ;lcd.h: 160: void LCD_DisplayFloatNumber(float v_floatNum_f32);
[; ;lcd.h: 161: void LCD_Printf(const char *argList, ...);
[; ;lcd.h: 162: void LCD_SetUp(gpioPins_et RS,
[; ;lcd.h: 163: gpioPins_et RW,
[; ;lcd.h: 164: gpioPins_et EN,
[; ;lcd.h: 165: gpioPins_et D0,
[; ;lcd.h: 166: gpioPins_et D1,
[; ;lcd.h: 167: gpioPins_et D2,
[; ;lcd.h: 168: gpioPins_et D3,
[; ;lcd.h: 169: gpioPins_et D4,
[; ;lcd.h: 170: gpioPins_et D5,
[; ;lcd.h: 171: gpioPins_et D6,
[; ;lcd.h: 172: gpioPins_et D7 );
"81 ../00-libfiles/lcd.c
[v _v_LcdTrackLineNum_U8 `uc ~T0 @X0 1 e ]
[; ;lcd.c: 81: uint8_t v_LcdTrackLineNum_U8;
"82
[v _v_LcdTrackCursorPos_U8 `uc ~T0 @X0 1 e ]
[; ;lcd.c: 82: uint8_t v_LcdTrackCursorPos_U8;
"83
[v _LCDConfig `S1 ~T0 @X0 1 e ]
[; ;lcd.c: 83: LcdConfig_st LCDConfig;
"84
[v _ARR_LcdLineNumAddress_U8 `uc ~T0 @X0 -> 0 `x e ]
[i _ARR_LcdLineNumAddress_U8
:U ..
-> -> 128 `i `uc
-> -> 192 `i `uc
-> -> 144 `i `uc
-> -> 208 `i `uc
..
]
[; ;lcd.c: 84: uint8_t ARR_LcdLineNumAddress_U8[]={0x80,0xc0,0x90,0xd0};
[; ;lcd.c: 93: static void lcd_DataWrite( uint8_t dat);
[; ;lcd.c: 94: static void lcd_BusyCheck(void);
[; ;lcd.c: 95: static void lcd_Reset(void);
[; ;lcd.c: 96: static void lcd_SendCmdSignals(void);
[; ;lcd.c: 97: static void lcd_SendDataSignals(void);
[; ;lcd.c: 98: static void lcd_SendHigherNibble(uint8_t dataByte);
[; ;lcd.c: 99: static void lcd_SendLowerNibble(uint8_t dataByte);
"129
[v _LCD_SetUp `(v ~T0 @X0 1 ef11`E33`E33`E33`E33`E33`E33`E33`E33`E33`E33`E33 ]
"140
{
[; ;lcd.c: 129: void LCD_SetUp(gpioPins_et RS,
[; ;lcd.c: 130: gpioPins_et RW,
[; ;lcd.c: 131: gpioPins_et EN,
[; ;lcd.c: 132: gpioPins_et D0,
[; ;lcd.c: 133: gpioPins_et D1,
[; ;lcd.c: 134: gpioPins_et D2,
[; ;lcd.c: 135: gpioPins_et D3,
[; ;lcd.c: 136: gpioPins_et D4,
[; ;lcd.c: 137: gpioPins_et D5,
[; ;lcd.c: 138: gpioPins_et D6,
[; ;lcd.c: 139: gpioPins_et D7 )
[; ;lcd.c: 140: {
[e :U _LCD_SetUp ]
"129
[v _RS `E33 ~T0 @X0 1 r1 ]
"130
[v _RW `E33 ~T0 @X0 1 r2 ]
"131
[v _EN `E33 ~T0 @X0 1 r3 ]
"132
[v _D0 `E33 ~T0 @X0 1 r4 ]
"133
[v _D1 `E33 ~T0 @X0 1 r5 ]
"134
[v _D2 `E33 ~T0 @X0 1 r6 ]
"135
[v _D3 `E33 ~T0 @X0 1 r7 ]
"136
[v _D4 `E33 ~T0 @X0 1 r8 ]
"137
[v _D5 `E33 ~T0 @X0 1 r9 ]
"138
[v _D6 `E33 ~T0 @X0 1 r10 ]
"139
[v _D7 `E33 ~T0 @X0 1 r11 ]
"140
[f ]
[; ;lcd.c: 142: LCDConfig.RS = RS;
"142
[e = . _LCDConfig 3 _RS ]
[; ;lcd.c: 143: LCDConfig.RW = RW;
"143
[e = . _LCDConfig 4 _RW ]
[; ;lcd.c: 144: LCDConfig.EN = EN;
"144
[e = . _LCDConfig 5 _EN ]
[; ;lcd.c: 146: LCDConfig.D0 = D0;
"146
[e = . _LCDConfig 6 _D0 ]
[; ;lcd.c: 147: LCDConfig.D1 = D1;
"147
[e = . _LCDConfig 7 _D1 ]
[; ;lcd.c: 148: LCDConfig.D2 = D2;
"148
[e = . _LCDConfig 8 _D2 ]
[; ;lcd.c: 149: LCDConfig.D3 = D3;
"149
[e = . _LCDConfig 9 _D3 ]
[; ;lcd.c: 150: LCDConfig.D4 = D4;
"150
[e = . _LCDConfig 10 _D4 ]
[; ;lcd.c: 151: LCDConfig.D5 = D5;
"151
[e = . _LCDConfig 11 _D5 ]
[; ;lcd.c: 152: LCDConfig.D6 = D6;
"152
[e = . _LCDConfig 12 _D6 ]
[; ;lcd.c: 153: LCDConfig.D7 = D7;
"153
[e = . _LCDConfig 13 _D7 ]
[; ;lcd.c: 156: if((D0 == P_NC) || (D1 == P_NC) || (D2 == P_NC) || (D3 == P_NC))
"156
[e $ ! || || || == -> _D0 `i -> . `E33 40 `i == -> _D1 `i -> . `E33 40 `i == -> _D2 `i -> . `E33 40 `i == -> _D3 `i -> . `E33 40 `i 3  ]
[; ;lcd.c: 157: {
"157
{
[; ;lcd.c: 158: LCDConfig.v_LcdMode_U8 = 4;
"158
[e = . _LCDConfig 2 -> -> 4 `i `uc ]
"159
}
[; ;lcd.c: 159: }
[e $U 4  ]
"160
[e :U 3 ]
[; ;lcd.c: 160: else
[; ;lcd.c: 161: {
"161
{
[; ;lcd.c: 162: LCDConfig.v_LcdMode_U8 = 8;
"162
[e = . _LCDConfig 2 -> -> 8 `i `uc ]
[; ;lcd.c: 163: GPIO_PinDirection(D0,0x00u);
"163
[e ( _GPIO_PinDirection (2 , _D0 -> -> 0 `ui `uc ]
[; ;lcd.c: 164: GPIO_PinDirection(D1,0x00u);
"164
[e ( _GPIO_PinDirection (2 , _D1 -> -> 0 `ui `uc ]
[; ;lcd.c: 165: GPIO_PinDirection(D2,0x00u);
"165
[e ( _GPIO_PinDirection (2 , _D2 -> -> 0 `ui `uc ]
[; ;lcd.c: 166: GPIO_PinDirection(D3,0x00u);
"166
[e ( _GPIO_PinDirection (2 , _D3 -> -> 0 `ui `uc ]
"167
}
[e :U 4 ]
[; ;lcd.c: 167: }
[; ;lcd.c: 170: GPIO_PinDirection(RS,0x00u);
"170
[e ( _GPIO_PinDirection (2 , _RS -> -> 0 `ui `uc ]
[; ;lcd.c: 171: GPIO_PinDirection(RW,0x00u);
"171
[e ( _GPIO_PinDirection (2 , _RW -> -> 0 `ui `uc ]
[; ;lcd.c: 172: GPIO_PinDirection(EN,0x00u);
"172
[e ( _GPIO_PinDirection (2 , _EN -> -> 0 `ui `uc ]
[; ;lcd.c: 174: GPIO_PinDirection(D4,0x00u);
"174
[e ( _GPIO_PinDirection (2 , _D4 -> -> 0 `ui `uc ]
[; ;lcd.c: 175: GPIO_PinDirection(D5,0x00u);
"175
[e ( _GPIO_PinDirection (2 , _D5 -> -> 0 `ui `uc ]
[; ;lcd.c: 176: GPIO_PinDirection(D6,0x00u);
"176
[e ( _GPIO_PinDirection (2 , _D6 -> -> 0 `ui `uc ]
[; ;lcd.c: 177: GPIO_PinDirection(D7,0x00u);
"177
[e ( _GPIO_PinDirection (2 , _D7 -> -> 0 `ui `uc ]
[; ;lcd.c: 178: }
"178
[e :UE 2 ]
}
"192
[v _LCD_Init `(v ~T0 @X0 1 ef2`uc`uc ]
"193
{
[; ;lcd.c: 192: void LCD_Init(uint8_t v_lcdNoOfLines_u8, uint8_t v_MaxCharsPerLine_u8)
[; ;lcd.c: 193: {
[e :U _LCD_Init ]
"192
[v _v_lcdNoOfLines_u8 `uc ~T0 @X0 1 r1 ]
[v _v_MaxCharsPerLine_u8 `uc ~T0 @X0 1 r2 ]
"193
[f ]
[; ;lcd.c: 196: LCDConfig.v_MaxSupportedChars_U8 = v_MaxCharsPerLine_u8;
"196
[e = . _LCDConfig 1 _v_MaxCharsPerLine_u8 ]
[; ;lcd.c: 197: LCDConfig.v_MaxSupportedLines_U8 = v_lcdNoOfLines_u8;
"197
[e = . _LCDConfig 0 _v_lcdNoOfLines_u8 ]
[; ;lcd.c: 198: if(v_lcdNoOfLines_u8 > 0x02)
"198
[e $ ! > -> _v_lcdNoOfLines_u8 `i -> 2 `i 6  ]
[; ;lcd.c: 199: {
"199
{
[; ;lcd.c: 200: ARR_LcdLineNumAddress_U8[0x02] = 0x90 + (v_MaxCharsPerLine_u8 & 0x0fu);
"200
[e = *U + &U _ARR_LcdLineNumAddress_U8 * -> -> -> 2 `i `ui `ux -> -> # *U &U _ARR_LcdLineNumAddress_U8 `ui `ux -> + -> -> 144 `i `ui & -> _v_MaxCharsPerLine_u8 `ui -> 15 `ui `uc ]
[; ;lcd.c: 201: ARR_LcdLineNumAddress_U8[0x03] = 0xd0 + (v_MaxCharsPerLine_u8 & 0x0fu);
"201
[e = *U + &U _ARR_LcdLineNumAddress_U8 * -> -> -> 3 `i `ui `ux -> -> # *U &U _ARR_LcdLineNumAddress_U8 `ui `ux -> + -> -> 208 `i `ui & -> _v_MaxCharsPerLine_u8 `ui -> 15 `ui `uc ]
"202
}
[e :U 6 ]
[; ;lcd.c: 202: }
[; ;lcd.c: 204: DELAY_ms(100);
"204
[e ( _DELAY_ms (1 -> -> 100 `i `ui ]
[; ;lcd.c: 206: if(LCDConfig.v_LcdMode_U8 == 8u)
"206
[e $ ! == -> . _LCDConfig 2 `ui -> 8 `ui 7  ]
[; ;lcd.c: 207: {
"207
{
[; ;lcd.c: 208: LCD_CmdWrite(0x38u);
"208
[e ( _LCD_CmdWrite (1 -> -> 56 `ui `uc ]
"209
}
[; ;lcd.c: 209: }
[e $U 8  ]
"210
[e :U 7 ]
[; ;lcd.c: 210: else if(LCDConfig.v_LcdMode_U8 == 4u)
[e $ ! == -> . _LCDConfig 2 `ui -> 4 `ui 9  ]
[; ;lcd.c: 211: {
"211
{
[; ;lcd.c: 212: lcd_Reset();
"212
[e ( _lcd_Reset ..  ]
[; ;lcd.c: 213: LCD_CmdWrite(0x28u);
"213
[e ( _LCD_CmdWrite (1 -> -> 40 `ui `uc ]
"214
}
[e :U 9 ]
"216
[e :U 8 ]
[; ;lcd.c: 214: }
[; ;lcd.c: 216: LCD_CmdWrite(0x0Eu);
[e ( _LCD_CmdWrite (1 -> -> 14 `ui `uc ]
[; ;lcd.c: 217: LCD_Clear();
"217
[e ( _LCD_Clear ..  ]
[; ;lcd.c: 218: }
"218
[e :UE 5 ]
}
"231
[v _LCD_Clear `(v ~T0 @X0 1 ef ]
"232
{
[; ;lcd.c: 231: void LCD_Clear()
[; ;lcd.c: 232: {
[e :U _LCD_Clear ]
[f ]
[; ;lcd.c: 233: LCD_CmdWrite(0x01u);
"233
[e ( _LCD_CmdWrite (1 -> -> 1 `ui `uc ]
[; ;lcd.c: 234: LCD_GoToLine(0x00);
"234
[e ( _LCD_GoToLine (1 -> -> 0 `i `uc ]
[; ;lcd.c: 235: }
"235
[e :UE 10 ]
}
"259
[v _LCD_GoToLine `(v ~T0 @X0 1 ef1`uc ]
"260
{
[; ;lcd.c: 259: void LCD_GoToLine(uint8_t v_lineNumber_u8)
[; ;lcd.c: 260: {
[e :U _LCD_GoToLine ]
"259
[v _v_lineNumber_u8 `uc ~T0 @X0 1 r1 ]
"260
[f ]
[; ;lcd.c: 261: if(v_lineNumber_u8 < LCDConfig.v_MaxSupportedLines_U8)
"261
[e $ ! < -> _v_lineNumber_u8 `i -> . _LCDConfig 0 `i 12  ]
[; ;lcd.c: 262: {
"262
{
[; ;lcd.c: 265: v_LcdTrackCursorPos_U8 = 0x00;
"265
[e = _v_LcdTrackCursorPos_U8 -> -> 0 `i `uc ]
[; ;lcd.c: 266: v_LcdTrackLineNum_U8 = v_lineNumber_u8;
"266
[e = _v_LcdTrackLineNum_U8 _v_lineNumber_u8 ]
[; ;lcd.c: 267: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_lineNumber_u8]);
"267
[e ( _LCD_CmdWrite (1 *U + &U _ARR_LcdLineNumAddress_U8 * -> _v_lineNumber_u8 `ux -> -> # *U &U _ARR_LcdLineNumAddress_U8 `ui `ux ]
"268
}
[e :U 12 ]
[; ;lcd.c: 268: }
[; ;lcd.c: 269: }
"269
[e :UE 11 ]
}
"286
[v _LCD_GoToNextLine `(v ~T0 @X0 1 ef ]
"287
{
[; ;lcd.c: 286: void LCD_GoToNextLine(void)
[; ;lcd.c: 287: {
[e :U _LCD_GoToNextLine ]
[f ]
[; ;lcd.c: 290: v_LcdTrackLineNum_U8++;
"290
[e ++ _v_LcdTrackLineNum_U8 -> -> 1 `i `uc ]
[; ;lcd.c: 291: v_LcdTrackCursorPos_U8 = 0x00;
"291
[e = _v_LcdTrackCursorPos_U8 -> -> 0 `i `uc ]
[; ;lcd.c: 292: if(v_LcdTrackLineNum_U8 >= LCDConfig.v_MaxSupportedLines_U8)
"292
[e $ ! >= -> _v_LcdTrackLineNum_U8 `i -> . _LCDConfig 0 `i 14  ]
[; ;lcd.c: 293: v_LcdTrackLineNum_U8 = 0x00;
"293
[e = _v_LcdTrackLineNum_U8 -> -> 0 `i `uc ]
[e :U 14 ]
[; ;lcd.c: 294: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[v_LcdTrackLineNum_U8]);
"294
[e ( _LCD_CmdWrite (1 *U + &U _ARR_LcdLineNumAddress_U8 * -> _v_LcdTrackLineNum_U8 `ux -> -> # *U &U _ARR_LcdLineNumAddress_U8 `ui `ux ]
[; ;lcd.c: 295: }
"295
[e :UE 13 ]
}
"352
[v _LCD_CmdWrite `(v ~T0 @X0 1 ef1`uc ]
"353
{
[; ;lcd.c: 352: void LCD_CmdWrite( uint8_t v_lcdCmd_u8)
[; ;lcd.c: 353: {
[e :U _LCD_CmdWrite ]
"352
[v _v_lcdCmd_u8 `uc ~T0 @X0 1 r1 ]
"353
[f ]
[; ;lcd.c: 354: lcd_BusyCheck();
"354
[e ( _lcd_BusyCheck ..  ]
[; ;lcd.c: 355: if(LCDConfig.v_LcdMode_U8 == 8u)
"355
[e $ ! == -> . _LCDConfig 2 `ui -> 8 `ui 16  ]
[; ;lcd.c: 356: {
"356
{
[; ;lcd.c: 357: lcd_SendLowerNibble(v_lcdCmd_u8);
"357
[e ( _lcd_SendLowerNibble (1 _v_lcdCmd_u8 ]
"358
}
[; ;lcd.c: 358: }
[e $U 17  ]
"359
[e :U 16 ]
[; ;lcd.c: 359: else
[; ;lcd.c: 360: {
"360
{
[; ;lcd.c: 361: lcd_SendHigherNibble(v_lcdCmd_u8);
"361
[e ( _lcd_SendHigherNibble (1 _v_lcdCmd_u8 ]
[; ;lcd.c: 362: lcd_SendCmdSignals();
"362
[e ( _lcd_SendCmdSignals ..  ]
[; ;lcd.c: 363: v_lcdCmd_u8 = v_lcdCmd_u8 << 4;
"363
[e = _v_lcdCmd_u8 -> << -> _v_lcdCmd_u8 `i -> 4 `i `uc ]
"364
}
[e :U 17 ]
[; ;lcd.c: 364: }
[; ;lcd.c: 366: lcd_SendHigherNibble(v_lcdCmd_u8);
"366
[e ( _lcd_SendHigherNibble (1 _v_lcdCmd_u8 ]
[; ;lcd.c: 367: lcd_SendCmdSignals();
"367
[e ( _lcd_SendCmdSignals ..  ]
[; ;lcd.c: 368: }
"368
[e :UE 15 ]
}
"386
[v _LCD_DisplayChar `(v ~T0 @X0 1 ef1`uc ]
"387
{
[; ;lcd.c: 386: void LCD_DisplayChar(char v_lcdData_u8)
[; ;lcd.c: 387: {
[e :U _LCD_DisplayChar ]
"386
[v _v_lcdData_u8 `uc ~T0 @X0 1 r1 ]
"387
[f ]
[; ;lcd.c: 388: if((v_LcdTrackCursorPos_U8>=LCDConfig.v_MaxSupportedChars_U8) || (v_lcdData_u8=='\n'))
"388
[e $ ! || >= -> _v_LcdTrackCursorPos_U8 `i -> . _LCDConfig 1 `i == -> _v_lcdData_u8 `ui -> 10 `ui 19  ]
[; ;lcd.c: 389: {
"389
{
[; ;lcd.c: 392: LCD_GoToNextLine();
"392
[e ( _LCD_GoToNextLine ..  ]
"393
}
[e :U 19 ]
[; ;lcd.c: 393: }
[; ;lcd.c: 394: if(v_lcdData_u8!='\n')
"394
[e $ ! != -> _v_lcdData_u8 `ui -> 10 `ui 20  ]
[; ;lcd.c: 395: {
"395
{
[; ;lcd.c: 397: lcd_DataWrite(v_lcdData_u8);
"397
[e ( _lcd_DataWrite (1 _v_lcdData_u8 ]
[; ;lcd.c: 398: v_LcdTrackCursorPos_U8++;
"398
[e ++ _v_LcdTrackCursorPos_U8 -> -> 1 `i `uc ]
"399
}
[e :U 20 ]
[; ;lcd.c: 399: }
[; ;lcd.c: 400: }
"400
[e :UE 18 ]
}
"421
[v _LCD_DisplayString `(v ~T0 @X0 1 ef1`*Cuc ]
"422
{
[; ;lcd.c: 421: void LCD_DisplayString(const char *ptr_stringPointer_u8)
[; ;lcd.c: 422: {
[e :U _LCD_DisplayString ]
"421
[v _ptr_stringPointer_u8 `*Cuc ~T0 @X0 1 r1 ]
"422
[f ]
[; ;lcd.c: 423: while((*ptr_stringPointer_u8)!=0)
"423
[e $U 22  ]
[e :U 23 ]
[; ;lcd.c: 424: LCD_DisplayChar(*ptr_stringPointer_u8++);
"424
[e ( _LCD_DisplayChar (1 *U ++ _ptr_stringPointer_u8 * -> -> 1 `i `x -> -> # *U _ptr_stringPointer_u8 `i `x ]
[e :U 22 ]
"423
[e $ != -> *U _ptr_stringPointer_u8 `i -> 0 `i 23  ]
[e :U 24 ]
[; ;lcd.c: 425: }
"425
[e :UE 21 ]
}
"819
[v _lcd_DataWrite `(v ~T0 @X0 1 sf1`uc ]
"820
{
[; ;lcd.c: 819: static void lcd_DataWrite( uint8_t dataByte)
[; ;lcd.c: 820: {
[e :U _lcd_DataWrite ]
"819
[v _dataByte `uc ~T0 @X0 1 r1 ]
"820
[f ]
[; ;lcd.c: 821: lcd_BusyCheck();
"821
[e ( _lcd_BusyCheck ..  ]
[; ;lcd.c: 822: if(LCDConfig.v_LcdMode_U8 == 8u)
"822
[e $ ! == -> . _LCDConfig 2 `ui -> 8 `ui 26  ]
[; ;lcd.c: 823: {
"823
{
[; ;lcd.c: 824: lcd_SendLowerNibble(dataByte);
"824
[e ( _lcd_SendLowerNibble (1 _dataByte ]
"825
}
[; ;lcd.c: 825: }
[e $U 27  ]
"826
[e :U 26 ]
[; ;lcd.c: 826: else
[; ;lcd.c: 827: {
"827
{
[; ;lcd.c: 828: lcd_SendHigherNibble(dataByte);
"828
[e ( _lcd_SendHigherNibble (1 _dataByte ]
[; ;lcd.c: 829: lcd_SendDataSignals();
"829
[e ( _lcd_SendDataSignals ..  ]
[; ;lcd.c: 830: dataByte = dataByte << 4;
"830
[e = _dataByte -> << -> _dataByte `i -> 4 `i `uc ]
"831
}
[e :U 27 ]
[; ;lcd.c: 831: }
[; ;lcd.c: 833: lcd_SendHigherNibble(dataByte);
"833
[e ( _lcd_SendHigherNibble (1 _dataByte ]
[; ;lcd.c: 834: lcd_SendDataSignals();
"834
[e ( _lcd_SendDataSignals ..  ]
[; ;lcd.c: 835: }
"835
[e :UE 25 ]
}
"853
[v _lcd_BusyCheck `(v ~T0 @X0 1 sf ]
"854
{
[; ;lcd.c: 853: static void lcd_BusyCheck(void)
[; ;lcd.c: 854: {
[e :U _lcd_BusyCheck ]
[f ]
"855
[v _busyflag `uc ~T0 @X0 1 a ]
[; ;lcd.c: 855: uint8_t busyflag;
[; ;lcd.c: 857: if(LCDConfig.RW != P_NC)
"857
[e $ ! != -> . _LCDConfig 4 `i -> . `E33 40 `i 29  ]
[; ;lcd.c: 858: {
"858
{
[; ;lcd.c: 859: GPIO_PinDirection(LCDConfig.D7,0x01u);
"859
[e ( _GPIO_PinDirection (2 , . _LCDConfig 13 -> -> 1 `ui `uc ]
[; ;lcd.c: 860: GPIO_PinWrite(LCDConfig.RS,0);
"860
[e ( _GPIO_PinWrite (2 , . _LCDConfig 3 -> -> 0 `i `uc ]
[; ;lcd.c: 861: GPIO_PinWrite(LCDConfig.RW,1);
"861
[e ( _GPIO_PinWrite (2 , . _LCDConfig 4 -> -> 1 `i `uc ]
[; ;lcd.c: 862: do
"862
[e :U 32 ]
[; ;lcd.c: 863: {
"863
{
[; ;lcd.c: 865: GPIO_PinWrite(LCDConfig.EN,0);
"865
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 0 `i `uc ]
[; ;lcd.c: 866: DELAY_us(10);
"866
[e ( _DELAY_us (1 -> -> 10 `i `ui ]
[; ;lcd.c: 867: GPIO_PinWrite(LCDConfig.EN,1);
"867
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 1 `i `uc ]
[; ;lcd.c: 868: DELAY_us(10);
"868
[e ( _DELAY_us (1 -> -> 10 `i `ui ]
[; ;lcd.c: 869: busyflag = GPIO_PinRead(LCDConfig.D7);
"869
[e = _busyflag ( _GPIO_PinRead (1 . _LCDConfig 13 ]
[; ;lcd.c: 872: if(LCDConfig.v_LcdMode_U8 == 4)
"872
[e $ ! == -> . _LCDConfig 2 `i -> 4 `i 33  ]
[; ;lcd.c: 873: {
"873
{
[; ;lcd.c: 875: GPIO_PinWrite(LCDConfig.EN,0);
"875
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 0 `i `uc ]
[; ;lcd.c: 876: DELAY_us(10);
"876
[e ( _DELAY_us (1 -> -> 10 `i `ui ]
[; ;lcd.c: 877: GPIO_PinWrite(LCDConfig.EN,1);
"877
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 1 `i `uc ]
[; ;lcd.c: 878: DELAY_us(10);
"878
[e ( _DELAY_us (1 -> -> 10 `i `ui ]
"879
}
[e :U 33 ]
"880
}
[; ;lcd.c: 879: }
[; ;lcd.c: 880: }while(busyflag!=0);
[e $ != -> _busyflag `i -> 0 `i 32  ]
[e :U 31 ]
[; ;lcd.c: 882: GPIO_PinDirection(LCDConfig.D7,0x00u);
"882
[e ( _GPIO_PinDirection (2 , . _LCDConfig 13 -> -> 0 `ui `uc ]
"883
}
[; ;lcd.c: 883: }
[e $U 34  ]
"884
[e :U 29 ]
[; ;lcd.c: 884: else
[; ;lcd.c: 885: {
"885
{
[; ;lcd.c: 888: DELAY_ms(1);
"888
[e ( _DELAY_ms (1 -> -> 1 `i `ui ]
"889
}
[e :U 34 ]
[; ;lcd.c: 889: }
[; ;lcd.c: 890: }
"890
[e :UE 28 ]
}
"906
[v _lcd_Reset `(v ~T0 @X0 1 sf ]
"907
{
[; ;lcd.c: 906: static void lcd_Reset(void)
[; ;lcd.c: 907: {
[e :U _lcd_Reset ]
[f ]
[; ;lcd.c: 909: lcd_SendHigherNibble(0x30);
"909
[e ( _lcd_SendHigherNibble (1 -> -> 48 `i `uc ]
[; ;lcd.c: 910: lcd_SendCmdSignals();
"910
[e ( _lcd_SendCmdSignals ..  ]
[; ;lcd.c: 911: DELAY_ms(100);
"911
[e ( _DELAY_ms (1 -> -> 100 `i `ui ]
[; ;lcd.c: 912: lcd_SendHigherNibble(0x30);
"912
[e ( _lcd_SendHigherNibble (1 -> -> 48 `i `uc ]
[; ;lcd.c: 913: lcd_SendCmdSignals();
"913
[e ( _lcd_SendCmdSignals ..  ]
[; ;lcd.c: 914: DELAY_us(200);
"914
[e ( _DELAY_us (1 -> -> 200 `i `ui ]
[; ;lcd.c: 915: lcd_SendHigherNibble(0x30);
"915
[e ( _lcd_SendHigherNibble (1 -> -> 48 `i `uc ]
[; ;lcd.c: 916: lcd_SendCmdSignals();
"916
[e ( _lcd_SendCmdSignals ..  ]
[; ;lcd.c: 917: DELAY_us(200);
"917
[e ( _DELAY_us (1 -> -> 200 `i `ui ]
[; ;lcd.c: 918: lcd_SendHigherNibble(0x20);
"918
[e ( _lcd_SendHigherNibble (1 -> -> 32 `i `uc ]
[; ;lcd.c: 919: lcd_SendCmdSignals();
"919
[e ( _lcd_SendCmdSignals ..  ]
[; ;lcd.c: 920: DELAY_us(200);
"920
[e ( _DELAY_us (1 -> -> 200 `i `ui ]
[; ;lcd.c: 921: }
"921
[e :UE 35 ]
}
"936
[v _lcd_SendHigherNibble `(v ~T0 @X0 1 sf1`uc ]
"937
{
[; ;lcd.c: 936: static void lcd_SendHigherNibble(uint8_t dataByte)
[; ;lcd.c: 937: {
[e :U _lcd_SendHigherNibble ]
"936
[v _dataByte `uc ~T0 @X0 1 r1 ]
"937
[f ]
[; ;lcd.c: 938: GPIO_PinWrite(LCDConfig.D4,(((dataByte)&((1<<(4))))!=0u));
"938
[e ( _GPIO_PinWrite (2 , . _LCDConfig 10 -> -> != -> & -> _dataByte `i << -> 1 `i -> 4 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 939: GPIO_PinWrite(LCDConfig.D5,(((dataByte)&((1<<(5))))!=0u));
"939
[e ( _GPIO_PinWrite (2 , . _LCDConfig 11 -> -> != -> & -> _dataByte `i << -> 1 `i -> 5 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 940: GPIO_PinWrite(LCDConfig.D6,(((dataByte)&((1<<(6))))!=0u));
"940
[e ( _GPIO_PinWrite (2 , . _LCDConfig 12 -> -> != -> & -> _dataByte `i << -> 1 `i -> 6 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 941: GPIO_PinWrite(LCDConfig.D7,(((dataByte)&((1<<(7))))!=0u));
"941
[e ( _GPIO_PinWrite (2 , . _LCDConfig 13 -> -> != -> & -> _dataByte `i << -> 1 `i -> 7 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 942: }
"942
[e :UE 36 ]
}
"955
[v _lcd_SendLowerNibble `(v ~T0 @X0 1 sf1`uc ]
"956
{
[; ;lcd.c: 955: static void lcd_SendLowerNibble(uint8_t dataByte)
[; ;lcd.c: 956: {
[e :U _lcd_SendLowerNibble ]
"955
[v _dataByte `uc ~T0 @X0 1 r1 ]
"956
[f ]
[; ;lcd.c: 957: GPIO_PinWrite(LCDConfig.D0,(((dataByte)&((1<<(0))))!=0u));
"957
[e ( _GPIO_PinWrite (2 , . _LCDConfig 6 -> -> != -> & -> _dataByte `i << -> 1 `i -> 0 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 958: GPIO_PinWrite(LCDConfig.D1,(((dataByte)&((1<<(1))))!=0u));
"958
[e ( _GPIO_PinWrite (2 , . _LCDConfig 7 -> -> != -> & -> _dataByte `i << -> 1 `i -> 1 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 959: GPIO_PinWrite(LCDConfig.D2,(((dataByte)&((1<<(2))))!=0u));
"959
[e ( _GPIO_PinWrite (2 , . _LCDConfig 8 -> -> != -> & -> _dataByte `i << -> 1 `i -> 2 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 960: GPIO_PinWrite(LCDConfig.D3,(((dataByte)&((1<<(3))))!=0u));
"960
[e ( _GPIO_PinWrite (2 , . _LCDConfig 9 -> -> != -> & -> _dataByte `i << -> 1 `i -> 3 `i `ui -> 0 `ui `i `uc ]
[; ;lcd.c: 961: }
"961
[e :UE 37 ]
}
"974
[v _lcd_SendCmdSignals `(v ~T0 @X0 1 sf ]
"975
{
[; ;lcd.c: 974: static void lcd_SendCmdSignals(void)
[; ;lcd.c: 975: {
[e :U _lcd_SendCmdSignals ]
[f ]
[; ;lcd.c: 976: GPIO_PinWrite(LCDConfig.RS,0);
"976
[e ( _GPIO_PinWrite (2 , . _LCDConfig 3 -> -> 0 `i `uc ]
[; ;lcd.c: 977: GPIO_PinWrite(LCDConfig.RW,0);
"977
[e ( _GPIO_PinWrite (2 , . _LCDConfig 4 -> -> 0 `i `uc ]
[; ;lcd.c: 978: GPIO_PinWrite(LCDConfig.EN,1);
"978
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 1 `i `uc ]
[; ;lcd.c: 979: DELAY_us(10);
"979
[e ( _DELAY_us (1 -> -> 10 `i `ui ]
[; ;lcd.c: 980: GPIO_PinWrite(LCDConfig.EN,0);
"980
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 0 `i `uc ]
[; ;lcd.c: 982: }
"982
[e :UE 38 ]
}
"995
[v _lcd_SendDataSignals `(v ~T0 @X0 1 sf ]
"996
{
[; ;lcd.c: 995: static void lcd_SendDataSignals(void)
[; ;lcd.c: 996: {
[e :U _lcd_SendDataSignals ]
[f ]
[; ;lcd.c: 997: GPIO_PinWrite(LCDConfig.RS,1);
"997
[e ( _GPIO_PinWrite (2 , . _LCDConfig 3 -> -> 1 `i `uc ]
[; ;lcd.c: 998: GPIO_PinWrite(LCDConfig.RW,0);
"998
[e ( _GPIO_PinWrite (2 , . _LCDConfig 4 -> -> 0 `i `uc ]
[; ;lcd.c: 999: GPIO_PinWrite(LCDConfig.EN,1);
"999
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 1 `i `uc ]
[; ;lcd.c: 1000: DELAY_us(10);
"1000
[e ( _DELAY_us (1 -> -> 10 `i `ui ]
[; ;lcd.c: 1001: GPIO_PinWrite(LCDConfig.EN,0);
"1001
[e ( _GPIO_PinWrite (2 , . _LCDConfig 5 -> -> 0 `i `uc ]
[; ;lcd.c: 1002: }
"1002
[e :UE 39 ]
}
